/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/wp-content/plugins/maestro-game-builder/dist/js/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 57);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("/* globals __VUE_SSR_CONTEXT__ */\n\n// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyB0aGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICByYXdTY3JpcHRFeHBvcnRzLFxuICBjb21waWxlZFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIgLyogc2VydmVyIG9ubHkgKi9cbikge1xuICB2YXIgZXNNb2R1bGVcbiAgdmFyIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyB8fCB7fVxuXG4gIC8vIEVTNiBtb2R1bGVzIGludGVyb3BcbiAgdmFyIHR5cGUgPSB0eXBlb2YgcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXNNb2R1bGUgPSByYXdTY3JpcHRFeHBvcnRzXG4gICAgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICB9XG5cbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChjb21waWxlZFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBjb21waWxlZFRlbXBsYXRlLnJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWRUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIHZhciBmdW5jdGlvbmFsID0gb3B0aW9ucy5mdW5jdGlvbmFsXG4gICAgdmFyIGV4aXN0aW5nID0gZnVuY3Rpb25hbFxuICAgICAgPyBvcHRpb25zLnJlbmRlclxuICAgICAgOiBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgIGlmICghZnVuY3Rpb25hbCkge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlc01vZHVsZTogZXNNb2R1bGUsXG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplci5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar bind = __webpack_require__(9);\nvar isBuffer = __webpack_require__(58);\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object' && !isArray(obj)) {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(26);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2luZGV4LmpzPzQzMDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nvar utils = __webpack_require__(1);\nvar normalizeHeaderName = __webpack_require__(40);\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(5);\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(5);\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9kZWZhdWx0cy5qcz8xMmNiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIrQ0FBQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxZQUFZO0FBQ25CO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2RlZmF1bHRzLmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nvar utils = __webpack_require__(1);\nvar settle = __webpack_require__(32);\nvar buildURL = __webpack_require__(35);\nvar parseHeaders = __webpack_require__(41);\nvar isURLSameOrigin = __webpack_require__(39);\nvar createError = __webpack_require__(8);\nvar btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(34);\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n    var loadEvent = 'onreadystatechange';\n    var xDomain = false;\n\n    // For IE 8/9 CORS support\n    // Only supports POST and GET calls and doesn't returns the response headers.\n    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n    if (process.env.NODE_ENV !== 'test' &&\n        typeof window !== 'undefined' &&\n        window.XDomainRequest && !('withCredentials' in request) &&\n        !isURLSameOrigin(config.url)) {\n      request = new window.XDomainRequest();\n      loadEvent = 'onload';\n      xDomain = true;\n      request.onprogress = function handleProgress() {};\n      request.ontimeout = function handleTimeout() {};\n    }\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request[loadEvent] = function handleLoad() {\n      if (!request || (request.readyState !== 4 && !xDomain)) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)\n        status: request.status === 1223 ? 204 : request.status,\n        statusText: request.status === 1223 ? 'No Content' : request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = __webpack_require__(37);\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n          cookies.read(config.xsrfCookieName) :\n          undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanM/MTRlZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiK0NBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEM7QUFDNUM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9temFicmlza2llL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzPzNhZGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanM/ZjI3MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar enhanceError = __webpack_require__(31);\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzP2Y3NzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanM/NWNkZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * Cropper.js v1.0.0-rc.2\n * https://github.com/fengyuanchen/cropperjs\n *\n * Copyright (c) 2017 Fengyuan Chen\n * Released under the MIT license\n *\n * Date: 2017-05-30T05:02:48.005Z\n */\n\n(function (global, factory) {\n   true ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Cropper = factory());\n}(this, (function () { 'use strict';\n\nvar DEFAULTS = {\n  // Define the view mode of the cropper\n  viewMode: 0, // 0, 1, 2, 3\n\n  // Define the dragging mode of the cropper\n  dragMode: 'crop', // 'crop', 'move' or 'none'\n\n  // Define the aspect ratio of the crop box\n  aspectRatio: NaN,\n\n  // An object with the previous cropping result data\n  data: null,\n\n  // A selector for adding extra containers to preview\n  preview: '',\n\n  // Re-render the cropper when resize the window\n  responsive: true,\n\n  // Restore the cropped area after resize the window\n  restore: true,\n\n  // Check if the current image is a cross-origin image\n  checkCrossOrigin: true,\n\n  // Check the current image's Exif Orientation information\n  checkOrientation: true,\n\n  // Show the black modal\n  modal: true,\n\n  // Show the dashed lines for guiding\n  guides: true,\n\n  // Show the center indicator for guiding\n  center: true,\n\n  // Show the white modal to highlight the crop box\n  highlight: true,\n\n  // Show the grid background\n  background: true,\n\n  // Enable to crop the image automatically when initialize\n  autoCrop: true,\n\n  // Define the percentage of automatic cropping area when initializes\n  autoCropArea: 0.8,\n\n  // Enable to move the image\n  movable: true,\n\n  // Enable to rotate the image\n  rotatable: true,\n\n  // Enable to scale the image\n  scalable: true,\n\n  // Enable to zoom the image\n  zoomable: true,\n\n  // Enable to zoom the image by dragging touch\n  zoomOnTouch: true,\n\n  // Enable to zoom the image by wheeling mouse\n  zoomOnWheel: true,\n\n  // Define zoom ratio when zoom the image by wheeling mouse\n  wheelZoomRatio: 0.1,\n\n  // Enable to move the crop box\n  cropBoxMovable: true,\n\n  // Enable to resize the crop box\n  cropBoxResizable: true,\n\n  // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n  toggleDragModeOnDblclick: true,\n\n  // Size limitation\n  minCanvasWidth: 0,\n  minCanvasHeight: 0,\n  minCropBoxWidth: 0,\n  minCropBoxHeight: 0,\n  minContainerWidth: 200,\n  minContainerHeight: 100,\n\n  // Shortcuts of events\n  ready: null,\n  cropstart: null,\n  cropmove: null,\n  cropend: null,\n  crop: null,\n  zoom: null\n};\n\nvar TEMPLATE = '<div class=\"cropper-container\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-action=\"se\"></span>' + '</div>' + '</div>';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar set = function set(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n// RegExps\nvar REGEXP_DATA_URL_HEAD = /^data:.*,/;\nvar REGEXP_HYPHENATE = /([a-z\\d])([A-Z])/g;\nvar REGEXP_ORIGINS = /^(https?:)\\/\\/([^:/?#]+):?(\\d*)/i;\nvar REGEXP_SPACES = /\\s+/;\nvar REGEXP_SUFFIX = /^(width|height|left|top|marginLeft|marginTop)$/;\nvar REGEXP_TRIM = /^\\s+(.*)\\s+$/;\nvar REGEXP_USERAGENT = /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i;\n\n// Utilities\nvar navigator = typeof window !== 'undefined' ? window.navigator : null;\nvar IS_SAFARI_OR_UIWEBVIEW = navigator && REGEXP_USERAGENT.test(navigator.userAgent);\nvar objectProto = Object.prototype;\nvar toString = objectProto.toString;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar slice = Array.prototype.slice;\nvar fromCharCode = String.fromCharCode;\n\nfunction typeOf(obj) {\n  return toString.call(obj).slice(8, -1).toLowerCase();\n}\n\nfunction isNumber(num) {\n  return typeof num === 'number' && !isNaN(num);\n}\n\nfunction isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n\nfunction isObject(obj) {\n  return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null;\n}\n\nfunction isPlainObject(obj) {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  try {\n    var _constructor = obj.constructor;\n    var prototype = _constructor.prototype;\n\n    return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isFunction(fn) {\n  return typeOf(fn) === 'function';\n}\n\nfunction isArray(arr) {\n  return Array.isArray ? Array.isArray(arr) : typeOf(arr) === 'array';\n}\n\n\n\nfunction trim(str) {\n  if (typeof str === 'string') {\n    str = str.trim ? str.trim() : str.replace(REGEXP_TRIM, '$1');\n  }\n\n  return str;\n}\n\nfunction each(obj, callback) {\n  if (obj && isFunction(callback)) {\n    var i = void 0;\n\n    if (isArray(obj) || isNumber(obj.length) /* array-like */) {\n        var length = obj.length;\n\n        for (i = 0; i < length; i++) {\n          if (callback.call(obj, obj[i], i, obj) === false) {\n            break;\n          }\n        }\n      } else if (isObject(obj)) {\n      Object.keys(obj).forEach(function (key) {\n        callback.call(obj, obj[key], key, obj);\n      });\n    }\n  }\n\n  return obj;\n}\n\nfunction extend(obj) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (isObject(obj) && args.length > 0) {\n    if (Object.assign) {\n      return Object.assign.apply(Object, [obj].concat(args));\n    }\n\n    args.forEach(function (arg) {\n      if (isObject(arg)) {\n        Object.keys(arg).forEach(function (key) {\n          obj[key] = arg[key];\n        });\n      }\n    });\n  }\n\n  return obj;\n}\n\nfunction proxy(fn, context) {\n  for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    args[_key2 - 2] = arguments[_key2];\n  }\n\n  return function () {\n    for (var _len3 = arguments.length, args2 = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args2[_key3] = arguments[_key3];\n    }\n\n    return fn.apply(context, args.concat(args2));\n  };\n}\n\nfunction setStyle(element, styles) {\n  var style = element.style;\n\n  each(styles, function (value, property) {\n    if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n      value += 'px';\n    }\n\n    style[property] = value;\n  });\n}\n\nfunction hasClass(element, value) {\n  return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n}\n\nfunction addClass(element, value) {\n  if (!value) {\n    return;\n  }\n\n  if (isNumber(element.length)) {\n    each(element, function (elem) {\n      addClass(elem, value);\n    });\n    return;\n  }\n\n  if (element.classList) {\n    element.classList.add(value);\n    return;\n  }\n\n  var className = trim(element.className);\n\n  if (!className) {\n    element.className = value;\n  } else if (className.indexOf(value) < 0) {\n    element.className = className + ' ' + value;\n  }\n}\n\nfunction removeClass(element, value) {\n  if (!value) {\n    return;\n  }\n\n  if (isNumber(element.length)) {\n    each(element, function (elem) {\n      removeClass(elem, value);\n    });\n    return;\n  }\n\n  if (element.classList) {\n    element.classList.remove(value);\n    return;\n  }\n\n  if (element.className.indexOf(value) >= 0) {\n    element.className = element.className.replace(value, '');\n  }\n}\n\nfunction toggleClass(element, value, added) {\n  if (!value) {\n    return;\n  }\n\n  if (isNumber(element.length)) {\n    each(element, function (elem) {\n      toggleClass(elem, value, added);\n    });\n    return;\n  }\n\n  // IE10-11 doesn't support the second parameter of `classList.toggle`\n  if (added) {\n    addClass(element, value);\n  } else {\n    removeClass(element, value);\n  }\n}\n\nfunction hyphenate(str) {\n  return str.replace(REGEXP_HYPHENATE, '$1-$2').toLowerCase();\n}\n\nfunction getData$1(element, name) {\n  if (isObject(element[name])) {\n    return element[name];\n  } else if (element.dataset) {\n    return element.dataset[name];\n  }\n\n  return element.getAttribute('data-' + hyphenate(name));\n}\n\nfunction setData$1(element, name, data) {\n  if (isObject(data)) {\n    element[name] = data;\n  } else if (element.dataset) {\n    element.dataset[name] = data;\n  } else {\n    element.setAttribute('data-' + hyphenate(name), data);\n  }\n}\n\nfunction removeData(element, name) {\n  if (isObject(element[name])) {\n    delete element[name];\n  } else if (element.dataset) {\n    // #128 Safari not allows to delete dataset property\n    try {\n      delete element.dataset[name];\n    } catch (e) {\n      element.dataset[name] = null;\n    }\n  } else {\n    element.removeAttribute('data-' + hyphenate(name));\n  }\n}\n\nfunction removeListener(element, type, handler) {\n  var types = trim(type).split(REGEXP_SPACES);\n\n  if (types.length > 1) {\n    each(types, function (t) {\n      removeListener(element, t, handler);\n    });\n    return;\n  }\n\n  if (element.removeEventListener) {\n    element.removeEventListener(type, handler, false);\n  } else if (element.detachEvent) {\n    element.detachEvent('on' + type, handler);\n  }\n}\n\nfunction addListener(element, type, _handler, once) {\n  var types = trim(type).split(REGEXP_SPACES);\n  var originalHandler = _handler;\n\n  if (types.length > 1) {\n    each(types, function (t) {\n      addListener(element, t, _handler);\n    });\n    return;\n  }\n\n  if (once) {\n    _handler = function handler() {\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      removeListener(element, type, _handler);\n\n      return originalHandler.apply(element, args);\n    };\n  }\n\n  if (element.addEventListener) {\n    element.addEventListener(type, _handler, false);\n  } else if (element.attachEvent) {\n    element.attachEvent('on' + type, _handler);\n  }\n}\n\nfunction dispatchEvent(element, type, data) {\n  if (element.dispatchEvent) {\n    var event = void 0;\n\n    // Event and CustomEvent on IE9-11 are global objects, not constructors\n    if (isFunction(Event) && isFunction(CustomEvent)) {\n      if (isUndefined(data)) {\n        event = new Event(type, {\n          bubbles: true,\n          cancelable: true\n        });\n      } else {\n        event = new CustomEvent(type, {\n          detail: data,\n          bubbles: true,\n          cancelable: true\n        });\n      }\n    } else if (isUndefined(data)) {\n      event = document.createEvent('Event');\n      event.initEvent(type, true, true);\n    } else {\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent(type, true, true, data);\n    }\n\n    // IE9+\n    return element.dispatchEvent(event);\n  } else if (element.fireEvent) {\n    // IE6-10 (native events only)\n    return element.fireEvent('on' + type);\n  }\n\n  return true;\n}\n\nfunction getEvent(event) {\n  var e = event || window.event;\n\n  // Fix target property (IE8)\n  if (!e.target) {\n    e.target = e.srcElement || document;\n  }\n\n  if (!isNumber(e.pageX) && isNumber(e.clientX)) {\n    var eventDoc = event.target.ownerDocument || document;\n    var doc = eventDoc.documentElement;\n    var body = eventDoc.body;\n\n    e.pageX = e.clientX + ((doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0));\n    e.pageY = e.clientY + ((doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0));\n  }\n\n  return e;\n}\n\nfunction getOffset(element) {\n  var doc = document.documentElement;\n  var box = element.getBoundingClientRect();\n\n  return {\n    left: box.left + ((window.scrollX || doc && doc.scrollLeft || 0) - (doc && doc.clientLeft || 0)),\n    top: box.top + ((window.scrollY || doc && doc.scrollTop || 0) - (doc && doc.clientTop || 0))\n  };\n}\n\nfunction getByTag(element, tagName) {\n  return element.getElementsByTagName(tagName);\n}\n\nfunction getByClass(element, className) {\n  return element.getElementsByClassName ? element.getElementsByClassName(className) : element.querySelectorAll('.' + className);\n}\n\nfunction createElement(tagName) {\n  return document.createElement(tagName);\n}\n\nfunction appendChild(element, elem) {\n  element.appendChild(elem);\n}\n\nfunction removeChild(element) {\n  if (element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\nfunction empty(element) {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n\nfunction isCrossOriginURL(url) {\n  var parts = url.match(REGEXP_ORIGINS);\n\n  return parts && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n}\n\nfunction addTimestamp(url) {\n  var timestamp = 'timestamp=' + new Date().getTime();\n\n  return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n}\n\nfunction getImageSize(image, callback) {\n  // Modern browsers (ignore Safari)\n  if (image.naturalWidth && !IS_SAFARI_OR_UIWEBVIEW) {\n    callback(image.naturalWidth, image.naturalHeight);\n    return;\n  }\n\n  // IE8: Don't use `new Image()` here\n  var newImage = createElement('img');\n\n  newImage.onload = function load() {\n    callback(this.width, this.height);\n  };\n\n  newImage.src = image.src;\n}\n\nfunction getTransforms(data) {\n  var transforms = [];\n  var translateX = data.translateX;\n  var translateY = data.translateY;\n  var rotate = data.rotate;\n  var scaleX = data.scaleX;\n  var scaleY = data.scaleY;\n\n  if (isNumber(translateX) && translateX !== 0) {\n    transforms.push('translateX(' + translateX + 'px)');\n  }\n\n  if (isNumber(translateY) && translateY !== 0) {\n    transforms.push('translateY(' + translateY + 'px)');\n  }\n\n  // Rotate should come first before scale to match orientation transform\n  if (isNumber(rotate) && rotate !== 0) {\n    transforms.push('rotate(' + rotate + 'deg)');\n  }\n\n  if (isNumber(scaleX) && scaleX !== 1) {\n    transforms.push('scaleX(' + scaleX + ')');\n  }\n\n  if (isNumber(scaleY) && scaleY !== 1) {\n    transforms.push('scaleY(' + scaleY + ')');\n  }\n\n  var transform = transforms.length ? transforms.join(' ') : 'none';\n\n  return {\n    WebkitTransform: transform,\n    msTransform: transform,\n    transform: transform\n  };\n}\n\nfunction getRotatedSizes(data, reversed) {\n  var deg = Math.abs(data.degree) % 180;\n  var arc = (deg > 90 ? 180 - deg : deg) * Math.PI / 180;\n  var sinArc = Math.sin(arc);\n  var cosArc = Math.cos(arc);\n  var width = data.width;\n  var height = data.height;\n  var aspectRatio = data.aspectRatio;\n  var newWidth = void 0;\n  var newHeight = void 0;\n\n  if (!reversed) {\n    newWidth = width * cosArc + height * sinArc;\n    newHeight = width * sinArc + height * cosArc;\n  } else {\n    newWidth = width / (cosArc + sinArc / aspectRatio);\n    newHeight = newWidth / aspectRatio;\n  }\n\n  return {\n    width: newWidth,\n    height: newHeight\n  };\n}\n\nfunction getSourceCanvas(image, data) {\n  var canvas = createElement('canvas');\n  var context = canvas.getContext('2d');\n  var dstX = 0;\n  var dstY = 0;\n  var dstWidth = data.naturalWidth;\n  var dstHeight = data.naturalHeight;\n  var rotate = data.rotate;\n  var scaleX = data.scaleX;\n  var scaleY = data.scaleY;\n  var scalable = isNumber(scaleX) && isNumber(scaleY) && (scaleX !== 1 || scaleY !== 1);\n  var rotatable = isNumber(rotate) && rotate !== 0;\n  var advanced = rotatable || scalable;\n  var canvasWidth = dstWidth * Math.abs(scaleX || 1);\n  var canvasHeight = dstHeight * Math.abs(scaleY || 1);\n  var translateX = void 0;\n  var translateY = void 0;\n  var rotated = void 0;\n\n  if (scalable) {\n    translateX = canvasWidth / 2;\n    translateY = canvasHeight / 2;\n  }\n\n  if (rotatable) {\n    rotated = getRotatedSizes({\n      width: canvasWidth,\n      height: canvasHeight,\n      degree: rotate\n    });\n\n    canvasWidth = rotated.width;\n    canvasHeight = rotated.height;\n    translateX = canvasWidth / 2;\n    translateY = canvasHeight / 2;\n  }\n\n  canvas.width = canvasWidth;\n  canvas.height = canvasHeight;\n\n  if (advanced) {\n    dstX = -dstWidth / 2;\n    dstY = -dstHeight / 2;\n\n    context.save();\n    context.translate(translateX, translateY);\n  }\n\n  // Rotate should come first before scale as in the \"getTransform\" function\n  if (rotatable) {\n    context.rotate(rotate * Math.PI / 180);\n  }\n\n  if (scalable) {\n    context.scale(scaleX, scaleY);\n  }\n\n  context.drawImage(image, Math.floor(dstX), Math.floor(dstY), Math.floor(dstWidth), Math.floor(dstHeight));\n\n  if (advanced) {\n    context.restore();\n  }\n\n  return canvas;\n}\n\nfunction getStringFromCharCode(dataView, start, length) {\n  var str = '';\n  var i = start;\n\n  for (length += start; i < length; i++) {\n    str += fromCharCode(dataView.getUint8(i));\n  }\n\n  return str;\n}\n\nfunction getOrientation(arrayBuffer) {\n  var dataView = new DataView(arrayBuffer);\n  var length = dataView.byteLength;\n  var orientation = void 0;\n  var exifIDCode = void 0;\n  var tiffOffset = void 0;\n  var firstIFDOffset = void 0;\n  var littleEndian = void 0;\n  var endianness = void 0;\n  var app1Start = void 0;\n  var ifdStart = void 0;\n  var offset = void 0;\n  var i = void 0;\n\n  // Only handle JPEG image (start by 0xFFD8)\n  if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n    offset = 2;\n\n    while (offset < length) {\n      if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n        app1Start = offset;\n        break;\n      }\n\n      offset++;\n    }\n  }\n\n  if (app1Start) {\n    exifIDCode = app1Start + 4;\n    tiffOffset = app1Start + 10;\n\n    if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n      endianness = dataView.getUint16(tiffOffset);\n      littleEndian = endianness === 0x4949;\n\n      if (littleEndian || endianness === 0x4D4D /* bigEndian */) {\n          if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n            firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n            if (firstIFDOffset >= 0x00000008) {\n              ifdStart = tiffOffset + firstIFDOffset;\n            }\n          }\n        }\n    }\n  }\n\n  if (ifdStart) {\n    length = dataView.getUint16(ifdStart, littleEndian);\n\n    for (i = 0; i < length; i++) {\n      offset = ifdStart + i * 12 + 2;\n\n      if (dataView.getUint16(offset, littleEndian) === 0x0112 /* Orientation */) {\n          // 8 is the offset of the current tag's value\n          offset += 8;\n\n          // Get the original orientation value\n          orientation = dataView.getUint16(offset, littleEndian);\n\n          // Override the orientation with its default value for Safari\n          if (IS_SAFARI_OR_UIWEBVIEW) {\n            dataView.setUint16(offset, 1, littleEndian);\n          }\n\n          break;\n        }\n    }\n  }\n\n  return orientation;\n}\n\nfunction dataURLToArrayBuffer(dataURL) {\n  var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n  var binary = atob(base64);\n  var length = binary.length;\n  var arrayBuffer = new ArrayBuffer(length);\n  var dataView = new Uint8Array(arrayBuffer);\n  var i = void 0;\n\n  for (i = 0; i < length; i++) {\n    dataView[i] = binary.charCodeAt(i);\n  }\n\n  return arrayBuffer;\n}\n\n// Only available for JPEG image\nfunction arrayBufferToDataURL(arrayBuffer) {\n  var dataView = new Uint8Array(arrayBuffer);\n  var length = dataView.length;\n  var base64 = '';\n  var i = void 0;\n\n  for (i = 0; i < length; i++) {\n    base64 += fromCharCode(dataView[i]);\n  }\n\n  return 'data:image/jpeg;base64,' + btoa(base64);\n}\n\nvar render$1 = {\n  render: function render() {\n    var self = this;\n\n    self.initContainer();\n    self.initCanvas();\n    self.initCropBox();\n\n    self.renderCanvas();\n\n    if (self.cropped) {\n      self.renderCropBox();\n    }\n  },\n  initContainer: function initContainer() {\n    var self = this;\n    var options = self.options;\n    var element = self.element;\n    var container = self.container;\n    var cropper = self.cropper;\n    var hidden = 'cropper-hidden';\n    var containerData = void 0;\n\n    addClass(cropper, hidden);\n    removeClass(element, hidden);\n\n    self.containerData = containerData = {\n      width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),\n      height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)\n    };\n\n    setStyle(cropper, {\n      width: containerData.width,\n      height: containerData.height\n    });\n\n    addClass(element, hidden);\n    removeClass(cropper, hidden);\n  },\n\n\n  // Canvas (image wrapper)\n  initCanvas: function initCanvas() {\n    var self = this;\n    var viewMode = self.options.viewMode;\n    var containerData = self.containerData;\n    var imageData = self.imageData;\n    var rotated = Math.abs(imageData.rotate) % 180 === 90;\n    var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n    var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n    var aspectRatio = naturalWidth / naturalHeight;\n    var canvasWidth = containerData.width;\n    var canvasHeight = containerData.height;\n\n    if (containerData.height * aspectRatio > containerData.width) {\n      if (viewMode === 3) {\n        canvasWidth = containerData.height * aspectRatio;\n      } else {\n        canvasHeight = containerData.width / aspectRatio;\n      }\n    } else if (viewMode === 3) {\n      canvasHeight = containerData.width / aspectRatio;\n    } else {\n      canvasWidth = containerData.height * aspectRatio;\n    }\n\n    var canvasData = {\n      naturalWidth: naturalWidth,\n      naturalHeight: naturalHeight,\n      aspectRatio: aspectRatio,\n      width: canvasWidth,\n      height: canvasHeight\n    };\n\n    canvasData.oldLeft = canvasData.left = (containerData.width - canvasWidth) / 2;\n    canvasData.oldTop = canvasData.top = (containerData.height - canvasHeight) / 2;\n\n    self.canvasData = canvasData;\n    self.limited = viewMode === 1 || viewMode === 2;\n    self.limitCanvas(true, true);\n    self.initialImageData = extend({}, imageData);\n    self.initialCanvasData = extend({}, canvasData);\n  },\n  limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\n    var self = this;\n    var options = self.options;\n    var viewMode = options.viewMode;\n    var containerData = self.containerData;\n    var canvasData = self.canvasData;\n    var aspectRatio = canvasData.aspectRatio;\n    var cropBoxData = self.cropBoxData;\n    var cropped = self.cropped && cropBoxData;\n\n    if (sizeLimited) {\n      var minCanvasWidth = Number(options.minCanvasWidth) || 0;\n      var minCanvasHeight = Number(options.minCanvasHeight) || 0;\n\n      if (viewMode > 1) {\n        minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n        minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n\n        if (viewMode === 3) {\n          if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n            minCanvasWidth = minCanvasHeight * aspectRatio;\n          } else {\n            minCanvasHeight = minCanvasWidth / aspectRatio;\n          }\n        }\n      } else if (viewMode > 0) {\n        if (minCanvasWidth) {\n          minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n        } else if (minCanvasHeight) {\n          minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n        } else if (cropped) {\n          minCanvasWidth = cropBoxData.width;\n          minCanvasHeight = cropBoxData.height;\n\n          if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n            minCanvasWidth = minCanvasHeight * aspectRatio;\n          } else {\n            minCanvasHeight = minCanvasWidth / aspectRatio;\n          }\n        }\n      }\n\n      if (minCanvasWidth && minCanvasHeight) {\n        if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n          minCanvasHeight = minCanvasWidth / aspectRatio;\n        } else {\n          minCanvasWidth = minCanvasHeight * aspectRatio;\n        }\n      } else if (minCanvasWidth) {\n        minCanvasHeight = minCanvasWidth / aspectRatio;\n      } else if (minCanvasHeight) {\n        minCanvasWidth = minCanvasHeight * aspectRatio;\n      }\n\n      canvasData.minWidth = minCanvasWidth;\n      canvasData.minHeight = minCanvasHeight;\n      canvasData.maxWidth = Infinity;\n      canvasData.maxHeight = Infinity;\n    }\n\n    if (positionLimited) {\n      if (viewMode) {\n        var newCanvasLeft = containerData.width - canvasData.width;\n        var newCanvasTop = containerData.height - canvasData.height;\n\n        canvasData.minLeft = Math.min(0, newCanvasLeft);\n        canvasData.minTop = Math.min(0, newCanvasTop);\n        canvasData.maxLeft = Math.max(0, newCanvasLeft);\n        canvasData.maxTop = Math.max(0, newCanvasTop);\n\n        if (cropped && self.limited) {\n          canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n          canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n          canvasData.maxLeft = cropBoxData.left;\n          canvasData.maxTop = cropBoxData.top;\n\n          if (viewMode === 2) {\n            if (canvasData.width >= containerData.width) {\n              canvasData.minLeft = Math.min(0, newCanvasLeft);\n              canvasData.maxLeft = Math.max(0, newCanvasLeft);\n            }\n\n            if (canvasData.height >= containerData.height) {\n              canvasData.minTop = Math.min(0, newCanvasTop);\n              canvasData.maxTop = Math.max(0, newCanvasTop);\n            }\n          }\n        }\n      } else {\n        canvasData.minLeft = -canvasData.width;\n        canvasData.minTop = -canvasData.height;\n        canvasData.maxLeft = containerData.width;\n        canvasData.maxTop = containerData.height;\n      }\n    }\n  },\n  renderCanvas: function renderCanvas(changed) {\n    var self = this;\n    var canvasData = self.canvasData;\n    var imageData = self.imageData;\n    var rotate = imageData.rotate;\n\n    if (self.rotated) {\n      self.rotated = false;\n\n      // Computes rotated sizes with image sizes\n      var rotatedData = getRotatedSizes({\n        width: imageData.width,\n        height: imageData.height,\n        degree: rotate\n      });\n      var aspectRatio = rotatedData.width / rotatedData.height;\n      var isSquareImage = imageData.aspectRatio === 1;\n\n      if (isSquareImage || aspectRatio !== canvasData.aspectRatio) {\n        canvasData.left -= (rotatedData.width - canvasData.width) / 2;\n        canvasData.top -= (rotatedData.height - canvasData.height) / 2;\n        canvasData.width = rotatedData.width;\n        canvasData.height = rotatedData.height;\n        canvasData.aspectRatio = aspectRatio;\n        canvasData.naturalWidth = imageData.naturalWidth;\n        canvasData.naturalHeight = imageData.naturalHeight;\n\n        // Computes rotated sizes with natural image sizes\n        if (isSquareImage && rotate % 90 || rotate % 180) {\n          var rotatedData2 = getRotatedSizes({\n            width: imageData.naturalWidth,\n            height: imageData.naturalHeight,\n            degree: rotate\n          });\n\n          canvasData.naturalWidth = rotatedData2.width;\n          canvasData.naturalHeight = rotatedData2.height;\n        }\n\n        self.limitCanvas(true, false);\n      }\n    }\n\n    if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n      canvasData.left = canvasData.oldLeft;\n    }\n\n    if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n      canvasData.top = canvasData.oldTop;\n    }\n\n    canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n    canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n\n    self.limitCanvas(false, true);\n\n    canvasData.oldLeft = canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n    canvasData.oldTop = canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n\n    setStyle(self.canvas, extend({\n      width: canvasData.width,\n      height: canvasData.height\n    }, getTransforms({\n      translateX: canvasData.left,\n      translateY: canvasData.top\n    })));\n\n    self.renderImage();\n\n    if (self.cropped && self.limited) {\n      self.limitCropBox(true, true);\n    }\n\n    if (changed) {\n      self.output();\n    }\n  },\n  renderImage: function renderImage(changed) {\n    var self = this;\n    var canvasData = self.canvasData;\n    var imageData = self.imageData;\n    var newImageData = void 0;\n    var reversedData = void 0;\n    var reversedWidth = void 0;\n    var reversedHeight = void 0;\n\n    if (imageData.rotate) {\n      reversedData = getRotatedSizes({\n        width: canvasData.width,\n        height: canvasData.height,\n        degree: imageData.rotate,\n        aspectRatio: imageData.aspectRatio\n      }, true);\n\n      reversedWidth = reversedData.width;\n      reversedHeight = reversedData.height;\n\n      newImageData = {\n        width: reversedWidth,\n        height: reversedHeight,\n        left: (canvasData.width - reversedWidth) / 2,\n        top: (canvasData.height - reversedHeight) / 2\n      };\n    }\n\n    extend(imageData, newImageData || {\n      width: canvasData.width,\n      height: canvasData.height,\n      left: 0,\n      top: 0\n    });\n\n    setStyle(self.image, extend({\n      width: imageData.width,\n      height: imageData.height\n    }, getTransforms(extend({\n      translateX: imageData.left,\n      translateY: imageData.top\n    }, imageData))));\n\n    if (changed) {\n      self.output();\n    }\n  },\n  initCropBox: function initCropBox() {\n    var self = this;\n    var options = self.options;\n    var aspectRatio = options.aspectRatio;\n    var autoCropArea = Number(options.autoCropArea) || 0.8;\n    var canvasData = self.canvasData;\n    var cropBoxData = {\n      width: canvasData.width,\n      height: canvasData.height\n    };\n\n    if (aspectRatio) {\n      if (canvasData.height * aspectRatio > canvasData.width) {\n        cropBoxData.height = cropBoxData.width / aspectRatio;\n      } else {\n        cropBoxData.width = cropBoxData.height * aspectRatio;\n      }\n    }\n\n    self.cropBoxData = cropBoxData;\n    self.limitCropBox(true, true);\n\n    // Initialize auto crop area\n    cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n    cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n\n    // The width/height of auto crop area must large than \"minWidth/Height\"\n    cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n    cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n    cropBoxData.oldLeft = cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n    cropBoxData.oldTop = cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n\n    self.initialCropBoxData = extend({}, cropBoxData);\n  },\n  limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\n    var self = this;\n    var options = self.options;\n    var aspectRatio = options.aspectRatio;\n    var containerData = self.containerData;\n    var canvasData = self.canvasData;\n    var cropBoxData = self.cropBoxData;\n    var limited = self.limited;\n\n    if (sizeLimited) {\n      var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n      var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n      var maxCropBoxWidth = Math.min(containerData.width, limited ? canvasData.width : containerData.width);\n      var maxCropBoxHeight = Math.min(containerData.height, limited ? canvasData.height : containerData.height);\n\n      // The min/maxCropBoxWidth/Height must be less than containerWidth/Height\n      minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n      minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n\n      if (aspectRatio) {\n        if (minCropBoxWidth && minCropBoxHeight) {\n          if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n        } else if (minCropBoxWidth) {\n          minCropBoxHeight = minCropBoxWidth / aspectRatio;\n        } else if (minCropBoxHeight) {\n          minCropBoxWidth = minCropBoxHeight * aspectRatio;\n        }\n\n        if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n          maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n        } else {\n          maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n        }\n      }\n\n      // The minWidth/Height must be less than maxWidth/Height\n      cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n      cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n      cropBoxData.maxWidth = maxCropBoxWidth;\n      cropBoxData.maxHeight = maxCropBoxHeight;\n    }\n\n    if (positionLimited) {\n      if (limited) {\n        cropBoxData.minLeft = Math.max(0, canvasData.left);\n        cropBoxData.minTop = Math.max(0, canvasData.top);\n        cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n        cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n      } else {\n        cropBoxData.minLeft = 0;\n        cropBoxData.minTop = 0;\n        cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n        cropBoxData.maxTop = containerData.height - cropBoxData.height;\n      }\n    }\n  },\n  renderCropBox: function renderCropBox() {\n    var self = this;\n    var options = self.options;\n    var containerData = self.containerData;\n    var cropBoxData = self.cropBoxData;\n\n    if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n      cropBoxData.left = cropBoxData.oldLeft;\n    }\n\n    if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n      cropBoxData.top = cropBoxData.oldTop;\n    }\n\n    cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n    cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n\n    self.limitCropBox(false, true);\n\n    cropBoxData.oldLeft = cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n    cropBoxData.oldTop = cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n\n    if (options.movable && options.cropBoxMovable) {\n      // Turn to move the canvas when the crop box is equal to the container\n      setData$1(self.face, 'action', cropBoxData.width === containerData.width && cropBoxData.height === containerData.height ? 'move' : 'all');\n    }\n\n    setStyle(self.cropBox, extend({\n      width: cropBoxData.width,\n      height: cropBoxData.height\n    }, getTransforms({\n      translateX: cropBoxData.left,\n      translateY: cropBoxData.top\n    })));\n\n    if (self.cropped && self.limited) {\n      self.limitCanvas(true, true);\n    }\n\n    if (!self.disabled) {\n      self.output();\n    }\n  },\n  output: function output() {\n    var self = this;\n\n    self.preview();\n\n    if (self.complete) {\n      dispatchEvent(self.element, 'crop', self.getData());\n    }\n  }\n};\n\nvar DATA_PREVIEW = 'preview';\n\nvar preview$1 = {\n  initPreview: function initPreview() {\n    var self = this;\n    var preview = self.options.preview;\n    var image = createElement('img');\n    var crossOrigin = self.crossOrigin;\n    var url = crossOrigin ? self.crossOriginUrl : self.url;\n\n    if (crossOrigin) {\n      image.crossOrigin = crossOrigin;\n    }\n\n    image.src = url;\n    appendChild(self.viewBox, image);\n    self.image2 = image;\n\n    if (!preview) {\n      return;\n    }\n\n    var previews = preview.querySelector ? [preview] : document.querySelectorAll(preview);\n\n    self.previews = previews;\n\n    each(previews, function (element) {\n      var img = createElement('img');\n\n      // Save the original size for recover\n      setData$1(element, DATA_PREVIEW, {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        html: element.innerHTML\n      });\n\n      if (crossOrigin) {\n        img.crossOrigin = crossOrigin;\n      }\n\n      img.src = url;\n\n      /**\n       * Override img element styles\n       * Add `display:block` to avoid margin top issue\n       * Add `height:auto` to override `height` attribute on IE8\n       * (Occur only when margin-top <= -height)\n       */\n\n      img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n\n      empty(element);\n      appendChild(element, img);\n    });\n  },\n  resetPreview: function resetPreview() {\n    each(this.previews, function (element) {\n      var data = getData$1(element, DATA_PREVIEW);\n\n      setStyle(element, {\n        width: data.width,\n        height: data.height\n      });\n\n      element.innerHTML = data.html;\n      removeData(element, DATA_PREVIEW);\n    });\n  },\n  preview: function preview() {\n    var self = this;\n    var imageData = self.imageData;\n    var canvasData = self.canvasData;\n    var cropBoxData = self.cropBoxData;\n    var cropBoxWidth = cropBoxData.width;\n    var cropBoxHeight = cropBoxData.height;\n    var width = imageData.width;\n    var height = imageData.height;\n    var left = cropBoxData.left - canvasData.left - imageData.left;\n    var top = cropBoxData.top - canvasData.top - imageData.top;\n\n    if (!self.cropped || self.disabled) {\n      return;\n    }\n\n    setStyle(self.image2, extend({\n      width: width,\n      height: height\n    }, getTransforms(extend({\n      translateX: -left,\n      translateY: -top\n    }, imageData))));\n\n    each(self.previews, function (element) {\n      var data = getData$1(element, DATA_PREVIEW);\n      var originalWidth = data.width;\n      var originalHeight = data.height;\n      var newWidth = originalWidth;\n      var newHeight = originalHeight;\n      var ratio = 1;\n\n      if (cropBoxWidth) {\n        ratio = originalWidth / cropBoxWidth;\n        newHeight = cropBoxHeight * ratio;\n      }\n\n      if (cropBoxHeight && newHeight > originalHeight) {\n        ratio = originalHeight / cropBoxHeight;\n        newWidth = cropBoxWidth * ratio;\n        newHeight = originalHeight;\n      }\n\n      setStyle(element, {\n        width: newWidth,\n        height: newHeight\n      });\n\n      setStyle(getByTag(element, 'img')[0], extend({\n        width: width * ratio,\n        height: height * ratio\n      }, getTransforms(extend({\n        translateX: -left * ratio,\n        translateY: -top * ratio\n      }, imageData))));\n    });\n  }\n};\n\n// Globals\nvar PointerEvent = typeof window !== 'undefined' ? window.PointerEvent : null;\n\n// Events\nvar EVENT_POINTER_DOWN = PointerEvent ? 'pointerdown' : 'touchstart mousedown';\nvar EVENT_POINTER_MOVE = PointerEvent ? 'pointermove' : 'touchmove mousemove';\nvar EVENT_POINTER_UP = PointerEvent ? ' pointerup pointercancel' : 'touchend touchcancel mouseup';\nvar EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';\nvar EVENT_DBLCLICK = 'dblclick';\nvar EVENT_RESIZE = 'resize';\nvar EVENT_CROP_START = 'cropstart';\nvar EVENT_CROP_MOVE = 'cropmove';\nvar EVENT_CROP_END = 'cropend';\nvar EVENT_CROP$1 = 'crop';\nvar EVENT_ZOOM = 'zoom';\n\nvar events = {\n  bind: function bind() {\n    var self = this;\n    var options = self.options;\n    var element = self.element;\n    var cropper = self.cropper;\n\n    if (isFunction(options.cropstart)) {\n      addListener(element, EVENT_CROP_START, options.cropstart);\n    }\n\n    if (isFunction(options.cropmove)) {\n      addListener(element, EVENT_CROP_MOVE, options.cropmove);\n    }\n\n    if (isFunction(options.cropend)) {\n      addListener(element, EVENT_CROP_END, options.cropend);\n    }\n\n    if (isFunction(options.crop)) {\n      addListener(element, EVENT_CROP$1, options.crop);\n    }\n\n    if (isFunction(options.zoom)) {\n      addListener(element, EVENT_ZOOM, options.zoom);\n    }\n\n    addListener(cropper, EVENT_POINTER_DOWN, self.onCropStart = proxy(self.cropStart, self));\n\n    if (options.zoomable && options.zoomOnWheel) {\n      addListener(cropper, EVENT_WHEEL, self.onWheel = proxy(self.wheel, self));\n    }\n\n    if (options.toggleDragModeOnDblclick) {\n      addListener(cropper, EVENT_DBLCLICK, self.onDblclick = proxy(self.dblclick, self));\n    }\n\n    addListener(document, EVENT_POINTER_MOVE, self.onCropMove = proxy(self.cropMove, self));\n    addListener(document, EVENT_POINTER_UP, self.onCropEnd = proxy(self.cropEnd, self));\n\n    if (options.responsive) {\n      addListener(window, EVENT_RESIZE, self.onResize = proxy(self.resize, self));\n    }\n  },\n  unbind: function unbind() {\n    var self = this;\n    var options = self.options;\n    var element = self.element;\n    var cropper = self.cropper;\n\n    if (isFunction(options.cropstart)) {\n      removeListener(element, EVENT_CROP_START, options.cropstart);\n    }\n\n    if (isFunction(options.cropmove)) {\n      removeListener(element, EVENT_CROP_MOVE, options.cropmove);\n    }\n\n    if (isFunction(options.cropend)) {\n      removeListener(element, EVENT_CROP_END, options.cropend);\n    }\n\n    if (isFunction(options.crop)) {\n      removeListener(element, EVENT_CROP$1, options.crop);\n    }\n\n    if (isFunction(options.zoom)) {\n      removeListener(element, EVENT_ZOOM, options.zoom);\n    }\n\n    removeListener(cropper, EVENT_POINTER_DOWN, self.onCropStart);\n\n    if (options.zoomable && options.zoomOnWheel) {\n      removeListener(cropper, EVENT_WHEEL, self.onWheel);\n    }\n\n    if (options.toggleDragModeOnDblclick) {\n      removeListener(cropper, EVENT_DBLCLICK, self.onDblclick);\n    }\n\n    removeListener(document, EVENT_POINTER_MOVE, self.onCropMove);\n    removeListener(document, EVENT_POINTER_UP, self.onCropEnd);\n\n    if (options.responsive) {\n      removeListener(window, EVENT_RESIZE, self.onResize);\n    }\n  }\n};\n\nvar REGEXP_ACTIONS = /^(e|w|s|n|se|sw|ne|nw|all|crop|move|zoom)$/;\n\nfunction getPointer(_ref, endOnly) {\n  var pageX = _ref.pageX,\n      pageY = _ref.pageY;\n\n  var end = {\n    endX: pageX,\n    endY: pageY\n  };\n\n  if (endOnly) {\n    return end;\n  }\n\n  return extend({\n    startX: pageX,\n    startY: pageY\n  }, end);\n}\n\nvar handlers = {\n  resize: function resize() {\n    var self = this;\n    var options = self.options;\n    var container = self.container;\n    var containerData = self.containerData;\n    var minContainerWidth = Number(options.minContainerWidth) || 200;\n    var minContainerHeight = Number(options.minContainerHeight) || 100;\n\n    if (self.disabled || containerData.width === minContainerWidth || containerData.height === minContainerHeight) {\n      return;\n    }\n\n    var ratio = container.offsetWidth / containerData.width;\n\n    // Resize when width changed or height changed\n    if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n      (function () {\n        var canvasData = void 0;\n        var cropBoxData = void 0;\n\n        if (options.restore) {\n          canvasData = self.getCanvasData();\n          cropBoxData = self.getCropBoxData();\n        }\n\n        self.render();\n\n        if (options.restore) {\n          self.setCanvasData(each(canvasData, function (n, i) {\n            canvasData[i] = n * ratio;\n          }));\n          self.setCropBoxData(each(cropBoxData, function (n, i) {\n            cropBoxData[i] = n * ratio;\n          }));\n        }\n      })();\n    }\n  },\n  dblclick: function dblclick() {\n    var self = this;\n\n    if (self.disabled || self.options.dragMode === 'none') {\n      return;\n    }\n\n    self.setDragMode(hasClass(self.dragBox, 'cropper-crop') ? 'move' : 'crop');\n  },\n  wheel: function wheel(event) {\n    var self = this;\n    var e = getEvent(event);\n    var ratio = Number(self.options.wheelZoomRatio) || 0.1;\n    var delta = 1;\n\n    if (self.disabled) {\n      return;\n    }\n\n    e.preventDefault();\n\n    // Limit wheel speed to prevent zoom too fast (#21)\n    if (self.wheeling) {\n      return;\n    }\n\n    self.wheeling = true;\n\n    setTimeout(function () {\n      self.wheeling = false;\n    }, 50);\n\n    if (e.deltaY) {\n      delta = e.deltaY > 0 ? 1 : -1;\n    } else if (e.wheelDelta) {\n      delta = -e.wheelDelta / 120;\n    } else if (e.detail) {\n      delta = e.detail > 0 ? 1 : -1;\n    }\n\n    self.zoom(-delta * ratio, e);\n  },\n  cropStart: function cropStart(event) {\n    var self = this;\n\n    if (self.disabled) {\n      return;\n    }\n\n    var options = self.options;\n    var pointers = self.pointers;\n    var e = getEvent(event);\n    var action = void 0;\n\n    if (e.changedTouches) {\n      // Handle touch event\n      each(e.changedTouches, function (touch) {\n        pointers[touch.identifier] = getPointer(touch);\n      });\n    } else {\n      // Handle mouse event and pointer event\n      pointers[e.pointerId || 0] = getPointer(e);\n    }\n\n    if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n      action = 'zoom';\n    } else {\n      action = getData$1(e.target, 'action');\n    }\n\n    if (!REGEXP_ACTIONS.test(action)) {\n      return;\n    }\n\n    if (dispatchEvent(self.element, 'cropstart', {\n      originalEvent: e,\n      action: action\n    }) === false) {\n      return;\n    }\n\n    e.preventDefault();\n\n    self.action = action;\n    self.cropping = false;\n\n    if (action === 'crop') {\n      self.cropping = true;\n      addClass(self.dragBox, 'cropper-modal');\n    }\n  },\n  cropMove: function cropMove(event) {\n    var self = this;\n    var action = self.action;\n\n    if (self.disabled || !action) {\n      return;\n    }\n\n    var pointers = self.pointers;\n    var e = getEvent(event);\n\n    e.preventDefault();\n\n    if (dispatchEvent(self.element, 'cropmove', {\n      originalEvent: e,\n      action: action\n    }) === false) {\n      return;\n    }\n\n    if (e.changedTouches) {\n      each(e.changedTouches, function (touch) {\n        extend(pointers[touch.identifier], getPointer(touch, true));\n      });\n    } else {\n      extend(pointers[e.pointerId || 0], getPointer(e, true));\n    }\n\n    self.change(e);\n  },\n  cropEnd: function cropEnd(event) {\n    var self = this;\n\n    if (self.disabled) {\n      return;\n    }\n\n    var action = self.action;\n    var pointers = self.pointers;\n    var e = getEvent(event);\n\n    if (e.changedTouches) {\n      each(e.changedTouches, function (touch) {\n        delete pointers[touch.identifier];\n      });\n    } else {\n      delete pointers[e.pointerId || 0];\n    }\n\n    if (!action) {\n      return;\n    }\n\n    e.preventDefault();\n\n    if (!Object.keys(pointers).length) {\n      self.action = '';\n    }\n\n    if (self.cropping) {\n      self.cropping = false;\n      toggleClass(self.dragBox, 'cropper-modal', self.cropped && this.options.modal);\n    }\n\n    dispatchEvent(self.element, 'cropend', {\n      originalEvent: e,\n      action: action\n    });\n  }\n};\n\n// Actions\nvar ACTION_EAST = 'e';\nvar ACTION_WEST = 'w';\nvar ACTION_SOUTH = 's';\nvar ACTION_NORTH = 'n';\nvar ACTION_SOUTH_EAST = 'se';\nvar ACTION_SOUTH_WEST = 'sw';\nvar ACTION_NORTH_EAST = 'ne';\nvar ACTION_NORTH_WEST = 'nw';\n\nfunction getMaxZoomRatio(pointers) {\n  var pointers2 = extend({}, pointers);\n  var ratios = [];\n\n  each(pointers, function (pointer, pointerId) {\n    delete pointers2[pointerId];\n\n    each(pointers2, function (pointer2) {\n      var x1 = Math.abs(pointer.startX - pointer2.startX);\n      var y1 = Math.abs(pointer.startY - pointer2.startY);\n      var x2 = Math.abs(pointer.endX - pointer2.endX);\n      var y2 = Math.abs(pointer.endY - pointer2.endY);\n      var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n      var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n      var ratio = (z2 - z1) / z1;\n\n      ratios.push(ratio);\n    });\n  });\n\n  ratios.sort(function (a, b) {\n    return Math.abs(a) < Math.abs(b);\n  });\n\n  return ratios[0];\n}\n\nvar change$1 = {\n  change: function change(e) {\n    var self = this;\n    var options = self.options;\n    var containerData = self.containerData;\n    var canvasData = self.canvasData;\n    var cropBoxData = self.cropBoxData;\n    var aspectRatio = options.aspectRatio;\n    var action = self.action;\n    var width = cropBoxData.width;\n    var height = cropBoxData.height;\n    var left = cropBoxData.left;\n    var top = cropBoxData.top;\n    var right = left + width;\n    var bottom = top + height;\n    var minLeft = 0;\n    var minTop = 0;\n    var maxWidth = containerData.width;\n    var maxHeight = containerData.height;\n    var renderable = true;\n    var offset = void 0;\n\n    // Locking aspect ratio in \"free mode\" by holding shift key\n    if (!aspectRatio && e.shiftKey) {\n      aspectRatio = width && height ? width / height : 1;\n    }\n\n    if (self.limited) {\n      minLeft = cropBoxData.minLeft;\n      minTop = cropBoxData.minTop;\n      maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n      maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n    }\n\n    var pointers = self.pointers;\n    var pointer = pointers[Object.keys(pointers)[0]];\n    var range = {\n      x: pointer.endX - pointer.startX,\n      y: pointer.endY - pointer.startY\n    };\n\n    if (aspectRatio) {\n      range.X = range.y * aspectRatio;\n      range.Y = range.x / aspectRatio;\n    }\n\n    switch (action) {\n      // Move crop box\n      case 'all':\n        left += range.x;\n        top += range.y;\n        break;\n\n      // Resize crop box\n      case ACTION_EAST:\n        if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n          renderable = false;\n          break;\n        }\n\n        width += range.x;\n\n        if (aspectRatio) {\n          height = width / aspectRatio;\n          top -= range.Y / 2;\n        }\n\n        if (width < 0) {\n          action = ACTION_WEST;\n          width = 0;\n        }\n\n        break;\n\n      case ACTION_NORTH:\n        if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n          renderable = false;\n          break;\n        }\n\n        height -= range.y;\n        top += range.y;\n\n        if (aspectRatio) {\n          width = height * aspectRatio;\n          left += range.X / 2;\n        }\n\n        if (height < 0) {\n          action = ACTION_SOUTH;\n          height = 0;\n        }\n\n        break;\n\n      case ACTION_WEST:\n        if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n          renderable = false;\n          break;\n        }\n\n        width -= range.x;\n        left += range.x;\n\n        if (aspectRatio) {\n          height = width / aspectRatio;\n          top += range.Y / 2;\n        }\n\n        if (width < 0) {\n          action = ACTION_EAST;\n          width = 0;\n        }\n\n        break;\n\n      case ACTION_SOUTH:\n        if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n          renderable = false;\n          break;\n        }\n\n        height += range.y;\n\n        if (aspectRatio) {\n          width = height * aspectRatio;\n          left -= range.X / 2;\n        }\n\n        if (height < 0) {\n          action = ACTION_NORTH;\n          height = 0;\n        }\n\n        break;\n\n      case ACTION_NORTH_EAST:\n        if (aspectRatio) {\n          if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n            renderable = false;\n            break;\n          }\n\n          height -= range.y;\n          top += range.y;\n          width = height * aspectRatio;\n        } else {\n          if (range.x >= 0) {\n            if (right < maxWidth) {\n              width += range.x;\n            } else if (range.y <= 0 && top <= minTop) {\n              renderable = false;\n            }\n          } else {\n            width += range.x;\n          }\n\n          if (range.y <= 0) {\n            if (top > minTop) {\n              height -= range.y;\n              top += range.y;\n            }\n          } else {\n            height -= range.y;\n            top += range.y;\n          }\n        }\n\n        if (width < 0 && height < 0) {\n          action = ACTION_SOUTH_WEST;\n          height = 0;\n          width = 0;\n        } else if (width < 0) {\n          action = ACTION_NORTH_WEST;\n          width = 0;\n        } else if (height < 0) {\n          action = ACTION_SOUTH_EAST;\n          height = 0;\n        }\n\n        break;\n\n      case ACTION_NORTH_WEST:\n        if (aspectRatio) {\n          if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n            renderable = false;\n            break;\n          }\n\n          height -= range.y;\n          top += range.y;\n          width = height * aspectRatio;\n          left += range.X;\n        } else {\n          if (range.x <= 0) {\n            if (left > minLeft) {\n              width -= range.x;\n              left += range.x;\n            } else if (range.y <= 0 && top <= minTop) {\n              renderable = false;\n            }\n          } else {\n            width -= range.x;\n            left += range.x;\n          }\n\n          if (range.y <= 0) {\n            if (top > minTop) {\n              height -= range.y;\n              top += range.y;\n            }\n          } else {\n            height -= range.y;\n            top += range.y;\n          }\n        }\n\n        if (width < 0 && height < 0) {\n          action = ACTION_SOUTH_EAST;\n          height = 0;\n          width = 0;\n        } else if (width < 0) {\n          action = ACTION_NORTH_EAST;\n          width = 0;\n        } else if (height < 0) {\n          action = ACTION_SOUTH_WEST;\n          height = 0;\n        }\n\n        break;\n\n      case ACTION_SOUTH_WEST:\n        if (aspectRatio) {\n          if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n            renderable = false;\n            break;\n          }\n\n          width -= range.x;\n          left += range.x;\n          height = width / aspectRatio;\n        } else {\n          if (range.x <= 0) {\n            if (left > minLeft) {\n              width -= range.x;\n              left += range.x;\n            } else if (range.y >= 0 && bottom >= maxHeight) {\n              renderable = false;\n            }\n          } else {\n            width -= range.x;\n            left += range.x;\n          }\n\n          if (range.y >= 0) {\n            if (bottom < maxHeight) {\n              height += range.y;\n            }\n          } else {\n            height += range.y;\n          }\n        }\n\n        if (width < 0 && height < 0) {\n          action = ACTION_NORTH_EAST;\n          height = 0;\n          width = 0;\n        } else if (width < 0) {\n          action = ACTION_SOUTH_EAST;\n          width = 0;\n        } else if (height < 0) {\n          action = ACTION_NORTH_WEST;\n          height = 0;\n        }\n\n        break;\n\n      case ACTION_SOUTH_EAST:\n        if (aspectRatio) {\n          if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n            renderable = false;\n            break;\n          }\n\n          width += range.x;\n          height = width / aspectRatio;\n        } else {\n          if (range.x >= 0) {\n            if (right < maxWidth) {\n              width += range.x;\n            } else if (range.y >= 0 && bottom >= maxHeight) {\n              renderable = false;\n            }\n          } else {\n            width += range.x;\n          }\n\n          if (range.y >= 0) {\n            if (bottom < maxHeight) {\n              height += range.y;\n            }\n          } else {\n            height += range.y;\n          }\n        }\n\n        if (width < 0 && height < 0) {\n          action = ACTION_NORTH_WEST;\n          height = 0;\n          width = 0;\n        } else if (width < 0) {\n          action = ACTION_SOUTH_WEST;\n          width = 0;\n        } else if (height < 0) {\n          action = ACTION_NORTH_EAST;\n          height = 0;\n        }\n\n        break;\n\n      // Move canvas\n      case 'move':\n        self.move(range.x, range.y);\n        renderable = false;\n        break;\n\n      // Zoom canvas\n      case 'zoom':\n        self.zoom(getMaxZoomRatio(pointers), e);\n        renderable = false;\n        break;\n\n      // Create crop box\n      case 'crop':\n        if (!range.x || !range.y) {\n          renderable = false;\n          break;\n        }\n\n        offset = getOffset(self.cropper);\n        left = pointer.startX - offset.left;\n        top = pointer.startY - offset.top;\n        width = cropBoxData.minWidth;\n        height = cropBoxData.minHeight;\n\n        if (range.x > 0) {\n          action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n        } else if (range.x < 0) {\n          left -= width;\n          action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n        }\n\n        if (range.y < 0) {\n          top -= height;\n        }\n\n        // Show the crop box if is hidden\n        if (!self.cropped) {\n          removeClass(self.cropBox, 'cropper-hidden');\n          self.cropped = true;\n\n          if (self.limited) {\n            self.limitCropBox(true, true);\n          }\n        }\n\n        break;\n\n      // No default\n    }\n\n    if (renderable) {\n      cropBoxData.width = width;\n      cropBoxData.height = height;\n      cropBoxData.left = left;\n      cropBoxData.top = top;\n      self.action = action;\n\n      self.renderCropBox();\n    }\n\n    // Override\n    each(pointers, function (p) {\n      p.startX = p.endX;\n      p.startY = p.endY;\n    });\n  }\n};\n\nfunction getPointersCenter(pointers) {\n  var pageX = 0;\n  var pageY = 0;\n  var count = 0;\n\n  each(pointers, function (_ref) {\n    var startX = _ref.startX,\n        startY = _ref.startY;\n\n    pageX += startX;\n    pageY += startY;\n    count += 1;\n  });\n\n  pageX /= count;\n  pageY /= count;\n\n  return {\n    pageX: pageX,\n    pageY: pageY\n  };\n}\n\nvar methods = {\n  // Show the crop box manually\n  crop: function crop() {\n    var self = this;\n\n    if (self.ready && !self.disabled) {\n      if (!self.cropped) {\n        self.cropped = true;\n        self.limitCropBox(true, true);\n\n        if (self.options.modal) {\n          addClass(self.dragBox, 'cropper-modal');\n        }\n\n        removeClass(self.cropBox, 'cropper-hidden');\n      }\n\n      self.setCropBoxData(self.initialCropBoxData);\n    }\n\n    return self;\n  },\n\n\n  // Reset the image and crop box to their initial states\n  reset: function reset() {\n    var self = this;\n\n    if (self.ready && !self.disabled) {\n      self.imageData = extend({}, self.initialImageData);\n      self.canvasData = extend({}, self.initialCanvasData);\n      self.cropBoxData = extend({}, self.initialCropBoxData);\n\n      self.renderCanvas();\n\n      if (self.cropped) {\n        self.renderCropBox();\n      }\n    }\n\n    return self;\n  },\n\n\n  // Clear the crop box\n  clear: function clear() {\n    var self = this;\n\n    if (self.cropped && !self.disabled) {\n      extend(self.cropBoxData, {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      });\n\n      self.cropped = false;\n      self.renderCropBox();\n\n      self.limitCanvas();\n\n      // Render canvas after crop box rendered\n      self.renderCanvas();\n\n      removeClass(self.dragBox, 'cropper-modal');\n      addClass(self.cropBox, 'cropper-hidden');\n    }\n\n    return self;\n  },\n\n\n  /**\n   * Replace the image's src and rebuild the cropper\n   *\n   * @param {String} url\n   * @param {Boolean} onlyColorChanged (optional)\n   */\n  replace: function replace(url, onlyColorChanged) {\n    var self = this;\n\n    if (!self.disabled && url) {\n      if (self.isImg) {\n        self.element.src = url;\n      }\n\n      if (onlyColorChanged) {\n        self.url = url;\n        self.image.src = url;\n\n        if (self.ready) {\n          self.image2.src = url;\n\n          each(self.previews, function (element) {\n            getByTag(element, 'img')[0].src = url;\n          });\n        }\n      } else {\n        if (self.isImg) {\n          self.replaced = true;\n        }\n\n        // Clear previous data\n        self.options.data = null;\n        self.load(url);\n      }\n    }\n\n    return self;\n  },\n\n\n  // Enable (unfreeze) the cropper\n  enable: function enable() {\n    var self = this;\n\n    if (self.ready) {\n      self.disabled = false;\n      removeClass(self.cropper, 'cropper-disabled');\n    }\n\n    return self;\n  },\n\n\n  // Disable (freeze) the cropper\n  disable: function disable() {\n    var self = this;\n\n    if (self.ready) {\n      self.disabled = true;\n      addClass(self.cropper, 'cropper-disabled');\n    }\n\n    return self;\n  },\n\n\n  // Destroy the cropper and remove the instance from the image\n  destroy: function destroy() {\n    var self = this;\n    var element = self.element;\n    var image = self.image;\n\n    if (self.loaded) {\n      if (self.isImg && self.replaced) {\n        element.src = self.originalUrl;\n      }\n\n      self.unbuild();\n      removeClass(element, 'cropper-hidden');\n    } else if (self.isImg) {\n      removeListener(element, 'load', self.onStart);\n    } else if (image) {\n      removeChild(image);\n    }\n\n    removeData(element, 'cropper');\n\n    return self;\n  },\n\n\n  /**\n   * Move the canvas with relative offsets\n   *\n   * @param {Number} offsetX\n   * @param {Number} offsetY (optional)\n   */\n  move: function move(offsetX, offsetY) {\n    var self = this;\n    var canvasData = self.canvasData;\n\n    return self.moveTo(isUndefined(offsetX) ? offsetX : canvasData.left + Number(offsetX), isUndefined(offsetY) ? offsetY : canvasData.top + Number(offsetY));\n  },\n\n\n  /**\n   * Move the canvas to an absolute point\n   *\n   * @param {Number} x\n   * @param {Number} y (optional)\n   */\n  moveTo: function moveTo(x, y) {\n    var self = this;\n    var canvasData = self.canvasData;\n    var changed = false;\n\n    // If \"y\" is not present, its default value is \"x\"\n    if (isUndefined(y)) {\n      y = x;\n    }\n\n    x = Number(x);\n    y = Number(y);\n\n    if (self.ready && !self.disabled && self.options.movable) {\n      if (isNumber(x)) {\n        canvasData.left = x;\n        changed = true;\n      }\n\n      if (isNumber(y)) {\n        canvasData.top = y;\n        changed = true;\n      }\n\n      if (changed) {\n        self.renderCanvas(true);\n      }\n    }\n\n    return self;\n  },\n\n\n  /**\n   * Zoom the canvas with a relative ratio\n   *\n   * @param {Number} ratio\n   * @param {Event} _originalEvent (private)\n   */\n  zoom: function zoom(ratio, _originalEvent) {\n    var self = this;\n    var canvasData = self.canvasData;\n\n    ratio = Number(ratio);\n\n    if (ratio < 0) {\n      ratio = 1 / (1 - ratio);\n    } else {\n      ratio = 1 + ratio;\n    }\n\n    return self.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, _originalEvent);\n  },\n\n\n  /**\n   * Zoom the canvas to an absolute ratio\n   *\n   * @param {Number} ratio\n   * @param {Event} _originalEvent (private)\n   */\n  zoomTo: function zoomTo(ratio, _originalEvent) {\n    var self = this;\n    var options = self.options;\n    var canvasData = self.canvasData;\n    var width = canvasData.width;\n    var height = canvasData.height;\n    var naturalWidth = canvasData.naturalWidth;\n    var naturalHeight = canvasData.naturalHeight;\n\n    ratio = Number(ratio);\n\n    if (ratio >= 0 && self.ready && !self.disabled && options.zoomable) {\n      var newWidth = naturalWidth * ratio;\n      var newHeight = naturalHeight * ratio;\n\n      if (dispatchEvent(self.element, 'zoom', {\n        originalEvent: _originalEvent,\n        oldRatio: width / naturalWidth,\n        ratio: newWidth / naturalWidth\n      }) === false) {\n        return self;\n      }\n\n      if (_originalEvent) {\n        var pointers = self.pointers;\n        var offset = getOffset(self.cropper);\n        var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {\n          pageX: _originalEvent.pageX,\n          pageY: _originalEvent.pageY\n        };\n\n        // Zoom from the triggering point of the event\n        canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n        canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n      } else {\n        // Zoom from the center of the canvas\n        canvasData.left -= (newWidth - width) / 2;\n        canvasData.top -= (newHeight - height) / 2;\n      }\n\n      canvasData.width = newWidth;\n      canvasData.height = newHeight;\n      self.renderCanvas(true);\n    }\n\n    return self;\n  },\n\n\n  /**\n   * Rotate the canvas with a relative degree\n   *\n   * @param {Number} degree\n   */\n  rotate: function rotate(degree) {\n    var self = this;\n\n    return self.rotateTo((self.imageData.rotate || 0) + Number(degree));\n  },\n\n\n  /**\n   * Rotate the canvas to an absolute degree\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()\n   *\n   * @param {Number} degree\n   */\n  rotateTo: function rotateTo(degree) {\n    var self = this;\n\n    degree = Number(degree);\n\n    if (isNumber(degree) && self.ready && !self.disabled && self.options.rotatable) {\n      self.imageData.rotate = degree % 360;\n      self.rotated = true;\n      self.renderCanvas(true);\n    }\n\n    return self;\n  },\n\n\n  /**\n   * Scale the image\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()\n   *\n   * @param {Number} scaleX\n   * @param {Number} scaleY (optional)\n   */\n  scale: function scale(scaleX, scaleY) {\n    var self = this;\n    var imageData = self.imageData;\n    var changed = false;\n\n    // If \"scaleY\" is not present, its default value is \"scaleX\"\n    if (isUndefined(scaleY)) {\n      scaleY = scaleX;\n    }\n\n    scaleX = Number(scaleX);\n    scaleY = Number(scaleY);\n\n    if (self.ready && !self.disabled && self.options.scalable) {\n      if (isNumber(scaleX)) {\n        imageData.scaleX = scaleX;\n        changed = true;\n      }\n\n      if (isNumber(scaleY)) {\n        imageData.scaleY = scaleY;\n        changed = true;\n      }\n\n      if (changed) {\n        self.renderImage(true);\n      }\n    }\n\n    return self;\n  },\n\n\n  /**\n   * Scale the abscissa of the image\n   *\n   * @param {Number} scaleX\n   */\n  scaleX: function scaleX(_scaleX) {\n    var self = this;\n    var scaleY = self.imageData.scaleY;\n\n    return self.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\n  },\n\n\n  /**\n   * Scale the ordinate of the image\n   *\n   * @param {Number} scaleY\n   */\n  scaleY: function scaleY(_scaleY) {\n    var self = this;\n    var scaleX = self.imageData.scaleX;\n\n    return self.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\n  },\n\n\n  /**\n   * Get the cropped area position and size data (base on the original image)\n   *\n   * @param {Boolean} rounded (optional)\n   * @return {Object} data\n   */\n  getData: function getData(rounded) {\n    var self = this;\n    var options = self.options;\n    var imageData = self.imageData;\n    var canvasData = self.canvasData;\n    var cropBoxData = self.cropBoxData;\n    var ratio = void 0;\n    var data = void 0;\n\n    if (self.ready && self.cropped) {\n      data = {\n        x: cropBoxData.left - canvasData.left,\n        y: cropBoxData.top - canvasData.top,\n        width: cropBoxData.width,\n        height: cropBoxData.height\n      };\n\n      ratio = imageData.width / imageData.naturalWidth;\n\n      each(data, function (n, i) {\n        n /= ratio;\n        data[i] = rounded ? Math.round(n) : n;\n      });\n    } else {\n      data = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n\n    if (options.rotatable) {\n      data.rotate = imageData.rotate || 0;\n    }\n\n    if (options.scalable) {\n      data.scaleX = imageData.scaleX || 1;\n      data.scaleY = imageData.scaleY || 1;\n    }\n\n    return data;\n  },\n\n\n  /**\n   * Set the cropped area position and size with new data\n   *\n   * @param {Object} data\n   */\n  setData: function setData(data) {\n    var self = this;\n    var options = self.options;\n    var imageData = self.imageData;\n    var canvasData = self.canvasData;\n    var cropBoxData = {};\n    var rotated = void 0;\n    var scaled = void 0;\n    var ratio = void 0;\n\n    if (isFunction(data)) {\n      data = data.call(self.element);\n    }\n\n    if (self.ready && !self.disabled && isPlainObject(data)) {\n      if (options.rotatable) {\n        if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n          imageData.rotate = data.rotate;\n          self.rotated = rotated = true;\n        }\n      }\n\n      if (options.scalable) {\n        if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n          imageData.scaleX = data.scaleX;\n          scaled = true;\n        }\n\n        if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n          imageData.scaleY = data.scaleY;\n          scaled = true;\n        }\n      }\n\n      if (rotated) {\n        self.renderCanvas();\n      } else if (scaled) {\n        self.renderImage();\n      }\n\n      ratio = imageData.width / imageData.naturalWidth;\n\n      if (isNumber(data.x)) {\n        cropBoxData.left = data.x * ratio + canvasData.left;\n      }\n\n      if (isNumber(data.y)) {\n        cropBoxData.top = data.y * ratio + canvasData.top;\n      }\n\n      if (isNumber(data.width)) {\n        cropBoxData.width = data.width * ratio;\n      }\n\n      if (isNumber(data.height)) {\n        cropBoxData.height = data.height * ratio;\n      }\n\n      self.setCropBoxData(cropBoxData);\n    }\n\n    return self;\n  },\n\n\n  /**\n   * Get the container size data\n   *\n   * @return {Object} data\n   */\n  getContainerData: function getContainerData() {\n    var self = this;\n\n    return self.ready ? self.containerData : {};\n  },\n\n\n  /**\n   * Get the image position and size data\n   *\n   * @return {Object} data\n   */\n  getImageData: function getImageData() {\n    var self = this;\n\n    return self.loaded ? self.imageData : {};\n  },\n\n\n  /**\n   * Get the canvas position and size data\n   *\n   * @return {Object} data\n   */\n  getCanvasData: function getCanvasData() {\n    var self = this;\n    var canvasData = self.canvasData;\n    var data = {};\n\n    if (self.ready) {\n      each(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {\n        data[n] = canvasData[n];\n      });\n    }\n\n    return data;\n  },\n\n\n  /**\n   * Set the canvas position and size with new data\n   *\n   * @param {Object} data\n   */\n  setCanvasData: function setCanvasData(data) {\n    var self = this;\n    var canvasData = self.canvasData;\n    var aspectRatio = canvasData.aspectRatio;\n\n    if (isFunction(data)) {\n      data = data.call(self.element);\n    }\n\n    if (self.ready && !self.disabled && isPlainObject(data)) {\n      if (isNumber(data.left)) {\n        canvasData.left = data.left;\n      }\n\n      if (isNumber(data.top)) {\n        canvasData.top = data.top;\n      }\n\n      if (isNumber(data.width)) {\n        canvasData.width = data.width;\n        canvasData.height = data.width / aspectRatio;\n      } else if (isNumber(data.height)) {\n        canvasData.height = data.height;\n        canvasData.width = data.height * aspectRatio;\n      }\n\n      self.renderCanvas(true);\n    }\n\n    return self;\n  },\n\n\n  /**\n   * Get the crop box position and size data\n   *\n   * @return {Object} data\n   */\n  getCropBoxData: function getCropBoxData() {\n    var self = this;\n    var cropBoxData = self.cropBoxData;\n    var data = void 0;\n\n    if (self.ready && self.cropped) {\n      data = {\n        left: cropBoxData.left,\n        top: cropBoxData.top,\n        width: cropBoxData.width,\n        height: cropBoxData.height\n      };\n    }\n\n    return data || {};\n  },\n\n\n  /**\n   * Set the crop box position and size with new data\n   *\n   * @param {Object} data\n   */\n  setCropBoxData: function setCropBoxData(data) {\n    var self = this;\n    var cropBoxData = self.cropBoxData;\n    var aspectRatio = self.options.aspectRatio;\n    var widthChanged = void 0;\n    var heightChanged = void 0;\n\n    if (isFunction(data)) {\n      data = data.call(self.element);\n    }\n\n    if (self.ready && self.cropped && !self.disabled && isPlainObject(data)) {\n      if (isNumber(data.left)) {\n        cropBoxData.left = data.left;\n      }\n\n      if (isNumber(data.top)) {\n        cropBoxData.top = data.top;\n      }\n\n      if (isNumber(data.width) && data.width !== cropBoxData.width) {\n        widthChanged = true;\n        cropBoxData.width = data.width;\n      }\n\n      if (isNumber(data.height) && data.height !== cropBoxData.height) {\n        heightChanged = true;\n        cropBoxData.height = data.height;\n      }\n\n      if (aspectRatio) {\n        if (widthChanged) {\n          cropBoxData.height = cropBoxData.width / aspectRatio;\n        } else if (heightChanged) {\n          cropBoxData.width = cropBoxData.height * aspectRatio;\n        }\n      }\n\n      self.renderCropBox();\n    }\n\n    return self;\n  },\n\n\n  /**\n   * Get a canvas drawn the cropped image\n   *\n   * @param {Object} options (optional)\n   * @return {HTMLCanvasElement} canvas\n   */\n  getCroppedCanvas: function getCroppedCanvas(options) {\n    var self = this;\n\n    if (!self.ready || !window.HTMLCanvasElement) {\n      return null;\n    }\n\n    // Return the whole canvas if not cropped\n    if (!self.cropped) {\n      return getSourceCanvas(self.image, self.imageData);\n    }\n\n    if (!isPlainObject(options)) {\n      options = {};\n    }\n\n    var data = self.getData();\n    var originalWidth = data.width;\n    var originalHeight = data.height;\n    var aspectRatio = originalWidth / originalHeight;\n    var scaledWidth = void 0;\n    var scaledHeight = void 0;\n    var scaledRatio = void 0;\n\n    if (isPlainObject(options)) {\n      scaledWidth = options.width;\n      scaledHeight = options.height;\n\n      if (scaledWidth) {\n        scaledHeight = scaledWidth / aspectRatio;\n        scaledRatio = scaledWidth / originalWidth;\n      } else if (scaledHeight) {\n        scaledWidth = scaledHeight * aspectRatio;\n        scaledRatio = scaledHeight / originalHeight;\n      }\n    }\n\n    // The canvas element will use `Math.floor` on a float number, so floor first\n    var canvasWidth = Math.floor(scaledWidth || originalWidth);\n    var canvasHeight = Math.floor(scaledHeight || originalHeight);\n\n    var canvas = createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    if (options.fillColor) {\n      context.fillStyle = options.fillColor;\n      context.fillRect(0, 0, canvasWidth, canvasHeight);\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n    var parameters = function () {\n      var source = getSourceCanvas(self.image, self.imageData);\n      var sourceWidth = source.width;\n      var sourceHeight = source.height;\n      var canvasData = self.canvasData;\n      var params = [source];\n\n      // Source canvas\n      var srcX = data.x + canvasData.naturalWidth * (Math.abs(data.scaleX || 1) - 1) / 2;\n      var srcY = data.y + canvasData.naturalHeight * (Math.abs(data.scaleY || 1) - 1) / 2;\n      var srcWidth = void 0;\n      var srcHeight = void 0;\n\n      // Destination canvas\n      var dstX = void 0;\n      var dstY = void 0;\n      var dstWidth = void 0;\n      var dstHeight = void 0;\n\n      if (srcX <= -originalWidth || srcX > sourceWidth) {\n        srcX = srcWidth = dstX = dstWidth = 0;\n      } else if (srcX <= 0) {\n        dstX = -srcX;\n        srcX = 0;\n        srcWidth = dstWidth = Math.min(sourceWidth, originalWidth + srcX);\n      } else if (srcX <= sourceWidth) {\n        dstX = 0;\n        srcWidth = dstWidth = Math.min(originalWidth, sourceWidth - srcX);\n      }\n\n      if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {\n        srcY = srcHeight = dstY = dstHeight = 0;\n      } else if (srcY <= 0) {\n        dstY = -srcY;\n        srcY = 0;\n        srcHeight = dstHeight = Math.min(sourceHeight, originalHeight + srcY);\n      } else if (srcY <= sourceHeight) {\n        dstY = 0;\n        srcHeight = dstHeight = Math.min(originalHeight, sourceHeight - srcY);\n      }\n\n      params.push(Math.floor(srcX), Math.floor(srcY), Math.floor(srcWidth), Math.floor(srcHeight));\n\n      // Scale destination sizes\n      if (scaledRatio) {\n        dstX *= scaledRatio;\n        dstY *= scaledRatio;\n        dstWidth *= scaledRatio;\n        dstHeight *= scaledRatio;\n      }\n\n      // Avoid \"IndexSizeError\" in IE and Firefox\n      if (dstWidth > 0 && dstHeight > 0) {\n        params.push(Math.floor(dstX), Math.floor(dstY), Math.floor(dstWidth), Math.floor(dstHeight));\n      }\n\n      return params;\n    }();\n\n    context.drawImage.apply(context, toConsumableArray(parameters));\n\n    return canvas;\n  },\n\n\n  /**\n   * Change the aspect ratio of the crop box\n   *\n   * @param {Number} aspectRatio\n   */\n  setAspectRatio: function setAspectRatio(aspectRatio) {\n    var self = this;\n    var options = self.options;\n\n    if (!self.disabled && !isUndefined(aspectRatio)) {\n      // 0 -> NaN\n      options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n\n      if (self.ready) {\n        self.initCropBox();\n\n        if (self.cropped) {\n          self.renderCropBox();\n        }\n      }\n    }\n\n    return self;\n  },\n\n\n  /**\n   * Change the drag mode\n   *\n   * @param {String} mode (optional)\n   */\n  setDragMode: function setDragMode(mode) {\n    var self = this;\n    var options = self.options;\n    var dragBox = self.dragBox;\n    var face = self.face;\n    var croppable = void 0;\n    var movable = void 0;\n\n    if (self.loaded && !self.disabled) {\n      croppable = mode === 'crop';\n      movable = options.movable && mode === 'move';\n      mode = croppable || movable ? mode : 'none';\n\n      setData$1(dragBox, 'action', mode);\n      toggleClass(dragBox, 'cropper-crop', croppable);\n      toggleClass(dragBox, 'cropper-move', movable);\n\n      if (!options.cropBoxMovable) {\n        // Sync drag mode to crop box when it is not movable\n        setData$1(face, 'action', mode);\n        toggleClass(face, 'cropper-crop', croppable);\n        toggleClass(face, 'cropper-move', movable);\n      }\n    }\n\n    return self;\n  }\n};\n\n// Constants\nvar NAMESPACE = 'cropper';\n\n// Classes\nvar CLASS_HIDDEN = NAMESPACE + '-hidden';\n\n// Events\nvar EVENT_ERROR = 'error';\nvar EVENT_LOAD = 'load';\nvar EVENT_READY = 'ready';\nvar EVENT_CROP = 'crop';\n\n// RegExps\nvar REGEXP_DATA_URL = /^data:/;\nvar REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\n\nvar AnotherCropper = void 0;\n\nvar Cropper = function () {\n  function Cropper(element, options) {\n    classCallCheck(this, Cropper);\n\n    var self = this;\n\n    self.element = element;\n    self.options = extend({}, DEFAULTS, isPlainObject(options) && options);\n    self.loaded = false;\n    self.ready = false;\n    self.complete = false;\n    self.rotated = false;\n    self.cropped = false;\n    self.disabled = false;\n    self.replaced = false;\n    self.limited = false;\n    self.wheeling = false;\n    self.isImg = false;\n    self.originalUrl = '';\n    self.canvasData = null;\n    self.cropBoxData = null;\n    self.previews = null;\n    self.pointers = {};\n    self.init();\n  }\n\n  createClass(Cropper, [{\n    key: 'init',\n    value: function init() {\n      var self = this;\n      var element = self.element;\n      var tagName = element.tagName.toLowerCase();\n      var url = void 0;\n\n      if (getData$1(element, NAMESPACE)) {\n        return;\n      }\n\n      setData$1(element, NAMESPACE, self);\n\n      if (tagName === 'img') {\n        self.isImg = true;\n\n        // e.g.: \"img/picture.jpg\"\n        self.originalUrl = url = element.getAttribute('src');\n\n        // Stop when it's a blank image\n        if (!url) {\n          return;\n        }\n\n        // e.g.: \"http://example.com/img/picture.jpg\"\n        url = element.src;\n      } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n        url = element.toDataURL();\n      }\n\n      self.load(url);\n    }\n  }, {\n    key: 'load',\n    value: function load(url) {\n      var self = this;\n      var options = self.options;\n      var element = self.element;\n\n      if (!url) {\n        return;\n      }\n\n      self.url = url;\n      self.imageData = {};\n\n      if (!options.checkOrientation || !window.ArrayBuffer) {\n        self.clone();\n        return;\n      }\n\n      // XMLHttpRequest disallows to open a Data URL in some browsers like IE11 and Safari\n      if (REGEXP_DATA_URL.test(url)) {\n        if (REGEXP_DATA_URL_JPEG) {\n          self.read(dataURLToArrayBuffer(url));\n        } else {\n          self.clone();\n        }\n        return;\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      xhr.onerror = xhr.onabort = function () {\n        self.clone();\n      };\n\n      xhr.onload = function () {\n        self.read(xhr.response);\n      };\n\n      if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\n        url = addTimestamp(url);\n      }\n\n      xhr.open('get', url);\n      xhr.responseType = 'arraybuffer';\n      xhr.withCredentials = element.crossOrigin === 'use-credentials';\n      xhr.send();\n    }\n  }, {\n    key: 'read',\n    value: function read(arrayBuffer) {\n      var self = this;\n      var options = self.options;\n      var orientation = getOrientation(arrayBuffer);\n      var imageData = self.imageData;\n      var rotate = 0;\n      var scaleX = 1;\n      var scaleY = 1;\n\n      if (orientation > 1) {\n        self.url = arrayBufferToDataURL(arrayBuffer);\n\n        switch (orientation) {\n\n          // flip horizontal\n          case 2:\n            scaleX = -1;\n            break;\n\n          // rotate left 180°\n          case 3:\n            rotate = -180;\n            break;\n\n          // flip vertical\n          case 4:\n            scaleY = -1;\n            break;\n\n          // flip vertical + rotate right 90°\n          case 5:\n            rotate = 90;\n            scaleY = -1;\n            break;\n\n          // rotate right 90°\n          case 6:\n            rotate = 90;\n            break;\n\n          // flip horizontal + rotate right 90°\n          case 7:\n            rotate = 90;\n            scaleX = -1;\n            break;\n\n          // rotate left 90°\n          case 8:\n            rotate = -90;\n            break;\n        }\n      }\n\n      if (options.rotatable) {\n        imageData.rotate = rotate;\n      }\n\n      if (options.scalable) {\n        imageData.scaleX = scaleX;\n        imageData.scaleY = scaleY;\n      }\n\n      self.clone();\n    }\n  }, {\n    key: 'clone',\n    value: function clone() {\n      var self = this;\n      var element = self.element;\n      var url = self.url;\n      var crossOrigin = void 0;\n      var crossOriginUrl = void 0;\n      var start = void 0;\n      var stop = void 0;\n\n      if (self.options.checkCrossOrigin && isCrossOriginURL(url)) {\n        crossOrigin = element.crossOrigin;\n\n        if (crossOrigin) {\n          crossOriginUrl = url;\n        } else {\n          crossOrigin = 'anonymous';\n\n          // Bust cache when there is not a \"crossOrigin\" property\n          crossOriginUrl = addTimestamp(url);\n        }\n      }\n\n      self.crossOrigin = crossOrigin;\n      self.crossOriginUrl = crossOriginUrl;\n\n      var image = createElement('img');\n\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n\n      image.src = crossOriginUrl || url;\n      self.image = image;\n      self.onStart = start = proxy(self.start, self);\n      self.onStop = stop = proxy(self.stop, self);\n\n      if (self.isImg) {\n        if (element.complete) {\n          self.start();\n        } else {\n          addListener(element, EVENT_LOAD, start);\n        }\n      } else {\n        addListener(image, EVENT_LOAD, start);\n        addListener(image, EVENT_ERROR, stop);\n        addClass(image, 'cropper-hide');\n        element.parentNode.insertBefore(image, element.nextSibling);\n      }\n    }\n  }, {\n    key: 'start',\n    value: function start(event) {\n      var self = this;\n      var image = self.isImg ? self.element : self.image;\n\n      if (event) {\n        removeListener(image, EVENT_LOAD, self.onStart);\n        removeListener(image, EVENT_ERROR, self.onStop);\n      }\n\n      getImageSize(image, function (naturalWidth, naturalHeight) {\n        extend(self.imageData, {\n          naturalWidth: naturalWidth,\n          naturalHeight: naturalHeight,\n          aspectRatio: naturalWidth / naturalHeight\n        });\n\n        self.loaded = true;\n        self.build();\n      });\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      var self = this;\n      var image = self.image;\n\n      removeListener(image, EVENT_LOAD, self.onStart);\n      removeListener(image, EVENT_ERROR, self.onStop);\n\n      removeChild(image);\n      self.image = null;\n    }\n  }, {\n    key: 'build',\n    value: function build() {\n      var self = this;\n      var options = self.options;\n      var element = self.element;\n      var image = self.image;\n      var container = void 0;\n      var cropper = void 0;\n      var canvas = void 0;\n      var dragBox = void 0;\n      var cropBox = void 0;\n      var face = void 0;\n\n      if (!self.loaded) {\n        return;\n      }\n\n      // Unbuild first when replace\n      if (self.ready) {\n        self.unbuild();\n      }\n\n      var template = createElement('div');\n      template.innerHTML = TEMPLATE;\n\n      // Create cropper elements\n      self.container = container = element.parentNode;\n      self.cropper = cropper = getByClass(template, 'cropper-container')[0];\n      self.canvas = canvas = getByClass(cropper, 'cropper-canvas')[0];\n      self.dragBox = dragBox = getByClass(cropper, 'cropper-drag-box')[0];\n      self.cropBox = cropBox = getByClass(cropper, 'cropper-crop-box')[0];\n      self.viewBox = getByClass(cropper, 'cropper-view-box')[0];\n      self.face = face = getByClass(cropBox, 'cropper-face')[0];\n\n      appendChild(canvas, image);\n\n      // Hide the original image\n      addClass(element, CLASS_HIDDEN);\n\n      // Inserts the cropper after to the current image\n      container.insertBefore(cropper, element.nextSibling);\n\n      // Show the image if is hidden\n      if (!self.isImg) {\n        removeClass(image, 'cropper-hide');\n      }\n\n      self.initPreview();\n      self.bind();\n\n      options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n      options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n\n      self.cropped = options.autoCrop;\n\n      if (options.autoCrop) {\n        if (options.modal) {\n          addClass(dragBox, 'cropper-modal');\n        }\n      } else {\n        addClass(cropBox, CLASS_HIDDEN);\n      }\n\n      if (!options.guides) {\n        addClass(getByClass(cropBox, 'cropper-dashed'), CLASS_HIDDEN);\n      }\n\n      if (!options.center) {\n        addClass(getByClass(cropBox, 'cropper-center'), CLASS_HIDDEN);\n      }\n\n      if (options.background) {\n        addClass(cropper, 'cropper-bg');\n      }\n\n      if (!options.highlight) {\n        addClass(face, 'cropper-invisible');\n      }\n\n      if (options.cropBoxMovable) {\n        addClass(face, 'cropper-move');\n        setData$1(face, 'action', 'all');\n      }\n\n      if (!options.cropBoxResizable) {\n        addClass(getByClass(cropBox, 'cropper-line'), CLASS_HIDDEN);\n        addClass(getByClass(cropBox, 'cropper-point'), CLASS_HIDDEN);\n      }\n\n      self.setDragMode(options.dragMode);\n      self.render();\n      self.ready = true;\n      self.setData(options.data);\n\n      // Call the \"ready\" option asynchronously to keep \"image.cropper\" is defined\n      self.completing = setTimeout(function () {\n        if (isFunction(options.ready)) {\n          addListener(element, EVENT_READY, options.ready, true);\n        }\n\n        dispatchEvent(element, EVENT_READY);\n        dispatchEvent(element, EVENT_CROP, self.getData());\n\n        self.complete = true;\n      }, 0);\n    }\n  }, {\n    key: 'unbuild',\n    value: function unbuild() {\n      var self = this;\n\n      if (!self.ready) {\n        return;\n      }\n\n      if (!self.complete) {\n        clearTimeout(self.completing);\n      }\n\n      self.ready = false;\n      self.complete = false;\n      self.initialImageData = null;\n\n      // Clear `initialCanvasData` is necessary when replace\n      self.initialCanvasData = null;\n      self.initialCropBoxData = null;\n      self.containerData = null;\n      self.canvasData = null;\n\n      // Clear `cropBoxData` is necessary when replace\n      self.cropBoxData = null;\n      self.unbind();\n\n      self.resetPreview();\n      self.previews = null;\n\n      self.viewBox = null;\n      self.cropBox = null;\n      self.dragBox = null;\n      self.canvas = null;\n      self.container = null;\n\n      removeChild(self.cropper);\n      self.cropper = null;\n    }\n  }], [{\n    key: 'noConflict',\n    value: function noConflict() {\n      window.Cropper = AnotherCropper;\n      return Cropper;\n    }\n  }, {\n    key: 'setDefaults',\n    value: function setDefaults(options) {\n      extend(DEFAULTS, isPlainObject(options) && options);\n    }\n  }]);\n  return Cropper;\n}();\n\nextend(Cropper.prototype, render$1);\nextend(Cropper.prototype, preview$1);\nextend(Cropper.prototype, events);\nextend(Cropper.prototype, handlers);\nextend(Cropper.prototype, change$1);\nextend(Cropper.prototype, methods);\n\nif (typeof window !== 'undefined') {\n  AnotherCropper = window.Cropper;\n  window.Cropper = Cropper;\n}\n\nreturn Cropper;\n\n})));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n(function () {\n  \"use strict\";\n\n  function buildDraggable(Sortable) {\n    function removeNode(node) {\n      node.parentElement.removeChild(node);\n    }\n\n    function insertNodeAt(fatherNode, node, position) {\n      if (position < fatherNode.children.length) {\n        fatherNode.insertBefore(node, fatherNode.children[position]);\n      } else {\n        fatherNode.appendChild(node);\n      }\n    }\n\n    function computeVmIndex(vnodes, element) {\n      return vnodes.map(function (elt) {\n        return elt.elm;\n      }).indexOf(element);\n    }\n\n    function _computeIndexes(slots, children) {\n      if (!slots) {\n        return [];\n      }\n\n      var elmFromNodes = slots.map(function (elt) {\n        return elt.elm;\n      });\n      return [].concat(_toConsumableArray(children)).map(function (elt) {\n        return elmFromNodes.indexOf(elt);\n      });\n    }\n\n    function emit(evtName, evtData) {\n      var _this = this;\n\n      this.$nextTick(function () {\n        return _this.$emit(evtName.toLowerCase(), evtData);\n      });\n    }\n\n    function delegateAndEmit(evtName) {\n      var _this2 = this;\n\n      return function (evtData) {\n        if (_this2.realList !== null) {\n          _this2['onDrag' + evtName](evtData);\n        }\n        emit.call(_this2, evtName, evtData);\n      };\n    }\n\n    var eventsListened = ['Start', 'Add', 'Remove', 'Update', 'End'];\n    var eventsToEmit = ['Choose', 'Sort', 'Filter', 'Clone'];\n    var readonlyProperties = ['Move'].concat(eventsListened, eventsToEmit).map(function (evt) {\n      return 'on' + evt;\n    });\n    var draggingElement = null;\n\n    var props = {\n      options: Object,\n      list: {\n        type: Array,\n        required: false,\n        default: null\n      },\n      value: {\n        type: Array,\n        required: false,\n        default: null\n      },\n      noTransitionOnDrag: {\n        type: Boolean,\n        default: false\n      },\n      clone: {\n        type: Function,\n        default: function _default(original) {\n          return original;\n        }\n      },\n      element: {\n        type: String,\n        default: 'div'\n      },\n      move: {\n        type: Function,\n        default: null\n      }\n    };\n\n    var draggableComponent = {\n      props: props,\n\n      data: function data() {\n        return {\n          transitionMode: false,\n          componentMode: false\n        };\n      },\n      render: function render(h) {\n        if (this.$slots.default && this.$slots.default.length === 1) {\n          var child = this.$slots.default[0];\n          if (child.componentOptions && child.componentOptions.tag === \"transition-group\") {\n            this.transitionMode = true;\n          }\n        }\n        return h(this.element, null, this.$slots.default);\n      },\n      mounted: function mounted() {\n        var _this3 = this;\n\n        this.componentMode = this.element.toLowerCase() !== this.$el.nodeName.toLowerCase();\n        if (this.componentMode && this.transitionMode) {\n          throw new Error('Transition-group inside component is not supported. Please alter element value or remove transition-group. Current element value: ' + this.element);\n        }\n        var optionsAdded = {};\n        eventsListened.forEach(function (elt) {\n          optionsAdded['on' + elt] = delegateAndEmit.call(_this3, elt);\n        });\n\n        eventsToEmit.forEach(function (elt) {\n          optionsAdded['on' + elt] = emit.bind(_this3, elt);\n        });\n\n        var options = _extends({}, this.options, optionsAdded, { onMove: function onMove(evt, originalEvent) {\n            return _this3.onDragMove(evt, originalEvent);\n          } });\n        !('draggable' in options) && (options.draggable = '>*');\n        this._sortable = new Sortable(this.rootContainer, options);\n        this.computeIndexes();\n      },\n      beforeDestroy: function beforeDestroy() {\n        this._sortable.destroy();\n      },\n\n\n      computed: {\n        rootContainer: function rootContainer() {\n          return this.transitionMode ? this.$el.children[0] : this.$el;\n        },\n        isCloning: function isCloning() {\n          return !!this.options && !!this.options.group && this.options.group.pull === 'clone';\n        },\n        realList: function realList() {\n          return !!this.list ? this.list : this.value;\n        }\n      },\n\n      watch: {\n        options: {\n          handler: function handler(newOptionValue) {\n            for (var property in newOptionValue) {\n              if (readonlyProperties.indexOf(property) == -1) {\n                this._sortable.option(property, newOptionValue[property]);\n              }\n            }\n          },\n\n          deep: true\n        },\n\n        realList: function realList() {\n          this.computeIndexes();\n        }\n      },\n\n      methods: {\n        getChildrenNodes: function getChildrenNodes() {\n          if (this.componentMode) {\n            return this.$children[0].$slots.default;\n          }\n          var rawNodes = this.$slots.default;\n          return this.transitionMode ? rawNodes[0].child.$slots.default : rawNodes;\n        },\n        computeIndexes: function computeIndexes() {\n          var _this4 = this;\n\n          this.$nextTick(function () {\n            _this4.visibleIndexes = _computeIndexes(_this4.getChildrenNodes(), _this4.rootContainer.children);\n          });\n        },\n        getUnderlyingVm: function getUnderlyingVm(htmlElt) {\n          var index = computeVmIndex(this.getChildrenNodes(), htmlElt);\n          var element = this.realList[index];\n          return { index: index, element: element };\n        },\n        getUnderlyingPotencialDraggableComponent: function getUnderlyingPotencialDraggableComponent(_ref) {\n          var __vue__ = _ref.__vue__;\n\n          if (!__vue__ || !__vue__.$options || __vue__.$options._componentTag !== \"transition-group\") {\n            return __vue__;\n          }\n          return __vue__.$parent;\n        },\n        emitChanges: function emitChanges(evt) {\n          var _this5 = this;\n\n          this.$nextTick(function () {\n            _this5.$emit('change', evt);\n          });\n        },\n        alterList: function alterList(onList) {\n          if (!!this.list) {\n            onList(this.list);\n          } else {\n            var newList = [].concat(_toConsumableArray(this.value));\n            onList(newList);\n            this.$emit('input', newList);\n          }\n        },\n        spliceList: function spliceList() {\n          var _arguments = arguments;\n\n          var spliceList = function spliceList(list) {\n            return list.splice.apply(list, _arguments);\n          };\n          this.alterList(spliceList);\n        },\n        updatePosition: function updatePosition(oldIndex, newIndex) {\n          var updatePosition = function updatePosition(list) {\n            return list.splice(newIndex, 0, list.splice(oldIndex, 1)[0]);\n          };\n          this.alterList(updatePosition);\n        },\n        getRelatedContextFromMoveEvent: function getRelatedContextFromMoveEvent(_ref2) {\n          var to = _ref2.to,\n              related = _ref2.related;\n\n          var component = this.getUnderlyingPotencialDraggableComponent(to);\n          if (!component) {\n            return { component: component };\n          }\n          var list = component.realList;\n          var context = { list: list, component: component };\n          if (to !== related && list && component.getUnderlyingVm) {\n            var destination = component.getUnderlyingVm(related);\n            return _extends(destination, context);\n          }\n\n          return context;\n        },\n        getVmIndex: function getVmIndex(domIndex) {\n          var indexes = this.visibleIndexes;\n          var numberIndexes = indexes.length;\n          return domIndex > numberIndexes - 1 ? numberIndexes : indexes[domIndex];\n        },\n        getComponent: function getComponent() {\n          return this.$slots.default[0].componentInstance;\n        },\n        resetTransitionData: function resetTransitionData(index) {\n          if (!this.noTransitionOnDrag || !this.transitionMode) {\n            return;\n          }\n          var nodes = this.getChildrenNodes();\n          nodes[index].data = null;\n          var transitionContainer = this.getComponent();\n          transitionContainer.children = [];\n          transitionContainer.kept = undefined;\n        },\n        onDragStart: function onDragStart(evt) {\n          this.context = this.getUnderlyingVm(evt.item);\n          evt.item._underlying_vm_ = this.clone(this.context.element);\n          draggingElement = evt.item;\n        },\n        onDragAdd: function onDragAdd(evt) {\n          var element = evt.item._underlying_vm_;\n          if (element === undefined) {\n            return;\n          }\n          removeNode(evt.item);\n          var newIndex = this.getVmIndex(evt.newIndex);\n          this.spliceList(newIndex, 0, element);\n          this.computeIndexes();\n          var added = { element: element, newIndex: newIndex };\n          this.emitChanges({ added: added });\n        },\n        onDragRemove: function onDragRemove(evt) {\n          insertNodeAt(this.rootContainer, evt.item, evt.oldIndex);\n          if (this.isCloning) {\n            removeNode(evt.clone);\n            return;\n          }\n          var oldIndex = this.context.index;\n          this.spliceList(oldIndex, 1);\n          var removed = { element: this.context.element, oldIndex: oldIndex };\n          this.resetTransitionData(oldIndex);\n          this.emitChanges({ removed: removed });\n        },\n        onDragUpdate: function onDragUpdate(evt) {\n          removeNode(evt.item);\n          insertNodeAt(evt.from, evt.item, evt.oldIndex);\n          var oldIndex = this.context.index;\n          var newIndex = this.getVmIndex(evt.newIndex);\n          this.updatePosition(oldIndex, newIndex);\n          var moved = { element: this.context.element, oldIndex: oldIndex, newIndex: newIndex };\n          this.emitChanges({ moved: moved });\n        },\n        computeFutureIndex: function computeFutureIndex(relatedContext, evt) {\n          if (!relatedContext.element) {\n            return 0;\n          }\n          var domChildren = [].concat(_toConsumableArray(evt.to.children)).filter(function (el) {\n            return el.style['display'] !== 'none';\n          });\n          var currentDOMIndex = domChildren.indexOf(evt.related);\n          var currentIndex = relatedContext.component.getVmIndex(currentDOMIndex);\n          var draggedInList = domChildren.indexOf(draggingElement) != -1;\n          return draggedInList || !evt.willInsertAfter ? currentIndex : currentIndex + 1;\n        },\n        onDragMove: function onDragMove(evt, originalEvent) {\n          var onMove = this.move;\n          if (!onMove || !this.realList) {\n            return true;\n          }\n\n          var relatedContext = this.getRelatedContextFromMoveEvent(evt);\n          var draggedContext = this.context;\n          var futureIndex = this.computeFutureIndex(relatedContext, evt);\n          _extends(draggedContext, { futureIndex: futureIndex });\n          _extends(evt, { relatedContext: relatedContext, draggedContext: draggedContext });\n          return onMove(evt, originalEvent);\n        },\n        onDragEnd: function onDragEnd(evt) {\n          this.computeIndexes();\n          draggingElement = null;\n        }\n      }\n    };\n    return draggableComponent;\n  }\n\n  if (true) {\n    var Sortable = __webpack_require__(61);\n    module.exports = buildDraggable(Sortable);\n  } else if (typeof define == \"function\" && define.amd) {\n    define(['sortablejs'], function (Sortable) {\n      return buildDraggable(Sortable);\n    });\n  } else if (window && window.Vue && window.Sortable) {\n    var draggable = buildDraggable(window.Sortable);\n    Vue.component('draggable', draggable);\n  }\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 12 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.1.8\n * (c) 2014-2016 Evan You\n * Released under the MIT License.\n */\n(function (global, factory) {\n   true ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Vue = factory();\n})(this, function () {\n  'use strict';\n\n  /*  */\n\n  /**\n   * Convert a value to a string that is actually rendered.\n   */\n\n  function _toString(val) {\n    return val == null ? '' : typeof val === 'object' ? JSON.stringify(val, null, 2) : String(val);\n  }\n\n  /**\n   * Convert a input value to a number for persistence.\n   * If the conversion fails, return original string.\n   */\n  function toNumber(val) {\n    var n = parseFloat(val, 10);\n    return n || n === 0 ? n : val;\n  }\n\n  /**\n   * Make a map and return a function for checking if a key\n   * is in that map.\n   */\n  function makeMap(str, expectsLowerCase) {\n    var map = Object.create(null);\n    var list = str.split(',');\n    for (var i = 0; i < list.length; i++) {\n      map[list[i]] = true;\n    }\n    return expectsLowerCase ? function (val) {\n      return map[val.toLowerCase()];\n    } : function (val) {\n      return map[val];\n    };\n  }\n\n  /**\n   * Check if a tag is a built-in tag.\n   */\n  var isBuiltInTag = makeMap('slot,component', true\n\n  /**\n   * Remove an item from an array\n   */\n  );function remove$1(arr, item) {\n    if (arr.length) {\n      var index = arr.indexOf(item);\n      if (index > -1) {\n        return arr.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Check whether the object has the property.\n   */\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  function hasOwn(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  }\n\n  /**\n   * Check if value is primitive\n   */\n  function isPrimitive(value) {\n    return typeof value === 'string' || typeof value === 'number';\n  }\n\n  /**\n   * Create a cached version of a pure function.\n   */\n  function cached(fn) {\n    var cache = Object.create(null);\n    return function cachedFn(str) {\n      var hit = cache[str];\n      return hit || (cache[str] = fn(str));\n    };\n  }\n\n  /**\n   * Camelize a hyphen-delmited string.\n   */\n  var camelizeRE = /-(\\w)/g;\n  var camelize = cached(function (str) {\n    return str.replace(camelizeRE, function (_, c) {\n      return c ? c.toUpperCase() : '';\n    });\n  }\n\n  /**\n   * Capitalize a string.\n   */\n  );var capitalize = cached(function (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  /**\n   * Hyphenate a camelCase string.\n   */\n  );var hyphenateRE = /([^-])([A-Z])/g;\n  var hyphenate = cached(function (str) {\n    return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\n  }\n\n  /**\n   * Simple bind, faster than native\n   */\n  );function bind$1(fn, ctx) {\n    function boundFn(a) {\n      var l = arguments.length;\n      return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n    }\n    // record original fn length\n    boundFn._length = fn.length;\n    return boundFn;\n  }\n\n  /**\n   * Convert an Array-like object to a real Array.\n   */\n  function toArray(list, start) {\n    start = start || 0;\n    var i = list.length - start;\n    var ret = new Array(i);\n    while (i--) {\n      ret[i] = list[i + start];\n    }\n    return ret;\n  }\n\n  /**\n   * Mix properties into target object.\n   */\n  function extend(to, _from) {\n    for (var key in _from) {\n      to[key] = _from[key];\n    }\n    return to;\n  }\n\n  /**\n   * Quick object check - this is primarily used to tell\n   * Objects from primitive values when we know the value\n   * is a JSON-compliant type.\n   */\n  function isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n  }\n\n  /**\n   * Strict object type check. Only returns true\n   * for plain JavaScript objects.\n   */\n  var toString = Object.prototype.toString;\n  var OBJECT_STRING = '[object Object]';\n  function isPlainObject(obj) {\n    return toString.call(obj) === OBJECT_STRING;\n  }\n\n  /**\n   * Merge an Array of Objects into a single Object.\n   */\n  function toObject(arr) {\n    var res = {};\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i]) {\n        extend(res, arr[i]);\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Perform no operation.\n   */\n  function noop() {}\n\n  /**\n   * Always return false.\n   */\n  var no = function () {\n    return false;\n  };\n\n  /**\n   * Return same value\n   */\n  var identity = function (_) {\n    return _;\n  };\n\n  /**\n   * Generate a static keys string from compiler modules.\n   */\n  function genStaticKeys(modules) {\n    return modules.reduce(function (keys, m) {\n      return keys.concat(m.staticKeys || []);\n    }, []).join(',');\n  }\n\n  /**\n   * Check if two values are loosely equal - that is,\n   * if they are plain objects, do they have the same shape?\n   */\n  function looseEqual(a, b) {\n    var isObjectA = isObject(a);\n    var isObjectB = isObject(b);\n    if (isObjectA && isObjectB) {\n      return JSON.stringify(a) === JSON.stringify(b);\n    } else if (!isObjectA && !isObjectB) {\n      return String(a) === String(b);\n    } else {\n      return false;\n    }\n  }\n\n  function looseIndexOf(arr, val) {\n    for (var i = 0; i < arr.length; i++) {\n      if (looseEqual(arr[i], val)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /*  */\n\n  var config = {\n    /**\n     * Option merge strategies (used in core/util/options)\n     */\n    optionMergeStrategies: Object.create(null),\n\n    /**\n     * Whether to suppress warnings.\n     */\n    silent: false,\n\n    /**\n     * Whether to enable devtools\n     */\n    devtools: 'development' !== 'production',\n\n    /**\n     * Error handler for watcher errors\n     */\n    errorHandler: null,\n\n    /**\n     * Ignore certain custom elements\n     */\n    ignoredElements: [],\n\n    /**\n     * Custom user key aliases for v-on\n     */\n    keyCodes: Object.create(null),\n\n    /**\n     * Check if a tag is reserved so that it cannot be registered as a\n     * component. This is platform-dependent and may be overwritten.\n     */\n    isReservedTag: no,\n\n    /**\n     * Check if a tag is an unknown element.\n     * Platform-dependent.\n     */\n    isUnknownElement: no,\n\n    /**\n     * Get the namespace of an element\n     */\n    getTagNamespace: noop,\n\n    /**\n     * Parse the real tag name for the specific platform.\n     */\n    parsePlatformTagName: identity,\n\n    /**\n     * Check if an attribute must be bound using property, e.g. value\n     * Platform-dependent.\n     */\n    mustUseProp: no,\n\n    /**\n     * List of asset types that a component can own.\n     */\n    _assetTypes: ['component', 'directive', 'filter'],\n\n    /**\n     * List of lifecycle hooks.\n     */\n    _lifecycleHooks: ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated'],\n\n    /**\n     * Max circular updates allowed in a scheduler flush cycle.\n     */\n    _maxUpdateCount: 100\n\n    /*  */\n\n    /**\n     * Check if a string starts with $ or _\n     */\n  };function isReserved(str) {\n    var c = (str + '').charCodeAt(0);\n    return c === 0x24 || c === 0x5F;\n  }\n\n  /**\n   * Define a property.\n   */\n  function def(obj, key, val, enumerable) {\n    Object.defineProperty(obj, key, {\n      value: val,\n      enumerable: !!enumerable,\n      writable: true,\n      configurable: true\n    });\n  }\n\n  /**\n   * Parse simple path.\n   */\n  var bailRE = /[^\\w.$]/;\n  function parsePath(path) {\n    if (bailRE.test(path)) {} else {\n      var segments = path.split('.');\n      return function (obj) {\n        for (var i = 0; i < segments.length; i++) {\n          if (!obj) {\n            return;\n          }\n          obj = obj[segments[i]];\n        }\n        return obj;\n      };\n    }\n  }\n\n  /*  */\n  /* globals MutationObserver */\n\n  // can we use __proto__?\n  var hasProto = '__proto__' in {};\n\n  // Browser environment sniffing\n  var inBrowser = typeof window !== 'undefined';\n  var UA = inBrowser && window.navigator.userAgent.toLowerCase();\n  var isIE = UA && /msie|trident/.test(UA);\n  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;\n  var isEdge = UA && UA.indexOf('edge/') > 0;\n  var isAndroid = UA && UA.indexOf('android') > 0;\n  var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA\n\n  // this needs to be lazy-evaled because vue may be required before\n  // vue-server-renderer can set VUE_ENV\n  );var _isServer;\n  var isServerRendering = function () {\n    if (_isServer === undefined) {\n      /* istanbul ignore if */\n      if (!inBrowser && typeof global !== 'undefined') {\n        // detect presence of vue-server-renderer and avoid\n        // Webpack shimming the process\n        _isServer = global['process'].env.VUE_ENV === 'server';\n      } else {\n        _isServer = false;\n      }\n    }\n    return _isServer;\n  };\n\n  // detect devtools\n  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n  /* istanbul ignore next */\n  function isNative(Ctor) {\n    return (/native code/.test(Ctor.toString())\n    );\n  }\n\n  /**\n   * Defer a task to execute it asynchronously.\n   */\n  var nextTick = function () {\n    var callbacks = [];\n    var pending = false;\n    var timerFunc;\n\n    function nextTickHandler() {\n      pending = false;\n      var copies = callbacks.slice(0);\n      callbacks.length = 0;\n      for (var i = 0; i < copies.length; i++) {\n        copies[i]();\n      }\n    }\n\n    // the nextTick behavior leverages the microtask queue, which can be accessed\n    // via either native Promise.then or MutationObserver.\n    // MutationObserver has wider support, however it is seriously bugged in\n    // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n    // completely stops working after triggering a few times... so, if native\n    // Promise is available, we will use it:\n    /* istanbul ignore if */\n    if (typeof Promise !== 'undefined' && isNative(Promise)) {\n      var p = Promise.resolve();\n      var logError = function (err) {\n        console.error(err);\n      };\n      timerFunc = function () {\n        p.then(nextTickHandler).catch(logError\n        // in problematic UIWebViews, Promise.then doesn't completely break, but\n        // it can get stuck in a weird state where callbacks are pushed into the\n        // microtask queue but the queue isn't being flushed, until the browser\n        // needs to do some other work, e.g. handle a timer. Therefore we can\n        // \"force\" the microtask queue to be flushed by adding an empty timer.\n        );if (isIOS) {\n          setTimeout(noop);\n        }\n      };\n    } else if (typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]')) {\n      // use MutationObserver where native Promise is not available,\n      // e.g. PhantomJS IE11, iOS7, Android 4.4\n      var counter = 1;\n      var observer = new MutationObserver(nextTickHandler);\n      var textNode = document.createTextNode(String(counter));\n      observer.observe(textNode, {\n        characterData: true\n      });\n      timerFunc = function () {\n        counter = (counter + 1) % 2;\n        textNode.data = String(counter);\n      };\n    } else {\n      // fallback to setTimeout\n      /* istanbul ignore next */\n      timerFunc = function () {\n        setTimeout(nextTickHandler, 0);\n      };\n    }\n\n    return function queueNextTick(cb, ctx) {\n      var _resolve;\n      callbacks.push(function () {\n        if (cb) {\n          cb.call(ctx);\n        }\n        if (_resolve) {\n          _resolve(ctx);\n        }\n      });\n      if (!pending) {\n        pending = true;\n        timerFunc();\n      }\n      if (!cb && typeof Promise !== 'undefined') {\n        return new Promise(function (resolve) {\n          _resolve = resolve;\n        });\n      }\n    };\n  }();\n\n  var _Set;\n  /* istanbul ignore if */\n  if (typeof Set !== 'undefined' && isNative(Set)) {\n    // use native Set when available.\n    _Set = Set;\n  } else {\n    // a non-standard Set polyfill that only works with primitive keys.\n    _Set = function () {\n      function Set() {\n        this.set = Object.create(null);\n      }\n      Set.prototype.has = function has(key) {\n        return this.set[key] === true;\n      };\n      Set.prototype.add = function add(key) {\n        this.set[key] = true;\n      };\n      Set.prototype.clear = function clear() {\n        this.set = Object.create(null);\n      };\n\n      return Set;\n    }();\n  }\n\n  var warn = noop;\n  var formatComponentName;\n\n  {\n    var hasConsole = typeof console !== 'undefined';\n\n    warn = function (msg, vm) {\n      if (hasConsole && !config.silent) {\n        console.error('[Vue warn]: ' + msg + ' ' + (vm ? formatLocation(formatComponentName(vm)) : ''));\n      }\n    };\n\n    formatComponentName = function (vm) {\n      if (vm.$root === vm) {\n        return 'root instance';\n      }\n      var name = vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;\n      return (name ? 'component <' + name + '>' : 'anonymous component') + (vm._isVue && vm.$options.__file ? ' at ' + vm.$options.__file : '');\n    };\n\n    var formatLocation = function (str) {\n      if (str === 'anonymous component') {\n        str += ' - use the \"name\" option for better debugging messages.';\n      }\n      return '\\n(found in ' + str + ')';\n    };\n  }\n\n  /*  */\n\n  var uid$1 = 0;\n\n  /**\n   * A dep is an observable that can have multiple\n   * directives subscribing to it.\n   */\n  var Dep = function Dep() {\n    this.id = uid$1++;\n    this.subs = [];\n  };\n\n  Dep.prototype.addSub = function addSub(sub) {\n    this.subs.push(sub);\n  };\n\n  Dep.prototype.removeSub = function removeSub(sub) {\n    remove$1(this.subs, sub);\n  };\n\n  Dep.prototype.depend = function depend() {\n    if (Dep.target) {\n      Dep.target.addDep(this);\n    }\n  };\n\n  Dep.prototype.notify = function notify() {\n    // stablize the subscriber list first\n    var subs = this.subs.slice();\n    for (var i = 0, l = subs.length; i < l; i++) {\n      subs[i].update();\n    }\n  };\n\n  // the current target watcher being evaluated.\n  // this is globally unique because there could be only one\n  // watcher being evaluated at any time.\n  Dep.target = null;\n  var targetStack = [];\n\n  function pushTarget(_target) {\n    if (Dep.target) {\n      targetStack.push(Dep.target);\n    }\n    Dep.target = _target;\n  }\n\n  function popTarget() {\n    Dep.target = targetStack.pop();\n  }\n\n  /*\n   * not type checking this file because flow doesn't play well with\n   * dynamically accessing methods on Array prototype\n   */\n\n  var arrayProto = Array.prototype;\n  var arrayMethods = Object.create(arrayProto);['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n    // cache original method\n    var original = arrayProto[method];\n    def(arrayMethods, method, function mutator() {\n      var arguments$1 = arguments;\n\n      // avoid leaking arguments:\n      // http://jsperf.com/closure-with-arguments\n      var i = arguments.length;\n      var args = new Array(i);\n      while (i--) {\n        args[i] = arguments$1[i];\n      }\n      var result = original.apply(this, args);\n      var ob = this.__ob__;\n      var inserted;\n      switch (method) {\n        case 'push':\n          inserted = args;\n          break;\n        case 'unshift':\n          inserted = args;\n          break;\n        case 'splice':\n          inserted = args.slice(2);\n          break;\n      }\n      if (inserted) {\n        ob.observeArray(inserted);\n      }\n      // notify change\n      ob.dep.notify();\n      return result;\n    });\n  }\n\n  /*  */\n\n  );var arrayKeys = Object.getOwnPropertyNames(arrayMethods\n\n  /**\n   * By default, when a reactive property is set, the new value is\n   * also converted to become reactive. However when passing down props,\n   * we don't want to force conversion because the value may be a nested value\n   * under a frozen data structure. Converting it would defeat the optimization.\n   */\n  );var observerState = {\n    shouldConvert: true,\n    isSettingProps: false\n\n    /**\n     * Observer class that are attached to each observed\n     * object. Once attached, the observer converts target\n     * object's property keys into getter/setters that\n     * collect dependencies and dispatches updates.\n     */\n  };var Observer = function Observer(value) {\n    this.value = value;\n    this.dep = new Dep();\n    this.vmCount = 0;\n    def(value, '__ob__', this);\n    if (Array.isArray(value)) {\n      var augment = hasProto ? protoAugment : copyAugment;\n      augment(value, arrayMethods, arrayKeys);\n      this.observeArray(value);\n    } else {\n      this.walk(value);\n    }\n  };\n\n  /**\n   * Walk through each property and convert them into\n   * getter/setters. This method should only be called when\n   * value type is Object.\n   */\n  Observer.prototype.walk = function walk(obj) {\n    var keys = Object.keys(obj);\n    for (var i = 0; i < keys.length; i++) {\n      defineReactive$$1(obj, keys[i], obj[keys[i]]);\n    }\n  };\n\n  /**\n   * Observe a list of Array items.\n   */\n  Observer.prototype.observeArray = function observeArray(items) {\n    for (var i = 0, l = items.length; i < l; i++) {\n      observe(items[i]);\n    }\n  };\n\n  // helpers\n\n  /**\n   * Augment an target Object or Array by intercepting\n   * the prototype chain using __proto__\n   */\n  function protoAugment(target, src) {\n    /* eslint-disable no-proto */\n    target.__proto__ = src;\n    /* eslint-enable no-proto */\n  }\n\n  /**\n   * Augment an target Object or Array by defining\n   * hidden properties.\n   */\n  /* istanbul ignore next */\n  function copyAugment(target, src, keys) {\n    for (var i = 0, l = keys.length; i < l; i++) {\n      var key = keys[i];\n      def(target, key, src[key]);\n    }\n  }\n\n  /**\n   * Attempt to create an observer instance for a value,\n   * returns the new observer if successfully observed,\n   * or the existing observer if the value already has one.\n   */\n  function observe(value, asRootData) {\n    if (!isObject(value)) {\n      return;\n    }\n    var ob;\n    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n      ob = value.__ob__;\n    } else if (observerState.shouldConvert && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\n      ob = new Observer(value);\n    }\n    if (asRootData && ob) {\n      ob.vmCount++;\n    }\n    return ob;\n  }\n\n  /**\n   * Define a reactive property on an Object.\n   */\n  function defineReactive$$1(obj, key, val, customSetter) {\n    var dep = new Dep();\n\n    var property = Object.getOwnPropertyDescriptor(obj, key);\n    if (property && property.configurable === false) {\n      return;\n    }\n\n    // cater for pre-defined getter/setters\n    var getter = property && property.get;\n    var setter = property && property.set;\n\n    var childOb = observe(val);\n    Object.defineProperty(obj, key, {\n      enumerable: true,\n      configurable: true,\n      get: function reactiveGetter() {\n        var value = getter ? getter.call(obj) : val;\n        if (Dep.target) {\n          dep.depend();\n          if (childOb) {\n            childOb.dep.depend();\n          }\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n        return value;\n      },\n      set: function reactiveSetter(newVal) {\n        var value = getter ? getter.call(obj) : val;\n        /* eslint-disable no-self-compare */\n        if (newVal === value || newVal !== newVal && value !== value) {\n          return;\n        }\n        /* eslint-enable no-self-compare */\n        if ('development' !== 'production' && customSetter) {\n          customSetter();\n        }\n        if (setter) {\n          setter.call(obj, newVal);\n        } else {\n          val = newVal;\n        }\n        childOb = observe(newVal);\n        dep.notify();\n      }\n    });\n  }\n\n  /**\n   * Set a property on an object. Adds the new property and\n   * triggers change notification if the property doesn't\n   * already exist.\n   */\n  function set$1(obj, key, val) {\n    if (Array.isArray(obj)) {\n      obj.length = Math.max(obj.length, key);\n      obj.splice(key, 1, val);\n      return val;\n    }\n    if (hasOwn(obj, key)) {\n      obj[key] = val;\n      return;\n    }\n    var ob = obj.__ob__;\n    if (obj._isVue || ob && ob.vmCount) {\n      'development' !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');\n      return;\n    }\n    if (!ob) {\n      obj[key] = val;\n      return;\n    }\n    defineReactive$$1(ob.value, key, val);\n    ob.dep.notify();\n    return val;\n  }\n\n  /**\n   * Delete a property and trigger change if necessary.\n   */\n  function del(obj, key) {\n    var ob = obj.__ob__;\n    if (obj._isVue || ob && ob.vmCount) {\n      'development' !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');\n      return;\n    }\n    if (!hasOwn(obj, key)) {\n      return;\n    }\n    delete obj[key];\n    if (!ob) {\n      return;\n    }\n    ob.dep.notify();\n  }\n\n  /**\n   * Collect dependencies on array elements when the array is touched, since\n   * we cannot intercept array element access like property getters.\n   */\n  function dependArray(value) {\n    for (var e = void 0, i = 0, l = value.length; i < l; i++) {\n      e = value[i];\n      e && e.__ob__ && e.__ob__.dep.depend();\n      if (Array.isArray(e)) {\n        dependArray(e);\n      }\n    }\n  }\n\n  /*  */\n\n  /**\n   * Option overwriting strategies are functions that handle\n   * how to merge a parent option value and a child option\n   * value into the final value.\n   */\n  var strats = config.optionMergeStrategies;\n\n  /**\n   * Options with restrictions\n   */\n  {\n    strats.el = strats.propsData = function (parent, child, vm, key) {\n      if (!vm) {\n        warn('option \"' + key + '\" can only be used during instance ' + 'creation with the `new` keyword.');\n      }\n      return defaultStrat(parent, child);\n    };\n  }\n\n  /**\n   * Helper that recursively merges two data objects together.\n   */\n  function mergeData(to, from) {\n    if (!from) {\n      return to;\n    }\n    var key, toVal, fromVal;\n    var keys = Object.keys(from);\n    for (var i = 0; i < keys.length; i++) {\n      key = keys[i];\n      toVal = to[key];\n      fromVal = from[key];\n      if (!hasOwn(to, key)) {\n        set$1(to, key, fromVal);\n      } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n        mergeData(toVal, fromVal);\n      }\n    }\n    return to;\n  }\n\n  /**\n   * Data\n   */\n  strats.data = function (parentVal, childVal, vm) {\n    if (!vm) {\n      // in a Vue.extend merge, both should be functions\n      if (!childVal) {\n        return parentVal;\n      }\n      if (typeof childVal !== 'function') {\n        'development' !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n        return parentVal;\n      }\n      if (!parentVal) {\n        return childVal;\n      }\n      // when parentVal & childVal are both present,\n      // we need to return a function that returns the\n      // merged result of both functions... no need to\n      // check if parentVal is a function here because\n      // it has to be a function to pass previous merges.\n      return function mergedDataFn() {\n        return mergeData(childVal.call(this), parentVal.call(this));\n      };\n    } else if (parentVal || childVal) {\n      return function mergedInstanceDataFn() {\n        // instance merge\n        var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n        var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n        if (instanceData) {\n          return mergeData(instanceData, defaultData);\n        } else {\n          return defaultData;\n        }\n      };\n    }\n  };\n\n  /**\n   * Hooks and param attributes are merged as arrays.\n   */\n  function mergeHook(parentVal, childVal) {\n    return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;\n  }\n\n  config._lifecycleHooks.forEach(function (hook) {\n    strats[hook] = mergeHook;\n  }\n\n  /**\n   * Assets\n   *\n   * When a vm is present (instance creation), we need to do\n   * a three-way merge between constructor options, instance\n   * options and parent options.\n   */\n  );function mergeAssets(parentVal, childVal) {\n    var res = Object.create(parentVal || null);\n    return childVal ? extend(res, childVal) : res;\n  }\n\n  config._assetTypes.forEach(function (type) {\n    strats[type + 's'] = mergeAssets;\n  }\n\n  /**\n   * Watchers.\n   *\n   * Watchers hashes should not overwrite one\n   * another, so we merge them as arrays.\n   */\n  );strats.watch = function (parentVal, childVal) {\n    /* istanbul ignore if */\n    if (!childVal) {\n      return parentVal;\n    }\n    if (!parentVal) {\n      return childVal;\n    }\n    var ret = {};\n    extend(ret, parentVal);\n    for (var key in childVal) {\n      var parent = ret[key];\n      var child = childVal[key];\n      if (parent && !Array.isArray(parent)) {\n        parent = [parent];\n      }\n      ret[key] = parent ? parent.concat(child) : [child];\n    }\n    return ret;\n  };\n\n  /**\n   * Other object hashes.\n   */\n  strats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n    if (!childVal) {\n      return parentVal;\n    }\n    if (!parentVal) {\n      return childVal;\n    }\n    var ret = Object.create(null);\n    extend(ret, parentVal);\n    extend(ret, childVal);\n    return ret;\n  };\n\n  /**\n   * Default strategy.\n   */\n  var defaultStrat = function (parentVal, childVal) {\n    return childVal === undefined ? parentVal : childVal;\n  };\n\n  /**\n   * Validate component names\n   */\n  function checkComponents(options) {\n    for (var key in options.components) {\n      var lower = key.toLowerCase();\n      if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n        warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\n      }\n    }\n  }\n\n  /**\n   * Ensure all props option syntax are normalized into the\n   * Object-based format.\n   */\n  function normalizeProps(options) {\n    var props = options.props;\n    if (!props) {\n      return;\n    }\n    var res = {};\n    var i, val, name;\n    if (Array.isArray(props)) {\n      i = props.length;\n      while (i--) {\n        val = props[i];\n        if (typeof val === 'string') {\n          name = camelize(val);\n          res[name] = { type: null };\n        } else {\n          warn('props must be strings when using array syntax.');\n        }\n      }\n    } else if (isPlainObject(props)) {\n      for (var key in props) {\n        val = props[key];\n        name = camelize(key);\n        res[name] = isPlainObject(val) ? val : { type: val };\n      }\n    }\n    options.props = res;\n  }\n\n  /**\n   * Normalize raw function directives into object format.\n   */\n  function normalizeDirectives(options) {\n    var dirs = options.directives;\n    if (dirs) {\n      for (var key in dirs) {\n        var def = dirs[key];\n        if (typeof def === 'function') {\n          dirs[key] = { bind: def, update: def };\n        }\n      }\n    }\n  }\n\n  /**\n   * Merge two option objects into a new one.\n   * Core utility used in both instantiation and inheritance.\n   */\n  function mergeOptions(parent, child, vm) {\n    {\n      checkComponents(child);\n    }\n    normalizeProps(child);\n    normalizeDirectives(child);\n    var extendsFrom = child.extends;\n    if (extendsFrom) {\n      parent = typeof extendsFrom === 'function' ? mergeOptions(parent, extendsFrom.options, vm) : mergeOptions(parent, extendsFrom, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        var mixin = child.mixins[i];\n        if (mixin.prototype instanceof Vue$3) {\n          mixin = mixin.options;\n        }\n        parent = mergeOptions(parent, mixin, vm);\n      }\n    }\n    var options = {};\n    var key;\n    for (key in parent) {\n      mergeField(key);\n    }\n    for (key in child) {\n      if (!hasOwn(parent, key)) {\n        mergeField(key);\n      }\n    }\n    function mergeField(key) {\n      var strat = strats[key] || defaultStrat;\n      options[key] = strat(parent[key], child[key], vm, key);\n    }\n    return options;\n  }\n\n  /**\n   * Resolve an asset.\n   * This function is used because child instances need access\n   * to assets defined in its ancestor chain.\n   */\n  function resolveAsset(options, type, id, warnMissing) {\n    /* istanbul ignore if */\n    if (typeof id !== 'string') {\n      return;\n    }\n    var assets = options[type];\n    // check local registration variations first\n    if (hasOwn(assets, id)) {\n      return assets[id];\n    }\n    var camelizedId = camelize(id);\n    if (hasOwn(assets, camelizedId)) {\n      return assets[camelizedId];\n    }\n    var PascalCaseId = capitalize(camelizedId);\n    if (hasOwn(assets, PascalCaseId)) {\n      return assets[PascalCaseId];\n    }\n    // fallback to prototype chain\n    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n    if ('development' !== 'production' && warnMissing && !res) {\n      warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\n    }\n    return res;\n  }\n\n  /*  */\n\n  function validateProp(key, propOptions, propsData, vm) {\n    var prop = propOptions[key];\n    var absent = !hasOwn(propsData, key);\n    var value = propsData[key];\n    // handle boolean props\n    if (isType(Boolean, prop.type)) {\n      if (absent && !hasOwn(prop, 'default')) {\n        value = false;\n      } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n        value = true;\n      }\n    }\n    // check default value\n    if (value === undefined) {\n      value = getPropDefaultValue(vm, prop, key\n      // since the default value is a fresh copy,\n      // make sure to observe it.\n      );var prevShouldConvert = observerState.shouldConvert;\n      observerState.shouldConvert = true;\n      observe(value);\n      observerState.shouldConvert = prevShouldConvert;\n    }\n    {\n      assertProp(prop, key, value, vm, absent);\n    }\n    return value;\n  }\n\n  /**\n   * Get the default value of a prop.\n   */\n  function getPropDefaultValue(vm, prop, key) {\n    // no default, return undefined\n    if (!hasOwn(prop, 'default')) {\n      return undefined;\n    }\n    var def = prop.default;\n    // warn against non-factory defaults for Object & Array\n    if (isObject(def)) {\n      'development' !== 'production' && warn('Invalid default value for prop \"' + key + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\n    }\n    // the raw prop value was also undefined from previous render,\n    // return previous default value to avoid unnecessary watcher trigger\n    if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm[key] !== undefined) {\n      return vm[key];\n    }\n    // call factory function for non-Function types\n    return typeof def === 'function' && prop.type !== Function ? def.call(vm) : def;\n  }\n\n  /**\n   * Assert whether a prop is valid.\n   */\n  function assertProp(prop, name, value, vm, absent) {\n    if (prop.required && absent) {\n      warn('Missing required prop: \"' + name + '\"', vm);\n      return;\n    }\n    if (value == null && !prop.required) {\n      return;\n    }\n    var type = prop.type;\n    var valid = !type || type === true;\n    var expectedTypes = [];\n    if (type) {\n      if (!Array.isArray(type)) {\n        type = [type];\n      }\n      for (var i = 0; i < type.length && !valid; i++) {\n        var assertedType = assertType(value, type[i]);\n        expectedTypes.push(assertedType.expectedType || '');\n        valid = assertedType.valid;\n      }\n    }\n    if (!valid) {\n      warn('Invalid prop: type check failed for prop \"' + name + '\".' + ' Expected ' + expectedTypes.map(capitalize).join(', ') + ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.', vm);\n      return;\n    }\n    var validator = prop.validator;\n    if (validator) {\n      if (!validator(value)) {\n        warn('Invalid prop: custom validator check failed for prop \"' + name + '\".', vm);\n      }\n    }\n  }\n\n  /**\n   * Assert the type of a value\n   */\n  function assertType(value, type) {\n    var valid;\n    var expectedType = getType(type);\n    if (expectedType === 'String') {\n      valid = typeof value === (expectedType = 'string');\n    } else if (expectedType === 'Number') {\n      valid = typeof value === (expectedType = 'number');\n    } else if (expectedType === 'Boolean') {\n      valid = typeof value === (expectedType = 'boolean');\n    } else if (expectedType === 'Function') {\n      valid = typeof value === (expectedType = 'function');\n    } else if (expectedType === 'Object') {\n      valid = isPlainObject(value);\n    } else if (expectedType === 'Array') {\n      valid = Array.isArray(value);\n    } else {\n      valid = value instanceof type;\n    }\n    return {\n      valid: valid,\n      expectedType: expectedType\n    };\n  }\n\n  /**\n   * Use function string name to check built-in types,\n   * because a simple equality check will fail when running\n   * across different vms / iframes.\n   */\n  function getType(fn) {\n    var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n    return match && match[1];\n  }\n\n  function isType(type, fn) {\n    if (!Array.isArray(fn)) {\n      return getType(fn) === getType(type);\n    }\n    for (var i = 0, len = fn.length; i < len; i++) {\n      if (getType(fn[i]) === getType(type)) {\n        return true;\n      }\n    }\n    /* istanbul ignore next */\n    return false;\n  }\n\n  var util = Object.freeze({\n    defineReactive: defineReactive$$1,\n    _toString: _toString,\n    toNumber: toNumber,\n    makeMap: makeMap,\n    isBuiltInTag: isBuiltInTag,\n    remove: remove$1,\n    hasOwn: hasOwn,\n    isPrimitive: isPrimitive,\n    cached: cached,\n    camelize: camelize,\n    capitalize: capitalize,\n    hyphenate: hyphenate,\n    bind: bind$1,\n    toArray: toArray,\n    extend: extend,\n    isObject: isObject,\n    isPlainObject: isPlainObject,\n    toObject: toObject,\n    noop: noop,\n    no: no,\n    identity: identity,\n    genStaticKeys: genStaticKeys,\n    looseEqual: looseEqual,\n    looseIndexOf: looseIndexOf,\n    isReserved: isReserved,\n    def: def,\n    parsePath: parsePath,\n    hasProto: hasProto,\n    inBrowser: inBrowser,\n    UA: UA,\n    isIE: isIE,\n    isIE9: isIE9,\n    isEdge: isEdge,\n    isAndroid: isAndroid,\n    isIOS: isIOS,\n    isServerRendering: isServerRendering,\n    devtools: devtools,\n    nextTick: nextTick,\n    get _Set() {\n      return _Set;\n    },\n    mergeOptions: mergeOptions,\n    resolveAsset: resolveAsset,\n    get warn() {\n      return warn;\n    },\n    get formatComponentName() {\n      return formatComponentName;\n    },\n    validateProp: validateProp\n  }\n\n  /* not type checking this file because flow doesn't play well with Proxy */\n\n  );var initProxy;\n\n  {\n    var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify\n    );\n\n    var warnNonPresent = function (target, key) {\n      warn('Property or method \"' + key + '\" is not defined on the instance but ' + 'referenced during render. Make sure to declare reactive data ' + 'properties in the data option.', target);\n    };\n\n    var hasProxy = typeof Proxy !== 'undefined' && Proxy.toString().match(/native code/);\n\n    if (hasProxy) {\n      var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n      config.keyCodes = new Proxy(config.keyCodes, {\n        set: function set(target, key, value) {\n          if (isBuiltInModifier(key)) {\n            warn('Avoid overwriting built-in modifier in config.keyCodes: .' + key);\n            return false;\n          } else {\n            target[key] = value;\n            return true;\n          }\n        }\n      });\n    }\n\n    var hasHandler = {\n      has: function has(target, key) {\n        var has = key in target;\n        var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n        if (!has && !isAllowed) {\n          warnNonPresent(target, key);\n        }\n        return has || !isAllowed;\n      }\n    };\n\n    var getHandler = {\n      get: function get(target, key) {\n        if (typeof key === 'string' && !(key in target)) {\n          warnNonPresent(target, key);\n        }\n        return target[key];\n      }\n    };\n\n    initProxy = function initProxy(vm) {\n      if (hasProxy) {\n        // determine which proxy handler to use\n        var options = vm.$options;\n        var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;\n        vm._renderProxy = new Proxy(vm, handlers);\n      } else {\n        vm._renderProxy = vm;\n      }\n    };\n  }\n\n  /*  */\n\n  var queue = [];\n  var has$1 = {};\n  var circular = {};\n  var waiting = false;\n  var flushing = false;\n  var index = 0;\n\n  /**\n   * Reset the scheduler's state.\n   */\n  function resetSchedulerState() {\n    queue.length = 0;\n    has$1 = {};\n    {\n      circular = {};\n    }\n    waiting = flushing = false;\n  }\n\n  /**\n   * Flush both queues and run the watchers.\n   */\n  function flushSchedulerQueue() {\n    flushing = true;\n\n    // Sort queue before flush.\n    // This ensures that:\n    // 1. Components are updated from parent to child. (because parent is always\n    //    created before the child)\n    // 2. A component's user watchers are run before its render watcher (because\n    //    user watchers are created before the render watcher)\n    // 3. If a component is destroyed during a parent component's watcher run,\n    //    its watchers can be skipped.\n    queue.sort(function (a, b) {\n      return a.id - b.id;\n    }\n\n    // do not cache length because more watchers might be pushed\n    // as we run existing watchers\n    );for (index = 0; index < queue.length; index++) {\n      var watcher = queue[index];\n      var id = watcher.id;\n      has$1[id] = null;\n      watcher.run\n      // in dev build, check and stop circular updates.\n      ();if ('development' !== 'production' && has$1[id] != null) {\n        circular[id] = (circular[id] || 0) + 1;\n        if (circular[id] > config._maxUpdateCount) {\n          warn('You may have an infinite update loop ' + (watcher.user ? 'in watcher with expression \"' + watcher.expression + '\"' : 'in a component render function.'), watcher.vm);\n          break;\n        }\n      }\n    }\n\n    // devtool hook\n    /* istanbul ignore if */\n    if (devtools && config.devtools) {\n      devtools.emit('flush');\n    }\n\n    resetSchedulerState();\n  }\n\n  /**\n   * Push a watcher into the watcher queue.\n   * Jobs with duplicate IDs will be skipped unless it's\n   * pushed when the queue is being flushed.\n   */\n  function queueWatcher(watcher) {\n    var id = watcher.id;\n    if (has$1[id] == null) {\n      has$1[id] = true;\n      if (!flushing) {\n        queue.push(watcher);\n      } else {\n        // if already flushing, splice the watcher based on its id\n        // if already past its id, it will be run next immediately.\n        var i = queue.length - 1;\n        while (i >= 0 && queue[i].id > watcher.id) {\n          i--;\n        }\n        queue.splice(Math.max(i, index) + 1, 0, watcher);\n      }\n      // queue the flush\n      if (!waiting) {\n        waiting = true;\n        nextTick(flushSchedulerQueue);\n      }\n    }\n  }\n\n  /*  */\n\n  var uid$2 = 0;\n\n  /**\n   * A watcher parses an expression, collects dependencies,\n   * and fires callback when the expression value changes.\n   * This is used for both the $watch() api and directives.\n   */\n  var Watcher = function Watcher(vm, expOrFn, cb, options) {\n    this.vm = vm;\n    vm._watchers.push(this\n    // options\n    );if (options) {\n      this.deep = !!options.deep;\n      this.user = !!options.user;\n      this.lazy = !!options.lazy;\n      this.sync = !!options.sync;\n    } else {\n      this.deep = this.user = this.lazy = this.sync = false;\n    }\n    this.cb = cb;\n    this.id = ++uid$2; // uid for batching\n    this.active = true;\n    this.dirty = this.lazy; // for lazy watchers\n    this.deps = [];\n    this.newDeps = [];\n    this.depIds = new _Set();\n    this.newDepIds = new _Set();\n    this.expression = expOrFn.toString\n    // parse expression for getter\n    ();if (typeof expOrFn === 'function') {\n      this.getter = expOrFn;\n    } else {\n      this.getter = parsePath(expOrFn);\n      if (!this.getter) {\n        this.getter = function () {};\n        'development' !== 'production' && warn('Failed watching path: \"' + expOrFn + '\" ' + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);\n      }\n    }\n    this.value = this.lazy ? undefined : this.get();\n  };\n\n  /**\n   * Evaluate the getter, and re-collect dependencies.\n   */\n  Watcher.prototype.get = function get() {\n    pushTarget(this);\n    var value = this.getter.call(this.vm, this.vm\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    );if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n    return value;\n  };\n\n  /**\n   * Add a dependency to this directive.\n   */\n  Watcher.prototype.addDep = function addDep(dep) {\n    var id = dep.id;\n    if (!this.newDepIds.has(id)) {\n      this.newDepIds.add(id);\n      this.newDeps.push(dep);\n      if (!this.depIds.has(id)) {\n        dep.addSub(this);\n      }\n    }\n  };\n\n  /**\n   * Clean up for dependency collection.\n   */\n  Watcher.prototype.cleanupDeps = function cleanupDeps() {\n    var this$1 = this;\n\n    var i = this.deps.length;\n    while (i--) {\n      var dep = this$1.deps[i];\n      if (!this$1.newDepIds.has(dep.id)) {\n        dep.removeSub(this$1);\n      }\n    }\n    var tmp = this.depIds;\n    this.depIds = this.newDepIds;\n    this.newDepIds = tmp;\n    this.newDepIds.clear();\n    tmp = this.deps;\n    this.deps = this.newDeps;\n    this.newDeps = tmp;\n    this.newDeps.length = 0;\n  };\n\n  /**\n   * Subscriber interface.\n   * Will be called when a dependency changes.\n   */\n  Watcher.prototype.update = function update() {\n    /* istanbul ignore else */\n    if (this.lazy) {\n      this.dirty = true;\n    } else if (this.sync) {\n      this.run();\n    } else {\n      queueWatcher(this);\n    }\n  };\n\n  /**\n   * Scheduler job interface.\n   * Will be called by the scheduler.\n   */\n  Watcher.prototype.run = function run() {\n    if (this.active) {\n      var value = this.get();\n      if (value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) || this.deep) {\n        // set new value\n        var oldValue = this.value;\n        this.value = value;\n        if (this.user) {\n          try {\n            this.cb.call(this.vm, value, oldValue);\n          } catch (e) {\n            /* istanbul ignore else */\n            if (config.errorHandler) {\n              config.errorHandler.call(null, e, this.vm);\n            } else {\n              'development' !== 'production' && warn('Error in watcher \"' + this.expression + '\"', this.vm);\n              throw e;\n            }\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue);\n        }\n      }\n    }\n  };\n\n  /**\n   * Evaluate the value of the watcher.\n   * This only gets called for lazy watchers.\n   */\n  Watcher.prototype.evaluate = function evaluate() {\n    this.value = this.get();\n    this.dirty = false;\n  };\n\n  /**\n   * Depend on all deps collected by this watcher.\n   */\n  Watcher.prototype.depend = function depend() {\n    var this$1 = this;\n\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].depend();\n    }\n  };\n\n  /**\n   * Remove self from all dependencies' subscriber list.\n   */\n  Watcher.prototype.teardown = function teardown() {\n    var this$1 = this;\n\n    if (this.active) {\n      // remove self from vm's watcher list\n      // this is a somewhat expensive operation so we skip it\n      // if the vm is being destroyed.\n      if (!this.vm._isBeingDestroyed) {\n        remove$1(this.vm._watchers, this);\n      }\n      var i = this.deps.length;\n      while (i--) {\n        this$1.deps[i].removeSub(this$1);\n      }\n      this.active = false;\n    }\n  };\n\n  /**\n   * Recursively traverse an object to evoke all converted\n   * getters, so that every nested property inside the object\n   * is collected as a \"deep\" dependency.\n   */\n  var seenObjects = new _Set();\n  function traverse(val) {\n    seenObjects.clear();\n    _traverse(val, seenObjects);\n  }\n\n  function _traverse(val, seen) {\n    var i, keys;\n    var isA = Array.isArray(val);\n    if (!isA && !isObject(val) || !Object.isExtensible(val)) {\n      return;\n    }\n    if (val.__ob__) {\n      var depId = val.__ob__.dep.id;\n      if (seen.has(depId)) {\n        return;\n      }\n      seen.add(depId);\n    }\n    if (isA) {\n      i = val.length;\n      while (i--) {\n        _traverse(val[i], seen);\n      }\n    } else {\n      keys = Object.keys(val);\n      i = keys.length;\n      while (i--) {\n        _traverse(val[keys[i]], seen);\n      }\n    }\n  }\n\n  /*  */\n\n  function initState(vm) {\n    vm._watchers = [];\n    var opts = vm.$options;\n    if (opts.props) {\n      initProps(vm, opts.props);\n    }\n    if (opts.methods) {\n      initMethods(vm, opts.methods);\n    }\n    if (opts.data) {\n      initData(vm);\n    } else {\n      observe(vm._data = {}, true /* asRootData */);\n    }\n    if (opts.computed) {\n      initComputed(vm, opts.computed);\n    }\n    if (opts.watch) {\n      initWatch(vm, opts.watch);\n    }\n  }\n\n  var isReservedProp = { key: 1, ref: 1, slot: 1 };\n\n  function initProps(vm, props) {\n    var propsData = vm.$options.propsData || {};\n    var keys = vm.$options._propKeys = Object.keys(props);\n    var isRoot = !vm.$parent;\n    // root instance props should be converted\n    observerState.shouldConvert = isRoot;\n    var loop = function (i) {\n      var key = keys[i];\n      /* istanbul ignore else */\n      {\n        if (isReservedProp[key]) {\n          warn('\"' + key + '\" is a reserved attribute and cannot be used as component prop.', vm);\n        }\n        defineReactive$$1(vm, key, validateProp(key, props, propsData, vm), function () {\n          if (vm.$parent && !observerState.isSettingProps) {\n            warn('Avoid mutating a prop directly since the value will be ' + 'overwritten whenever the parent component re-renders. ' + \"Instead, use a data or computed property based on the prop's \" + 'value. Prop being mutated: \"' + key + '\"', vm);\n          }\n        });\n      }\n    };\n\n    for (var i = 0; i < keys.length; i++) loop(i);\n    observerState.shouldConvert = true;\n  }\n\n  function initData(vm) {\n    var data = vm.$options.data;\n    data = vm._data = typeof data === 'function' ? data.call(vm) : data || {};\n    if (!isPlainObject(data)) {\n      data = {};\n      'development' !== 'production' && warn('data functions should return an object:\\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);\n    }\n    // proxy data on instance\n    var keys = Object.keys(data);\n    var props = vm.$options.props;\n    var i = keys.length;\n    while (i--) {\n      if (props && hasOwn(props, keys[i])) {\n        'development' !== 'production' && warn('The data property \"' + keys[i] + '\" is already declared as a prop. ' + 'Use prop default value instead.', vm);\n      } else {\n        proxy(vm, keys[i]);\n      }\n    }\n    // observe data\n    observe(data, true /* asRootData */);\n  }\n\n  var computedSharedDefinition = {\n    enumerable: true,\n    configurable: true,\n    get: noop,\n    set: noop\n  };\n\n  function initComputed(vm, computed) {\n    for (var key in computed) {\n      /* istanbul ignore if */\n      if ('development' !== 'production' && key in vm) {\n        warn('existing instance property \"' + key + '\" will be ' + 'overwritten by a computed property with the same name.', vm);\n      }\n      var userDef = computed[key];\n      if (typeof userDef === 'function') {\n        computedSharedDefinition.get = makeComputedGetter(userDef, vm);\n        computedSharedDefinition.set = noop;\n      } else {\n        computedSharedDefinition.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, vm) : bind$1(userDef.get, vm) : noop;\n        computedSharedDefinition.set = userDef.set ? bind$1(userDef.set, vm) : noop;\n      }\n      Object.defineProperty(vm, key, computedSharedDefinition);\n    }\n  }\n\n  function makeComputedGetter(getter, owner) {\n    var watcher = new Watcher(owner, getter, noop, {\n      lazy: true\n    });\n    return function computedGetter() {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value;\n    };\n  }\n\n  function initMethods(vm, methods) {\n    for (var key in methods) {\n      vm[key] = methods[key] == null ? noop : bind$1(methods[key], vm);\n      if ('development' !== 'production' && methods[key] == null) {\n        warn('method \"' + key + '\" has an undefined value in the component definition. ' + 'Did you reference the function correctly?', vm);\n      }\n    }\n  }\n\n  function initWatch(vm, watch) {\n    for (var key in watch) {\n      var handler = watch[key];\n      if (Array.isArray(handler)) {\n        for (var i = 0; i < handler.length; i++) {\n          createWatcher(vm, key, handler[i]);\n        }\n      } else {\n        createWatcher(vm, key, handler);\n      }\n    }\n  }\n\n  function createWatcher(vm, key, handler) {\n    var options;\n    if (isPlainObject(handler)) {\n      options = handler;\n      handler = handler.handler;\n    }\n    if (typeof handler === 'string') {\n      handler = vm[handler];\n    }\n    vm.$watch(key, handler, options);\n  }\n\n  function stateMixin(Vue) {\n    // flow somehow has problems with directly declared definition object\n    // when using Object.defineProperty, so we have to procedurally build up\n    // the object here.\n    var dataDef = {};\n    dataDef.get = function () {\n      return this._data;\n    };\n    {\n      dataDef.set = function (newData) {\n        warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);\n      };\n    }\n    Object.defineProperty(Vue.prototype, '$data', dataDef);\n\n    Vue.prototype.$set = set$1;\n    Vue.prototype.$delete = del;\n\n    Vue.prototype.$watch = function (expOrFn, cb, options) {\n      var vm = this;\n      options = options || {};\n      options.user = true;\n      var watcher = new Watcher(vm, expOrFn, cb, options);\n      if (options.immediate) {\n        cb.call(vm, watcher.value);\n      }\n      return function unwatchFn() {\n        watcher.teardown();\n      };\n    };\n  }\n\n  function proxy(vm, key) {\n    if (!isReserved(key)) {\n      Object.defineProperty(vm, key, {\n        configurable: true,\n        enumerable: true,\n        get: function proxyGetter() {\n          return vm._data[key];\n        },\n        set: function proxySetter(val) {\n          vm._data[key] = val;\n        }\n      });\n    }\n  }\n\n  /*  */\n\n  var VNode = function VNode(tag, data, children, text, elm, context, componentOptions) {\n    this.tag = tag;\n    this.data = data;\n    this.children = children;\n    this.text = text;\n    this.elm = elm;\n    this.ns = undefined;\n    this.context = context;\n    this.functionalContext = undefined;\n    this.key = data && data.key;\n    this.componentOptions = componentOptions;\n    this.child = undefined;\n    this.parent = undefined;\n    this.raw = false;\n    this.isStatic = false;\n    this.isRootInsert = true;\n    this.isComment = false;\n    this.isCloned = false;\n    this.isOnce = false;\n  };\n\n  var createEmptyVNode = function () {\n    var node = new VNode();\n    node.text = '';\n    node.isComment = true;\n    return node;\n  };\n\n  function createTextVNode(val) {\n    return new VNode(undefined, undefined, undefined, String(val));\n  }\n\n  // optimized shallow clone\n  // used for static nodes and slot nodes because they may be reused across\n  // multiple renders, cloning them avoids errors when DOM manipulations rely\n  // on their elm reference.\n  function cloneVNode(vnode) {\n    var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions);\n    cloned.ns = vnode.ns;\n    cloned.isStatic = vnode.isStatic;\n    cloned.key = vnode.key;\n    cloned.isCloned = true;\n    return cloned;\n  }\n\n  function cloneVNodes(vnodes) {\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneVNode(vnodes[i]);\n    }\n    return res;\n  }\n\n  /*  */\n\n  function mergeVNodeHook(def, hookKey, hook, key) {\n    key = key + hookKey;\n    var injectedHash = def.__injected || (def.__injected = {});\n    if (!injectedHash[key]) {\n      injectedHash[key] = true;\n      var oldHook = def[hookKey];\n      if (oldHook) {\n        def[hookKey] = function () {\n          oldHook.apply(this, arguments);\n          hook.apply(this, arguments);\n        };\n      } else {\n        def[hookKey] = hook;\n      }\n    }\n  }\n\n  /*  */\n\n  function updateListeners(on, oldOn, add, remove$$1, vm) {\n    var name, cur, old, fn, event, capture, once;\n    for (name in on) {\n      cur = on[name];\n      old = oldOn[name];\n      if (!cur) {\n        'development' !== 'production' && warn('Invalid handler for event \"' + name + '\": got ' + String(cur), vm);\n      } else if (!old) {\n        once = name.charAt(0) === '~'; // Prefixed last, checked first\n        event = once ? name.slice(1) : name;\n        capture = event.charAt(0) === '!';\n        event = capture ? event.slice(1) : event;\n        if (Array.isArray(cur)) {\n          add(event, cur.invoker = arrInvoker(cur), once, capture);\n        } else {\n          if (!cur.invoker) {\n            fn = cur;\n            cur = on[name] = {};\n            cur.fn = fn;\n            cur.invoker = fnInvoker(cur);\n          }\n          add(event, cur.invoker, once, capture);\n        }\n      } else if (cur !== old) {\n        if (Array.isArray(old)) {\n          old.length = cur.length;\n          for (var i = 0; i < old.length; i++) {\n            old[i] = cur[i];\n          }\n          on[name] = old;\n        } else {\n          old.fn = cur;\n          on[name] = old;\n        }\n      }\n    }\n    for (name in oldOn) {\n      if (!on[name]) {\n        once = name.charAt(0) === '~'; // Prefixed last, checked first\n        event = once ? name.slice(1) : name;\n        capture = event.charAt(0) === '!';\n        event = capture ? event.slice(1) : event;\n        remove$$1(event, oldOn[name].invoker, capture);\n      }\n    }\n  }\n\n  function arrInvoker(arr) {\n    return function (ev) {\n      var arguments$1 = arguments;\n\n      var single = arguments.length === 1;\n      for (var i = 0; i < arr.length; i++) {\n        single ? arr[i](ev) : arr[i].apply(null, arguments$1);\n      }\n    };\n  }\n\n  function fnInvoker(o) {\n    return function (ev) {\n      var single = arguments.length === 1;\n      single ? o.fn(ev) : o.fn.apply(null, arguments);\n    };\n  }\n\n  /*  */\n\n  // The template compiler attempts to minimize the need for normalization by\n  // statically analyzing the template at compile time.\n  //\n  // For plain HTML markup, normalization can be completely skipped because the\n  // generated render function is guaranteed to return Array<VNode>. There are\n  // two cases where extra normalization is needed:\n\n  // 1. When the children contains components - because a functional component\n  // may return an Array instead of a single root. In this case, just a simple\n  // nomralization is needed - if any child is an Array, we flatten the whole\n  // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n  // because functional components already normalize their own children.\n  function simpleNormalizeChildren(children) {\n    for (var i = 0; i < children.length; i++) {\n      if (Array.isArray(children[i])) {\n        return Array.prototype.concat.apply([], children);\n      }\n    }\n    return children;\n  }\n\n  // 2. When the children contains constrcuts that always generated nested Arrays,\n  // e.g. <template>, <slot>, v-for, or when the children is provided by user\n  // with hand-written render functions / JSX. In such cases a full normalization\n  // is needed to cater to all possible types of children values.\n  function normalizeChildren(children) {\n    return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;\n  }\n\n  function normalizeArrayChildren(children, nestedIndex) {\n    var res = [];\n    var i, c, last;\n    for (i = 0; i < children.length; i++) {\n      c = children[i];\n      if (c == null || typeof c === 'boolean') {\n        continue;\n      }\n      last = res[res.length - 1];\n      //  nested\n      if (Array.isArray(c)) {\n        res.push.apply(res, normalizeArrayChildren(c, (nestedIndex || '') + '_' + i));\n      } else if (isPrimitive(c)) {\n        if (last && last.text) {\n          last.text += String(c);\n        } else if (c !== '') {\n          // convert primitive to vnode\n          res.push(createTextVNode(c));\n        }\n      } else {\n        if (c.text && last && last.text) {\n          res[res.length - 1] = createTextVNode(last.text + c.text);\n        } else {\n          // default key for nested array children (likely generated by v-for)\n          if (c.tag && c.key == null && nestedIndex != null) {\n            c.key = '__vlist' + nestedIndex + '_' + i + '__';\n          }\n          res.push(c);\n        }\n      }\n    }\n    return res;\n  }\n\n  /*  */\n\n  function getFirstComponentChild(children) {\n    return children && children.filter(function (c) {\n      return c && c.componentOptions;\n    })[0];\n  }\n\n  /*  */\n\n  function initEvents(vm) {\n    vm._events = Object.create(null);\n    vm._hasHookEvent = false;\n    // init parent attached events\n    var listeners = vm.$options._parentListeners;\n    if (listeners) {\n      updateComponentListeners(vm, listeners);\n    }\n  }\n\n  var target;\n\n  function add$1(event, fn, once) {\n    if (once) {\n      target.$once(event, fn);\n    } else {\n      target.$on(event, fn);\n    }\n  }\n\n  function remove$2(event, fn) {\n    target.$off(event, fn);\n  }\n\n  function updateComponentListeners(vm, listeners, oldListeners) {\n    target = vm;\n    updateListeners(listeners, oldListeners || {}, add$1, remove$2, vm);\n  }\n\n  function eventsMixin(Vue) {\n    var hookRE = /^hook:/;\n    Vue.prototype.$on = function (event, fn) {\n      var vm = this;(vm._events[event] || (vm._events[event] = [])).push(fn\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      );if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n      return vm;\n    };\n\n    Vue.prototype.$once = function (event, fn) {\n      var vm = this;\n      function on() {\n        vm.$off(event, on);\n        fn.apply(vm, arguments);\n      }\n      on.fn = fn;\n      vm.$on(event, on);\n      return vm;\n    };\n\n    Vue.prototype.$off = function (event, fn) {\n      var vm = this;\n      // all\n      if (!arguments.length) {\n        vm._events = Object.create(null);\n        return vm;\n      }\n      // specific event\n      var cbs = vm._events[event];\n      if (!cbs) {\n        return vm;\n      }\n      if (arguments.length === 1) {\n        vm._events[event] = null;\n        return vm;\n      }\n      // specific handler\n      var cb;\n      var i = cbs.length;\n      while (i--) {\n        cb = cbs[i];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i, 1);\n          break;\n        }\n      }\n      return vm;\n    };\n\n    Vue.prototype.$emit = function (event) {\n      var vm = this;\n      var cbs = vm._events[event];\n      if (cbs) {\n        cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n        var args = toArray(arguments, 1);\n        for (var i = 0, l = cbs.length; i < l; i++) {\n          cbs[i].apply(vm, args);\n        }\n      }\n      return vm;\n    };\n  }\n\n  /*  */\n\n  var activeInstance = null;\n\n  function initLifecycle(vm) {\n    var options = vm.$options;\n\n    // locate first non-abstract parent\n    var parent = options.parent;\n    if (parent && !options.abstract) {\n      while (parent.$options.abstract && parent.$parent) {\n        parent = parent.$parent;\n      }\n      parent.$children.push(vm);\n    }\n\n    vm.$parent = parent;\n    vm.$root = parent ? parent.$root : vm;\n\n    vm.$children = [];\n    vm.$refs = {};\n\n    vm._watcher = null;\n    vm._inactive = false;\n    vm._isMounted = false;\n    vm._isDestroyed = false;\n    vm._isBeingDestroyed = false;\n  }\n\n  function lifecycleMixin(Vue) {\n    Vue.prototype._mount = function (el, hydrating) {\n      var vm = this;\n      vm.$el = el;\n      if (!vm.$options.render) {\n        vm.$options.render = createEmptyVNode;\n        {\n          /* istanbul ignore if */\n          if (vm.$options.template && vm.$options.template.charAt(0) !== '#') {\n            warn('You are using the runtime-only build of Vue where the template ' + 'option is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);\n          } else {\n            warn('Failed to mount component: template or render function not defined.', vm);\n          }\n        }\n      }\n      callHook(vm, 'beforeMount');\n      vm._watcher = new Watcher(vm, function () {\n        vm._update(vm._render(), hydrating);\n      }, noop);\n      hydrating = false;\n      // manually mounted instance, call mounted on self\n      // mounted is called for render-created child components in its inserted hook\n      if (vm.$vnode == null) {\n        vm._isMounted = true;\n        callHook(vm, 'mounted');\n      }\n      return vm;\n    };\n\n    Vue.prototype._update = function (vnode, hydrating) {\n      var vm = this;\n      if (vm._isMounted) {\n        callHook(vm, 'beforeUpdate');\n      }\n      var prevEl = vm.$el;\n      var prevVnode = vm._vnode;\n      var prevActiveInstance = activeInstance;\n      activeInstance = vm;\n      vm._vnode = vnode;\n      // Vue.prototype.__patch__ is injected in entry points\n      // based on the rendering backend used.\n      if (!prevVnode) {\n        // initial render\n        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */\n        , vm.$options._parentElm, vm.$options._refElm);\n      } else {\n        // updates\n        vm.$el = vm.__patch__(prevVnode, vnode);\n      }\n      activeInstance = prevActiveInstance;\n      // update __vue__ reference\n      if (prevEl) {\n        prevEl.__vue__ = null;\n      }\n      if (vm.$el) {\n        vm.$el.__vue__ = vm;\n      }\n      // if parent is an HOC, update its $el as well\n      if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n        vm.$parent.$el = vm.$el;\n      }\n      if (vm._isMounted) {\n        callHook(vm, 'updated');\n      }\n    };\n\n    Vue.prototype._updateFromParent = function (propsData, listeners, parentVnode, renderChildren) {\n      var vm = this;\n      var hasChildren = !!(vm.$options._renderChildren || renderChildren);\n      vm.$options._parentVnode = parentVnode;\n      vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n      if (vm._vnode) {\n        // update child tree's parent\n        vm._vnode.parent = parentVnode;\n      }\n      vm.$options._renderChildren = renderChildren;\n      // update props\n      if (propsData && vm.$options.props) {\n        observerState.shouldConvert = false;\n        {\n          observerState.isSettingProps = true;\n        }\n        var propKeys = vm.$options._propKeys || [];\n        for (var i = 0; i < propKeys.length; i++) {\n          var key = propKeys[i];\n          vm[key] = validateProp(key, vm.$options.props, propsData, vm);\n        }\n        observerState.shouldConvert = true;\n        {\n          observerState.isSettingProps = false;\n        }\n        vm.$options.propsData = propsData;\n      }\n      // update listeners\n      if (listeners) {\n        var oldListeners = vm.$options._parentListeners;\n        vm.$options._parentListeners = listeners;\n        updateComponentListeners(vm, listeners, oldListeners);\n      }\n      // resolve slots + force update if has children\n      if (hasChildren) {\n        vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n        vm.$forceUpdate();\n      }\n    };\n\n    Vue.prototype.$forceUpdate = function () {\n      var vm = this;\n      if (vm._watcher) {\n        vm._watcher.update();\n      }\n    };\n\n    Vue.prototype.$destroy = function () {\n      var vm = this;\n      if (vm._isBeingDestroyed) {\n        return;\n      }\n      callHook(vm, 'beforeDestroy');\n      vm._isBeingDestroyed = true;\n      // remove self from parent\n      var parent = vm.$parent;\n      if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n        remove$1(parent.$children, vm);\n      }\n      // teardown watchers\n      if (vm._watcher) {\n        vm._watcher.teardown();\n      }\n      var i = vm._watchers.length;\n      while (i--) {\n        vm._watchers[i].teardown();\n      }\n      // remove reference from data ob\n      // frozen object may not have observer.\n      if (vm._data.__ob__) {\n        vm._data.__ob__.vmCount--;\n      }\n      // call the last hook...\n      vm._isDestroyed = true;\n      callHook(vm, 'destroyed'\n      // turn off all instance listeners.\n      );vm.$off\n      // remove __vue__ reference\n      ();if (vm.$el) {\n        vm.$el.__vue__ = null;\n      }\n      // invoke destroy hooks on current rendered tree\n      vm.__patch__(vm._vnode, null);\n    };\n  }\n\n  function callHook(vm, hook) {\n    var handlers = vm.$options[hook];\n    if (handlers) {\n      for (var i = 0, j = handlers.length; i < j; i++) {\n        handlers[i].call(vm);\n      }\n    }\n    if (vm._hasHookEvent) {\n      vm.$emit('hook:' + hook);\n    }\n  }\n\n  /*  */\n\n  var hooks = { init: init, prepatch: prepatch, insert: insert, destroy: destroy$1 };\n  var hooksToMerge = Object.keys(hooks);\n\n  function createComponent(Ctor, data, context, children, tag) {\n    if (!Ctor) {\n      return;\n    }\n\n    var baseCtor = context.$options._base;\n    if (isObject(Ctor)) {\n      Ctor = baseCtor.extend(Ctor);\n    }\n\n    if (typeof Ctor !== 'function') {\n      {\n        warn('Invalid Component definition: ' + String(Ctor), context);\n      }\n      return;\n    }\n\n    // async component\n    if (!Ctor.cid) {\n      if (Ctor.resolved) {\n        Ctor = Ctor.resolved;\n      } else {\n        Ctor = resolveAsyncComponent(Ctor, baseCtor, function () {\n          // it's ok to queue this on every render because\n          // $forceUpdate is buffered by the scheduler.\n          context.$forceUpdate();\n        });\n        if (!Ctor) {\n          // return nothing if this is indeed an async component\n          // wait for the callback to trigger parent update.\n          return;\n        }\n      }\n    }\n\n    // resolve constructor options in case global mixins are applied after\n    // component constructor creation\n    resolveConstructorOptions(Ctor);\n\n    data = data || {};\n\n    // extract props\n    var propsData = extractProps(data, Ctor\n\n    // functional component\n    );if (Ctor.options.functional) {\n      return createFunctionalComponent(Ctor, propsData, data, context, children);\n    }\n\n    // extract listeners, since these needs to be treated as\n    // child component listeners instead of DOM listeners\n    var listeners = data.on;\n    // replace with listeners with .native modifier\n    data.on = data.nativeOn;\n\n    if (Ctor.options.abstract) {\n      // abstract components do not keep anything\n      // other than props & listeners\n      data = {};\n    }\n\n    // merge component management hooks onto the placeholder node\n    mergeHooks(data\n\n    // return a placeholder vnode\n    );var name = Ctor.options.name || tag;\n    var vnode = new VNode('vue-component-' + Ctor.cid + (name ? '-' + name : ''), data, undefined, undefined, undefined, context, { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children });\n    return vnode;\n  }\n\n  function createFunctionalComponent(Ctor, propsData, data, context, children) {\n    var props = {};\n    var propOptions = Ctor.options.props;\n    if (propOptions) {\n      for (var key in propOptions) {\n        props[key] = validateProp(key, propOptions, propsData);\n      }\n    }\n    // ensure the createElement function in functional components\n    // gets a unique context - this is necessary for correct named slot check\n    var _context = Object.create(context);\n    var h = function (a, b, c, d) {\n      return createElement(_context, a, b, c, d, true);\n    };\n    var vnode = Ctor.options.render.call(null, h, {\n      props: props,\n      data: data,\n      parent: context,\n      children: children,\n      slots: function () {\n        return resolveSlots(children, context);\n      }\n    });\n    if (vnode instanceof VNode) {\n      vnode.functionalContext = context;\n      if (data.slot) {\n        (vnode.data || (vnode.data = {})).slot = data.slot;\n      }\n    }\n    return vnode;\n  }\n\n  function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm, refElm) {\n    var vnodeComponentOptions = vnode.componentOptions;\n    var options = {\n      _isComponent: true,\n      parent: parent,\n      propsData: vnodeComponentOptions.propsData,\n      _componentTag: vnodeComponentOptions.tag,\n      _parentVnode: vnode,\n      _parentListeners: vnodeComponentOptions.listeners,\n      _renderChildren: vnodeComponentOptions.children,\n      _parentElm: parentElm || null,\n      _refElm: refElm || null\n      // check inline-template render functions\n    };var inlineTemplate = vnode.data.inlineTemplate;\n    if (inlineTemplate) {\n      options.render = inlineTemplate.render;\n      options.staticRenderFns = inlineTemplate.staticRenderFns;\n    }\n    return new vnodeComponentOptions.Ctor(options);\n  }\n\n  function init(vnode, hydrating, parentElm, refElm) {\n    if (!vnode.child || vnode.child._isDestroyed) {\n      var child = vnode.child = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      prepatch(mountedNode, mountedNode);\n    }\n  }\n\n  function prepatch(oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.child = oldVnode.child;\n    child._updateFromParent(options.propsData, // updated props\n    options.listeners, // updated listeners\n    vnode, // new parent vnode\n    options.children // new children\n    );\n  }\n\n  function insert(vnode) {\n    if (!vnode.child._isMounted) {\n      vnode.child._isMounted = true;\n      callHook(vnode.child, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      vnode.child._inactive = false;\n      callHook(vnode.child, 'activated');\n    }\n  }\n\n  function destroy$1(vnode) {\n    if (!vnode.child._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        vnode.child.$destroy();\n      } else {\n        vnode.child._inactive = true;\n        callHook(vnode.child, 'deactivated');\n      }\n    }\n  }\n\n  function resolveAsyncComponent(factory, baseCtor, cb) {\n    if (factory.requested) {\n      // pool callbacks\n      factory.pendingCallbacks.push(cb);\n    } else {\n      factory.requested = true;\n      var cbs = factory.pendingCallbacks = [cb];\n      var sync = true;\n\n      var resolve = function (res) {\n        if (isObject(res)) {\n          res = baseCtor.extend(res);\n        }\n        // cache resolved\n        factory.resolved = res;\n        // invoke callbacks only if this is not a synchronous resolve\n        // (async resolves are shimmed as synchronous during SSR)\n        if (!sync) {\n          for (var i = 0, l = cbs.length; i < l; i++) {\n            cbs[i](res);\n          }\n        }\n      };\n\n      var reject = function (reason) {\n        'development' !== 'production' && warn('Failed to resolve async component: ' + String(factory) + (reason ? '\\nReason: ' + reason : ''));\n      };\n\n      var res = factory(resolve, reject\n\n      // handle promise\n      );if (res && typeof res.then === 'function' && !factory.resolved) {\n        res.then(resolve, reject);\n      }\n\n      sync = false;\n      // return in case resolved synchronously\n      return factory.resolved;\n    }\n  }\n\n  function extractProps(data, Ctor) {\n    // we are only extracting raw values here.\n    // validation and default values are handled in the child\n    // component itself.\n    var propOptions = Ctor.options.props;\n    if (!propOptions) {\n      return;\n    }\n    var res = {};\n    var attrs = data.attrs;\n    var props = data.props;\n    var domProps = data.domProps;\n    if (attrs || props || domProps) {\n      for (var key in propOptions) {\n        var altKey = hyphenate(key);\n        checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey) || checkProp(res, domProps, key, altKey);\n      }\n    }\n    return res;\n  }\n\n  function checkProp(res, hash, key, altKey, preserve) {\n    if (hash) {\n      if (hasOwn(hash, key)) {\n        res[key] = hash[key];\n        if (!preserve) {\n          delete hash[key];\n        }\n        return true;\n      } else if (hasOwn(hash, altKey)) {\n        res[key] = hash[altKey];\n        if (!preserve) {\n          delete hash[altKey];\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function mergeHooks(data) {\n    if (!data.hook) {\n      data.hook = {};\n    }\n    for (var i = 0; i < hooksToMerge.length; i++) {\n      var key = hooksToMerge[i];\n      var fromParent = data.hook[key];\n      var ours = hooks[key];\n      data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n    }\n  }\n\n  function mergeHook$1(one, two) {\n    return function (a, b, c, d) {\n      one(a, b, c, d);\n      two(a, b, c, d);\n    };\n  }\n\n  /*  */\n\n  var SIMPLE_NORMALIZE = 1;\n  var ALWAYS_NORMALIZE = 2;\n\n  // wrapper function for providing a more flexible interface\n  // without getting yelled at by flow\n  function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {\n    if (Array.isArray(data) || isPrimitive(data)) {\n      normalizationType = children;\n      children = data;\n      data = undefined;\n    }\n    if (alwaysNormalize) {\n      normalizationType = ALWAYS_NORMALIZE;\n    }\n    return _createElement(context, tag, data, children, normalizationType);\n  }\n\n  function _createElement(context, tag, data, children, normalizationType) {\n    if (data && data.__ob__) {\n      'development' !== 'production' && warn('Avoid using observed data object as vnode data: ' + JSON.stringify(data) + '\\n' + 'Always create fresh vnode data objects in each render!', context);\n      return createEmptyVNode();\n    }\n    if (!tag) {\n      // in case of component :is set to falsy value\n      return createEmptyVNode();\n    }\n    // support single function children as default scoped slot\n    if (Array.isArray(children) && typeof children[0] === 'function') {\n      data = data || {};\n      data.scopedSlots = { default: children[0] };\n      children.length = 0;\n    }\n    if (normalizationType === ALWAYS_NORMALIZE) {\n      children = normalizeChildren(children);\n    } else if (normalizationType === SIMPLE_NORMALIZE) {\n      children = simpleNormalizeChildren(children);\n    }\n    var vnode, ns;\n    if (typeof tag === 'string') {\n      var Ctor;\n      ns = config.getTagNamespace(tag);\n      if (config.isReservedTag(tag)) {\n        // platform built-in elements\n        vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);\n      } else if (Ctor = resolveAsset(context.$options, 'components', tag)) {\n        // component\n        vnode = createComponent(Ctor, data, context, children, tag);\n      } else {\n        // unknown or unlisted namespaced elements\n        // check at runtime because it may get assigned a namespace when its\n        // parent normalizes children\n        vnode = new VNode(tag, data, children, undefined, undefined, context);\n      }\n    } else {\n      // direct component options / constructor\n      vnode = createComponent(tag, data, context, children);\n    }\n    if (vnode) {\n      if (ns) {\n        applyNS(vnode, ns);\n      }\n      return vnode;\n    } else {\n      return createEmptyVNode();\n    }\n  }\n\n  function applyNS(vnode, ns) {\n    vnode.ns = ns;\n    if (vnode.tag === 'foreignObject') {\n      // use default namespace inside foreignObject\n      return;\n    }\n    if (vnode.children) {\n      for (var i = 0, l = vnode.children.length; i < l; i++) {\n        var child = vnode.children[i];\n        if (child.tag && !child.ns) {\n          applyNS(child, ns);\n        }\n      }\n    }\n  }\n\n  /*  */\n\n  function initRender(vm) {\n    vm.$vnode = null; // the placeholder node in parent tree\n    vm._vnode = null; // the root of the child tree\n    vm._staticTrees = null;\n    var parentVnode = vm.$options._parentVnode;\n    var renderContext = parentVnode && parentVnode.context;\n    vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n    vm.$scopedSlots = {};\n    // bind the createElement fn to this instance\n    // so that we get proper render context inside it.\n    // args order: tag, data, children, normalizationType, alwaysNormalize\n    // internal version is used by render functions compiled from templates\n    vm._c = function (a, b, c, d) {\n      return createElement(vm, a, b, c, d, false);\n    };\n    // normalization is always applied for the public version, used in\n    // user-written render functions.\n    vm.$createElement = function (a, b, c, d) {\n      return createElement(vm, a, b, c, d, true);\n    };\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  }\n\n  function renderMixin(Vue) {\n    Vue.prototype.$nextTick = function (fn) {\n      return nextTick(fn, this);\n    };\n\n    Vue.prototype._render = function () {\n      var vm = this;\n      var ref = vm.$options;\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      var _parentVnode = ref._parentVnode;\n\n      if (vm._isMounted) {\n        // clone slot nodes on re-renders\n        for (var key in vm.$slots) {\n          vm.$slots[key] = cloneVNodes(vm.$slots[key]);\n        }\n      }\n\n      if (_parentVnode && _parentVnode.data.scopedSlots) {\n        vm.$scopedSlots = _parentVnode.data.scopedSlots;\n      }\n\n      if (staticRenderFns && !vm._staticTrees) {\n        vm._staticTrees = [];\n      }\n      // set parent vnode. this allows render functions to have access\n      // to the data on the placeholder node.\n      vm.$vnode = _parentVnode;\n      // render self\n      var vnode;\n      try {\n        vnode = render.call(vm._renderProxy, vm.$createElement);\n      } catch (e) {\n        /* istanbul ignore else */\n        if (config.errorHandler) {\n          config.errorHandler.call(null, e, vm);\n        } else {\n          {\n            warn('Error when rendering ' + formatComponentName(vm) + ':');\n          }\n          throw e;\n        }\n        // return previous vnode to prevent render error causing blank component\n        vnode = vm._vnode;\n      }\n      // return empty vnode in case the render function errored out\n      if (!(vnode instanceof VNode)) {\n        if ('development' !== 'production' && Array.isArray(vnode)) {\n          warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);\n        }\n        vnode = createEmptyVNode();\n      }\n      // set parent\n      vnode.parent = _parentVnode;\n      return vnode;\n    };\n\n    // toString for mustaches\n    Vue.prototype._s = _toString;\n    // convert text to vnode\n    Vue.prototype._v = createTextVNode;\n    // number conversion\n    Vue.prototype._n = toNumber;\n    // empty vnode\n    Vue.prototype._e = createEmptyVNode;\n    // loose equal\n    Vue.prototype._q = looseEqual;\n    // loose indexOf\n    Vue.prototype._i = looseIndexOf;\n\n    // render static tree by index\n    Vue.prototype._m = function renderStatic(index, isInFor) {\n      var tree = this._staticTrees[index];\n      // if has already-rendered static tree and not inside v-for,\n      // we can reuse the same tree by doing a shallow clone.\n      if (tree && !isInFor) {\n        return Array.isArray(tree) ? cloneVNodes(tree) : cloneVNode(tree);\n      }\n      // otherwise, render a fresh tree.\n      tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy);\n      markStatic(tree, '__static__' + index, false);\n      return tree;\n    };\n\n    // mark node as static (v-once)\n    Vue.prototype._o = function markOnce(tree, index, key) {\n      markStatic(tree, '__once__' + index + (key ? '_' + key : ''), true);\n      return tree;\n    };\n\n    function markStatic(tree, key, isOnce) {\n      if (Array.isArray(tree)) {\n        for (var i = 0; i < tree.length; i++) {\n          if (tree[i] && typeof tree[i] !== 'string') {\n            markStaticNode(tree[i], key + '_' + i, isOnce);\n          }\n        }\n      } else {\n        markStaticNode(tree, key, isOnce);\n      }\n    }\n\n    function markStaticNode(node, key, isOnce) {\n      node.isStatic = true;\n      node.key = key;\n      node.isOnce = isOnce;\n    }\n\n    // filter resolution helper\n    Vue.prototype._f = function resolveFilter(id) {\n      return resolveAsset(this.$options, 'filters', id, true) || identity;\n    };\n\n    // render v-for\n    Vue.prototype._l = function renderList(val, render) {\n      var ret, i, l, keys, key;\n      if (Array.isArray(val) || typeof val === 'string') {\n        ret = new Array(val.length);\n        for (i = 0, l = val.length; i < l; i++) {\n          ret[i] = render(val[i], i);\n        }\n      } else if (typeof val === 'number') {\n        ret = new Array(val);\n        for (i = 0; i < val; i++) {\n          ret[i] = render(i + 1, i);\n        }\n      } else if (isObject(val)) {\n        keys = Object.keys(val);\n        ret = new Array(keys.length);\n        for (i = 0, l = keys.length; i < l; i++) {\n          key = keys[i];\n          ret[i] = render(val[key], key, i);\n        }\n      }\n      return ret;\n    };\n\n    // renderSlot\n    Vue.prototype._t = function (name, fallback, props, bindObject) {\n      var scopedSlotFn = this.$scopedSlots[name];\n      if (scopedSlotFn) {\n        // scoped slot\n        props = props || {};\n        if (bindObject) {\n          extend(props, bindObject);\n        }\n        return scopedSlotFn(props) || fallback;\n      } else {\n        var slotNodes = this.$slots[name];\n        // warn duplicate slot usage\n        if (slotNodes && 'development' !== 'production') {\n          slotNodes._rendered && warn('Duplicate presence of slot \"' + name + '\" found in the same render tree ' + '- this will likely cause render errors.', this);\n          slotNodes._rendered = true;\n        }\n        return slotNodes || fallback;\n      }\n    };\n\n    // apply v-bind object\n    Vue.prototype._b = function bindProps(data, tag, value, asProp) {\n      if (value) {\n        if (!isObject(value)) {\n          'development' !== 'production' && warn('v-bind without argument expects an Object or Array value', this);\n        } else {\n          if (Array.isArray(value)) {\n            value = toObject(value);\n          }\n          for (var key in value) {\n            if (key === 'class' || key === 'style') {\n              data[key] = value[key];\n            } else {\n              var hash = asProp || config.mustUseProp(tag, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});\n              hash[key] = value[key];\n            }\n          }\n        }\n      }\n      return data;\n    };\n\n    // check v-on keyCodes\n    Vue.prototype._k = function checkKeyCodes(eventKeyCode, key, builtInAlias) {\n      var keyCodes = config.keyCodes[key] || builtInAlias;\n      if (Array.isArray(keyCodes)) {\n        return keyCodes.indexOf(eventKeyCode) === -1;\n      } else {\n        return keyCodes !== eventKeyCode;\n      }\n    };\n  }\n\n  function resolveSlots(children, context) {\n    var slots = {};\n    if (!children) {\n      return slots;\n    }\n    var defaultSlot = [];\n    var name, child;\n    for (var i = 0, l = children.length; i < l; i++) {\n      child = children[i];\n      // named slots should only be respected if the vnode was rendered in the\n      // same context.\n      if ((child.context === context || child.functionalContext === context) && child.data && (name = child.data.slot)) {\n        var slot = slots[name] || (slots[name] = []);\n        if (child.tag === 'template') {\n          slot.push.apply(slot, child.children);\n        } else {\n          slot.push(child);\n        }\n      } else {\n        defaultSlot.push(child);\n      }\n    }\n    // ignore single whitespace\n    if (defaultSlot.length && !(defaultSlot.length === 1 && (defaultSlot[0].text === ' ' || defaultSlot[0].isComment))) {\n      slots.default = defaultSlot;\n    }\n    return slots;\n  }\n\n  /*  */\n\n  var uid = 0;\n\n  function initMixin(Vue) {\n    Vue.prototype._init = function (options) {\n      var vm = this;\n      // a uid\n      vm._uid = uid++;\n      // a flag to avoid this being observed\n      vm._isVue = true;\n      // merge options\n      if (options && options._isComponent) {\n        // optimize internal component instantiation\n        // since dynamic options merging is pretty slow, and none of the\n        // internal component options needs special treatment.\n        initInternalComponent(vm, options);\n      } else {\n        vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);\n      }\n      /* istanbul ignore else */\n      {\n        initProxy(vm);\n      }\n      // expose real self\n      vm._self = vm;\n      initLifecycle(vm);\n      initEvents(vm);\n      callHook(vm, 'beforeCreate');\n      initState(vm);\n      callHook(vm, 'created');\n      initRender(vm);\n    };\n  }\n\n  function initInternalComponent(vm, options) {\n    var opts = vm.$options = Object.create(vm.constructor.options\n    // doing this because it's faster than dynamic enumeration.\n    );opts.parent = options.parent;\n    opts.propsData = options.propsData;\n    opts._parentVnode = options._parentVnode;\n    opts._parentListeners = options._parentListeners;\n    opts._renderChildren = options._renderChildren;\n    opts._componentTag = options._componentTag;\n    opts._parentElm = options._parentElm;\n    opts._refElm = options._refElm;\n    if (options.render) {\n      opts.render = options.render;\n      opts.staticRenderFns = options.staticRenderFns;\n    }\n  }\n\n  function resolveConstructorOptions(Ctor) {\n    var options = Ctor.options;\n    if (Ctor.super) {\n      var superOptions = Ctor.super.options;\n      var cachedSuperOptions = Ctor.superOptions;\n      var extendOptions = Ctor.extendOptions;\n      if (superOptions !== cachedSuperOptions) {\n        // super option changed\n        Ctor.superOptions = superOptions;\n        extendOptions.render = options.render;\n        extendOptions.staticRenderFns = options.staticRenderFns;\n        extendOptions._scopeId = options._scopeId;\n        options = Ctor.options = mergeOptions(superOptions, extendOptions);\n        if (options.name) {\n          options.components[options.name] = Ctor;\n        }\n      }\n    }\n    return options;\n  }\n\n  function Vue$3(options) {\n    if ('development' !== 'production' && !(this instanceof Vue$3)) {\n      warn('Vue is a constructor and should be called with the `new` keyword');\n    }\n    this._init(options);\n  }\n\n  initMixin(Vue$3);\n  stateMixin(Vue$3);\n  eventsMixin(Vue$3);\n  lifecycleMixin(Vue$3);\n  renderMixin(Vue$3\n\n  /*  */\n\n  );function initUse(Vue) {\n    Vue.use = function (plugin) {\n      /* istanbul ignore if */\n      if (plugin.installed) {\n        return;\n      }\n      // additional parameters\n      var args = toArray(arguments, 1);\n      args.unshift(this);\n      if (typeof plugin.install === 'function') {\n        plugin.install.apply(plugin, args);\n      } else {\n        plugin.apply(null, args);\n      }\n      plugin.installed = true;\n      return this;\n    };\n  }\n\n  /*  */\n\n  function initMixin$1(Vue) {\n    Vue.mixin = function (mixin) {\n      this.options = mergeOptions(this.options, mixin);\n    };\n  }\n\n  /*  */\n\n  function initExtend(Vue) {\n    /**\n     * Each instance constructor, including Vue, has a unique\n     * cid. This enables us to create wrapped \"child\n     * constructors\" for prototypal inheritance and cache them.\n     */\n    Vue.cid = 0;\n    var cid = 1;\n\n    /**\n     * Class inheritance\n     */\n    Vue.extend = function (extendOptions) {\n      extendOptions = extendOptions || {};\n      var Super = this;\n      var SuperId = Super.cid;\n      var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n      if (cachedCtors[SuperId]) {\n        return cachedCtors[SuperId];\n      }\n      var name = extendOptions.name || Super.options.name;\n      {\n        if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n          warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');\n        }\n      }\n      var Sub = function VueComponent(options) {\n        this._init(options);\n      };\n      Sub.prototype = Object.create(Super.prototype);\n      Sub.prototype.constructor = Sub;\n      Sub.cid = cid++;\n      Sub.options = mergeOptions(Super.options, extendOptions);\n      Sub['super'] = Super;\n      // allow further extension/mixin/plugin usage\n      Sub.extend = Super.extend;\n      Sub.mixin = Super.mixin;\n      Sub.use = Super.use;\n      // create asset registers, so extended classes\n      // can have their private assets too.\n      config._assetTypes.forEach(function (type) {\n        Sub[type] = Super[type];\n      }\n      // enable recursive self-lookup\n      );if (name) {\n        Sub.options.components[name] = Sub;\n      }\n      // keep a reference to the super options at extension time.\n      // later at instantiation we can check if Super's options have\n      // been updated.\n      Sub.superOptions = Super.options;\n      Sub.extendOptions = extendOptions;\n      // cache constructor\n      cachedCtors[SuperId] = Sub;\n      return Sub;\n    };\n  }\n\n  /*  */\n\n  function initAssetRegisters(Vue) {\n    /**\n     * Create asset registration methods.\n     */\n    config._assetTypes.forEach(function (type) {\n      Vue[type] = function (id, definition) {\n        if (!definition) {\n          return this.options[type + 's'][id];\n        } else {\n          /* istanbul ignore if */\n          {\n            if (type === 'component' && config.isReservedTag(id)) {\n              warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\n            }\n          }\n          if (type === 'component' && isPlainObject(definition)) {\n            definition.name = definition.name || id;\n            definition = this.options._base.extend(definition);\n          }\n          if (type === 'directive' && typeof definition === 'function') {\n            definition = { bind: definition, update: definition };\n          }\n          this.options[type + 's'][id] = definition;\n          return definition;\n        }\n      };\n    });\n  }\n\n  /*  */\n\n  var patternTypes = [String, RegExp];\n\n  function matches(pattern, name) {\n    if (typeof pattern === 'string') {\n      return pattern.split(',').indexOf(name) > -1;\n    } else {\n      return pattern.test(name);\n    }\n  }\n\n  var KeepAlive = {\n    name: 'keep-alive',\n    abstract: true,\n    props: {\n      include: patternTypes,\n      exclude: patternTypes\n    },\n    created: function created() {\n      this.cache = Object.create(null);\n    },\n    render: function render() {\n      var vnode = getFirstComponentChild(this.$slots.default);\n      if (vnode && vnode.componentOptions) {\n        var opts = vnode.componentOptions;\n        // check pattern\n        var name = opts.Ctor.options.name || opts.tag;\n        if (name && (this.include && !matches(this.include, name) || this.exclude && matches(this.exclude, name))) {\n          return vnode;\n        }\n        var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? opts.Ctor.cid + (opts.tag ? '::' + opts.tag : '') : vnode.key;\n        if (this.cache[key]) {\n          vnode.child = this.cache[key].child;\n        } else {\n          this.cache[key] = vnode;\n        }\n        vnode.data.keepAlive = true;\n      }\n      return vnode;\n    },\n    destroyed: function destroyed() {\n      var this$1 = this;\n\n      for (var key in this.cache) {\n        var vnode = this$1.cache[key];\n        callHook(vnode.child, 'deactivated');\n        vnode.child.$destroy();\n      }\n    }\n  };\n\n  var builtInComponents = {\n    KeepAlive: KeepAlive\n\n    /*  */\n\n  };function initGlobalAPI(Vue) {\n    // config\n    var configDef = {};\n    configDef.get = function () {\n      return config;\n    };\n    {\n      configDef.set = function () {\n        warn('Do not replace the Vue.config object, set individual fields instead.');\n      };\n    }\n    Object.defineProperty(Vue, 'config', configDef);\n    Vue.util = util;\n    Vue.set = set$1;\n    Vue.delete = del;\n    Vue.nextTick = nextTick;\n\n    Vue.options = Object.create(null);\n    config._assetTypes.forEach(function (type) {\n      Vue.options[type + 's'] = Object.create(null);\n    }\n\n    // this is used to identify the \"base\" constructor to extend all plain-object\n    // components with in Weex's multi-instance scenarios.\n    );Vue.options._base = Vue;\n\n    extend(Vue.options.components, builtInComponents);\n\n    initUse(Vue);\n    initMixin$1(Vue);\n    initExtend(Vue);\n    initAssetRegisters(Vue);\n  }\n\n  initGlobalAPI(Vue$3);\n\n  Object.defineProperty(Vue$3.prototype, '$isServer', {\n    get: isServerRendering\n  });\n\n  Vue$3.version = '2.1.8';\n\n  /*  */\n\n  // attributes that should be using props for binding\n  var acceptValue = makeMap('input,textarea,option,select');\n  var mustUseProp = function (tag, attr) {\n    return attr === 'value' && acceptValue(tag) || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';\n  };\n\n  var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\n  var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');\n\n  var xlinkNS = 'http://www.w3.org/1999/xlink';\n\n  var isXlink = function (name) {\n    return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';\n  };\n\n  var getXlinkProp = function (name) {\n    return isXlink(name) ? name.slice(6, name.length) : '';\n  };\n\n  var isFalsyAttrValue = function (val) {\n    return val == null || val === false;\n  };\n\n  /*  */\n\n  function genClassForVnode(vnode) {\n    var data = vnode.data;\n    var parentNode = vnode;\n    var childNode = vnode;\n    while (childNode.child) {\n      childNode = childNode.child._vnode;\n      if (childNode.data) {\n        data = mergeClassData(childNode.data, data);\n      }\n    }\n    while (parentNode = parentNode.parent) {\n      if (parentNode.data) {\n        data = mergeClassData(data, parentNode.data);\n      }\n    }\n    return genClassFromData(data);\n  }\n\n  function mergeClassData(child, parent) {\n    return {\n      staticClass: concat(child.staticClass, parent.staticClass),\n      class: child.class ? [child.class, parent.class] : parent.class\n    };\n  }\n\n  function genClassFromData(data) {\n    var dynamicClass = data.class;\n    var staticClass = data.staticClass;\n    if (staticClass || dynamicClass) {\n      return concat(staticClass, stringifyClass(dynamicClass));\n    }\n    /* istanbul ignore next */\n    return '';\n  }\n\n  function concat(a, b) {\n    return a ? b ? a + ' ' + b : a : b || '';\n  }\n\n  function stringifyClass(value) {\n    var res = '';\n    if (!value) {\n      return res;\n    }\n    if (typeof value === 'string') {\n      return value;\n    }\n    if (Array.isArray(value)) {\n      var stringified;\n      for (var i = 0, l = value.length; i < l; i++) {\n        if (value[i]) {\n          if (stringified = stringifyClass(value[i])) {\n            res += stringified + ' ';\n          }\n        }\n      }\n      return res.slice(0, -1);\n    }\n    if (isObject(value)) {\n      for (var key in value) {\n        if (value[key]) {\n          res += key + ' ';\n        }\n      }\n      return res.slice(0, -1);\n    }\n    /* istanbul ignore next */\n    return res;\n  }\n\n  /*  */\n\n  var namespaceMap = {\n    svg: 'http://www.w3.org/2000/svg',\n    math: 'http://www.w3.org/1998/Math/MathML'\n  };\n\n  var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template'\n\n  // this map is intentionally selective, only covering SVG elements that may\n  // contain child elements.\n  );var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,' + 'font-face,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);\n\n  var isPreTag = function (tag) {\n    return tag === 'pre';\n  };\n\n  var isReservedTag = function (tag) {\n    return isHTMLTag(tag) || isSVG(tag);\n  };\n\n  function getTagNamespace(tag) {\n    if (isSVG(tag)) {\n      return 'svg';\n    }\n    // basic support for MathML\n    // note it doesn't support other MathML elements being component roots\n    if (tag === 'math') {\n      return 'math';\n    }\n  }\n\n  var unknownElementCache = Object.create(null);\n  function isUnknownElement(tag) {\n    /* istanbul ignore if */\n    if (!inBrowser) {\n      return true;\n    }\n    if (isReservedTag(tag)) {\n      return false;\n    }\n    tag = tag.toLowerCase\n    /* istanbul ignore if */\n    ();if (unknownElementCache[tag] != null) {\n      return unknownElementCache[tag];\n    }\n    var el = document.createElement(tag);\n    if (tag.indexOf('-') > -1) {\n      // http://stackoverflow.com/a/28210364/1070244\n      return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\n    } else {\n      return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());\n    }\n  }\n\n  /*  */\n\n  /**\n   * Query an element selector if it's not an element already.\n   */\n  function query(el) {\n    if (typeof el === 'string') {\n      var selector = el;\n      el = document.querySelector(el);\n      if (!el) {\n        'development' !== 'production' && warn('Cannot find element: ' + selector);\n        return document.createElement('div');\n      }\n    }\n    return el;\n  }\n\n  /*  */\n\n  function createElement$1(tagName, vnode) {\n    var elm = document.createElement(tagName);\n    if (tagName !== 'select') {\n      return elm;\n    }\n    if (vnode.data && vnode.data.attrs && 'multiple' in vnode.data.attrs) {\n      elm.setAttribute('multiple', 'multiple');\n    }\n    return elm;\n  }\n\n  function createElementNS(namespace, tagName) {\n    return document.createElementNS(namespaceMap[namespace], tagName);\n  }\n\n  function createTextNode(text) {\n    return document.createTextNode(text);\n  }\n\n  function createComment(text) {\n    return document.createComment(text);\n  }\n\n  function insertBefore(parentNode, newNode, referenceNode) {\n    parentNode.insertBefore(newNode, referenceNode);\n  }\n\n  function removeChild(node, child) {\n    node.removeChild(child);\n  }\n\n  function appendChild(node, child) {\n    node.appendChild(child);\n  }\n\n  function parentNode(node) {\n    return node.parentNode;\n  }\n\n  function nextSibling(node) {\n    return node.nextSibling;\n  }\n\n  function tagName(node) {\n    return node.tagName;\n  }\n\n  function setTextContent(node, text) {\n    node.textContent = text;\n  }\n\n  function setAttribute(node, key, val) {\n    node.setAttribute(key, val);\n  }\n\n  var nodeOps = Object.freeze({\n    createElement: createElement$1,\n    createElementNS: createElementNS,\n    createTextNode: createTextNode,\n    createComment: createComment,\n    insertBefore: insertBefore,\n    removeChild: removeChild,\n    appendChild: appendChild,\n    parentNode: parentNode,\n    nextSibling: nextSibling,\n    tagName: tagName,\n    setTextContent: setTextContent,\n    setAttribute: setAttribute\n  }\n\n  /*  */\n\n  );var ref = {\n    create: function create(_, vnode) {\n      registerRef(vnode);\n    },\n    update: function update(oldVnode, vnode) {\n      if (oldVnode.data.ref !== vnode.data.ref) {\n        registerRef(oldVnode, true);\n        registerRef(vnode);\n      }\n    },\n    destroy: function destroy(vnode) {\n      registerRef(vnode, true);\n    }\n  };\n\n  function registerRef(vnode, isRemoval) {\n    var key = vnode.data.ref;\n    if (!key) {\n      return;\n    }\n\n    var vm = vnode.context;\n    var ref = vnode.child || vnode.elm;\n    var refs = vm.$refs;\n    if (isRemoval) {\n      if (Array.isArray(refs[key])) {\n        remove$1(refs[key], ref);\n      } else if (refs[key] === ref) {\n        refs[key] = undefined;\n      }\n    } else {\n      if (vnode.data.refInFor) {\n        if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\n          refs[key].push(ref);\n        } else {\n          refs[key] = [ref];\n        }\n      } else {\n        refs[key] = ref;\n      }\n    }\n  }\n\n  /**\n   * Virtual DOM patching algorithm based on Snabbdom by\n   * Simon Friis Vindum (@paldepind)\n   * Licensed under the MIT License\n   * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n   *\n   * modified by Evan You (@yyx990803)\n   *\n  \n  /*\n   * Not type-checking this because this file is perf-critical and the cost\n   * of making flow understand it is not worth it.\n   */\n\n  var emptyNode = new VNode('', {}, []);\n\n  var hooks$1 = ['create', 'activate', 'update', 'remove', 'destroy'];\n\n  function isUndef(s) {\n    return s == null;\n  }\n\n  function isDef(s) {\n    return s != null;\n  }\n\n  function sameVnode(vnode1, vnode2) {\n    return vnode1.key === vnode2.key && vnode1.tag === vnode2.tag && vnode1.isComment === vnode2.isComment && !vnode1.data === !vnode2.data;\n  }\n\n  function createKeyToOldIdx(children, beginIdx, endIdx) {\n    var i, key;\n    var map = {};\n    for (i = beginIdx; i <= endIdx; ++i) {\n      key = children[i].key;\n      if (isDef(key)) {\n        map[key] = i;\n      }\n    }\n    return map;\n  }\n\n  function createPatchFunction(backend) {\n    var i, j;\n    var cbs = {};\n\n    var modules = backend.modules;\n    var nodeOps = backend.nodeOps;\n\n    for (i = 0; i < hooks$1.length; ++i) {\n      cbs[hooks$1[i]] = [];\n      for (j = 0; j < modules.length; ++j) {\n        if (modules[j][hooks$1[i]] !== undefined) {\n          cbs[hooks$1[i]].push(modules[j][hooks$1[i]]);\n        }\n      }\n    }\n\n    function emptyNodeAt(elm) {\n      return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);\n    }\n\n    function createRmCb(childElm, listeners) {\n      function remove$$1() {\n        if (--remove$$1.listeners === 0) {\n          removeNode(childElm);\n        }\n      }\n      remove$$1.listeners = listeners;\n      return remove$$1;\n    }\n\n    function removeNode(el) {\n      var parent = nodeOps.parentNode(el\n      // element may have already been removed due to v-html / v-text\n      );if (parent) {\n        nodeOps.removeChild(parent, el);\n      }\n    }\n\n    var inPre = 0;\n    function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n      vnode.isRootInsert = !nested; // for transition enter check\n      if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n        return;\n      }\n\n      var data = vnode.data;\n      var children = vnode.children;\n      var tag = vnode.tag;\n      if (isDef(tag)) {\n        {\n          if (data && data.pre) {\n            inPre++;\n          }\n          if (!inPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) && config.isUnknownElement(tag)) {\n            warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.', vnode.context);\n          }\n        }\n        vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);\n        setScope(vnode\n\n        /* istanbul ignore if */\n        );{\n          createChildren(vnode, children, insertedVnodeQueue);\n          if (isDef(data)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n          }\n          insert(parentElm, vnode.elm, refElm);\n        }\n\n        if ('development' !== 'production' && data && data.pre) {\n          inPre--;\n        }\n      } else if (vnode.isComment) {\n        vnode.elm = nodeOps.createComment(vnode.text);\n        insert(parentElm, vnode.elm, refElm);\n      } else {\n        vnode.elm = nodeOps.createTextNode(vnode.text);\n        insert(parentElm, vnode.elm, refElm);\n      }\n    }\n\n    function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\n      var i = vnode.data;\n      if (isDef(i)) {\n        var isReactivated = isDef(vnode.child) && i.keepAlive;\n        if (isDef(i = i.hook) && isDef(i = i.init)) {\n          i(vnode, false /* hydrating */, parentElm, refElm);\n        }\n        // after calling the init hook, if the vnode is a child component\n        // it should've created a child instance and mounted it. the child\n        // component also has set the placeholder vnode's elm.\n        // in that case we can just return the element and be done.\n        if (isDef(vnode.child)) {\n          initComponent(vnode, insertedVnodeQueue);\n          if (isReactivated) {\n            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n          }\n          return true;\n        }\n      }\n    }\n\n    function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\n      var i;\n      // hack for #4339: a reactivated component with inner transition\n      // does not trigger because the inner node's created hooks are not called\n      // again. It's not ideal to involve module-specific logic in here but\n      // there doesn't seem to be a better way to do it.\n      var innerNode = vnode;\n      while (innerNode.child) {\n        innerNode = innerNode.child._vnode;\n        if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n          for (i = 0; i < cbs.activate.length; ++i) {\n            cbs.activate[i](emptyNode, innerNode);\n          }\n          insertedVnodeQueue.push(innerNode);\n          break;\n        }\n      }\n      // unlike a newly created component,\n      // a reactivated keep-alive component doesn't insert itself\n      insert(parentElm, vnode.elm, refElm);\n    }\n\n    function insert(parent, elm, ref) {\n      if (parent) {\n        if (ref) {\n          nodeOps.insertBefore(parent, elm, ref);\n        } else {\n          nodeOps.appendChild(parent, elm);\n        }\n      }\n    }\n\n    function createChildren(vnode, children, insertedVnodeQueue) {\n      if (Array.isArray(children)) {\n        for (var i = 0; i < children.length; ++i) {\n          createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n        }\n      } else if (isPrimitive(vnode.text)) {\n        nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n      }\n    }\n\n    function isPatchable(vnode) {\n      while (vnode.child) {\n        vnode = vnode.child._vnode;\n      }\n      return isDef(vnode.tag);\n    }\n\n    function invokeCreateHooks(vnode, insertedVnodeQueue) {\n      for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n        cbs.create[i$1](emptyNode, vnode);\n      }\n      i = vnode.data.hook; // Reuse variable\n      if (isDef(i)) {\n        if (i.create) {\n          i.create(emptyNode, vnode);\n        }\n        if (i.insert) {\n          insertedVnodeQueue.push(vnode);\n        }\n      }\n    }\n\n    function initComponent(vnode, insertedVnodeQueue) {\n      if (vnode.data.pendingInsert) {\n        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      }\n      vnode.elm = vnode.child.$el;\n      if (isPatchable(vnode)) {\n        invokeCreateHooks(vnode, insertedVnodeQueue);\n        setScope(vnode);\n      } else {\n        // empty component root.\n        // skip all element-related modules except for ref (#3455)\n        registerRef(vnode\n        // make sure to invoke the insert hook\n        );insertedVnodeQueue.push(vnode);\n      }\n    }\n\n    // set scope id attribute for scoped CSS.\n    // this is implemented as a special case to avoid the overhead\n    // of going through the normal attribute patching process.\n    function setScope(vnode) {\n      var i;\n      if (isDef(i = vnode.context) && isDef(i = i.$options._scopeId)) {\n        nodeOps.setAttribute(vnode.elm, i, '');\n      }\n      if (isDef(i = activeInstance) && i !== vnode.context && isDef(i = i.$options._scopeId)) {\n        nodeOps.setAttribute(vnode.elm, i, '');\n      }\n    }\n\n    function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n      for (; startIdx <= endIdx; ++startIdx) {\n        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n      }\n    }\n\n    function invokeDestroyHook(vnode) {\n      var i, j;\n      var data = vnode.data;\n      if (isDef(data)) {\n        if (isDef(i = data.hook) && isDef(i = i.destroy)) {\n          i(vnode);\n        }\n        for (i = 0; i < cbs.destroy.length; ++i) {\n          cbs.destroy[i](vnode);\n        }\n      }\n      if (isDef(i = vnode.children)) {\n        for (j = 0; j < vnode.children.length; ++j) {\n          invokeDestroyHook(vnode.children[j]);\n        }\n      }\n    }\n\n    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {\n      for (; startIdx <= endIdx; ++startIdx) {\n        var ch = vnodes[startIdx];\n        if (isDef(ch)) {\n          if (isDef(ch.tag)) {\n            removeAndInvokeRemoveHook(ch);\n            invokeDestroyHook(ch);\n          } else {\n            // Text node\n            removeNode(ch.elm);\n          }\n        }\n      }\n    }\n\n    function removeAndInvokeRemoveHook(vnode, rm) {\n      if (rm || isDef(vnode.data)) {\n        var listeners = cbs.remove.length + 1;\n        if (!rm) {\n          // directly removing\n          rm = createRmCb(vnode.elm, listeners);\n        } else {\n          // we have a recursively passed down rm callback\n          // increase the listeners count\n          rm.listeners += listeners;\n        }\n        // recursively invoke hooks on child component root node\n        if (isDef(i = vnode.child) && isDef(i = i._vnode) && isDef(i.data)) {\n          removeAndInvokeRemoveHook(i, rm);\n        }\n        for (i = 0; i < cbs.remove.length; ++i) {\n          cbs.remove[i](vnode, rm);\n        }\n        if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n          i(vnode, rm);\n        } else {\n          rm();\n        }\n      } else {\n        removeNode(vnode.elm);\n      }\n    }\n\n    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n      var oldStartIdx = 0;\n      var newStartIdx = 0;\n      var oldEndIdx = oldCh.length - 1;\n      var oldStartVnode = oldCh[0];\n      var oldEndVnode = oldCh[oldEndIdx];\n      var newEndIdx = newCh.length - 1;\n      var newStartVnode = newCh[0];\n      var newEndVnode = newCh[newEndIdx];\n      var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n      // removeOnly is a special flag used only by <transition-group>\n      // to ensure removed elements stay in correct relative positions\n      // during leaving transitions\n      var canMove = !removeOnly;\n\n      while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (isUndef(oldStartVnode)) {\n          oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n        } else if (isUndef(oldEndVnode)) {\n          oldEndVnode = oldCh[--oldEndIdx];\n        } else if (sameVnode(oldStartVnode, newStartVnode)) {\n          patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n          oldStartVnode = oldCh[++oldStartIdx];\n          newStartVnode = newCh[++newStartIdx];\n        } else if (sameVnode(oldEndVnode, newEndVnode)) {\n          patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n          oldEndVnode = oldCh[--oldEndIdx];\n          newEndVnode = newCh[--newEndIdx];\n        } else if (sameVnode(oldStartVnode, newEndVnode)) {\n          // Vnode moved right\n          patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n          canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n          oldStartVnode = oldCh[++oldStartIdx];\n          newEndVnode = newCh[--newEndIdx];\n        } else if (sameVnode(oldEndVnode, newStartVnode)) {\n          // Vnode moved left\n          patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n          canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n          oldEndVnode = oldCh[--oldEndIdx];\n          newStartVnode = newCh[++newStartIdx];\n        } else {\n          if (isUndef(oldKeyToIdx)) {\n            oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n          }\n          idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\n          if (isUndef(idxInOld)) {\n            // New element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          } else {\n            elmToMove = oldCh[idxInOld];\n            /* istanbul ignore if */\n            if ('development' !== 'production' && !elmToMove) {\n              warn('It seems there are duplicate keys that is causing an update error. ' + 'Make sure each v-for item has a unique key.');\n            }\n            if (sameVnode(elmToMove, newStartVnode)) {\n              patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n              oldCh[idxInOld] = undefined;\n              canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n              newStartVnode = newCh[++newStartIdx];\n            } else {\n              // same key but different element. treat as new element\n              createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n              newStartVnode = newCh[++newStartIdx];\n            }\n          }\n        }\n      }\n      if (oldStartIdx > oldEndIdx) {\n        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n      } else if (newStartIdx > newEndIdx) {\n        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n      }\n    }\n\n    function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n      if (oldVnode === vnode) {\n        return;\n      }\n      // reuse element for static trees.\n      // note we only do this if the vnode is cloned -\n      // if the new node is not cloned it means the render functions have been\n      // reset by the hot-reload-api and we need to do a proper re-render.\n      if (vnode.isStatic && oldVnode.isStatic && vnode.key === oldVnode.key && (vnode.isCloned || vnode.isOnce)) {\n        vnode.elm = oldVnode.elm;\n        vnode.child = oldVnode.child;\n        return;\n      }\n      var i;\n      var data = vnode.data;\n      var hasData = isDef(data);\n      if (hasData && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n        i(oldVnode, vnode);\n      }\n      var elm = vnode.elm = oldVnode.elm;\n      var oldCh = oldVnode.children;\n      var ch = vnode.children;\n      if (hasData && isPatchable(vnode)) {\n        for (i = 0; i < cbs.update.length; ++i) {\n          cbs.update[i](oldVnode, vnode);\n        }\n        if (isDef(i = data.hook) && isDef(i = i.update)) {\n          i(oldVnode, vnode);\n        }\n      }\n      if (isUndef(vnode.text)) {\n        if (isDef(oldCh) && isDef(ch)) {\n          if (oldCh !== ch) {\n            updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);\n          }\n        } else if (isDef(ch)) {\n          if (isDef(oldVnode.text)) {\n            nodeOps.setTextContent(elm, '');\n          }\n          addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n        } else if (isDef(oldCh)) {\n          removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n        } else if (isDef(oldVnode.text)) {\n          nodeOps.setTextContent(elm, '');\n        }\n      } else if (oldVnode.text !== vnode.text) {\n        nodeOps.setTextContent(elm, vnode.text);\n      }\n      if (hasData) {\n        if (isDef(i = data.hook) && isDef(i = i.postpatch)) {\n          i(oldVnode, vnode);\n        }\n      }\n    }\n\n    function invokeInsertHook(vnode, queue, initial) {\n      // delay insert hooks for component root nodes, invoke them after the\n      // element is really inserted\n      if (initial && vnode.parent) {\n        vnode.parent.data.pendingInsert = queue;\n      } else {\n        for (var i = 0; i < queue.length; ++i) {\n          queue[i].data.hook.insert(queue[i]);\n        }\n      }\n    }\n\n    var bailed = false;\n    // list of modules that can skip create hook during hydration because they\n    // are already rendered on the client or has no need for initialization\n    var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key'\n\n    // Note: this is a browser-only function so we can assume elms are DOM nodes.\n    );function hydrate(elm, vnode, insertedVnodeQueue) {\n      {\n        if (!assertNodeMatch(elm, vnode)) {\n          return false;\n        }\n      }\n      vnode.elm = elm;\n      var tag = vnode.tag;\n      var data = vnode.data;\n      var children = vnode.children;\n      if (isDef(data)) {\n        if (isDef(i = data.hook) && isDef(i = i.init)) {\n          i(vnode, true /* hydrating */);\n        }\n        if (isDef(i = vnode.child)) {\n          // child component. it should have hydrated its own tree.\n          initComponent(vnode, insertedVnodeQueue);\n          return true;\n        }\n      }\n      if (isDef(tag)) {\n        if (isDef(children)) {\n          // empty element, allow client to pick up and populate children\n          if (!elm.hasChildNodes()) {\n            createChildren(vnode, children, insertedVnodeQueue);\n          } else {\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n                childrenMatch = false;\n                break;\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              if ('development' !== 'production' && typeof console !== 'undefined' && !bailed) {\n                bailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false;\n            }\n          }\n        }\n        if (isDef(data)) {\n          for (var key in data) {\n            if (!isRenderedModule(key)) {\n              invokeCreateHooks(vnode, insertedVnodeQueue);\n              break;\n            }\n          }\n        }\n      } else if (elm.data !== vnode.text) {\n        elm.data = vnode.text;\n      }\n      return true;\n    }\n\n    function assertNodeMatch(node, vnode) {\n      if (vnode.tag) {\n        return vnode.tag.indexOf('vue-component') === 0 || vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());\n      } else {\n        return node.nodeType === (vnode.isComment ? 8 : 3);\n      }\n    }\n\n    return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n      if (!vnode) {\n        if (oldVnode) {\n          invokeDestroyHook(oldVnode);\n        }\n        return;\n      }\n\n      var elm, parent;\n      var isInitialPatch = false;\n      var insertedVnodeQueue = [];\n\n      if (!oldVnode) {\n        // empty mount (likely as component), create new root element\n        isInitialPatch = true;\n        createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n      } else {\n        var isRealElement = isDef(oldVnode.nodeType);\n        if (!isRealElement && sameVnode(oldVnode, vnode)) {\n          // patch existing root node\n          patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n        } else {\n          if (isRealElement) {\n            // mounting to a real element\n            // check if this is server-rendered content and if we can perform\n            // a successful hydration.\n            if (oldVnode.nodeType === 1 && oldVnode.hasAttribute('server-rendered')) {\n              oldVnode.removeAttribute('server-rendered');\n              hydrating = true;\n            }\n            if (hydrating) {\n              if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n                invokeInsertHook(vnode, insertedVnodeQueue, true);\n                return oldVnode;\n              } else {\n                warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');\n              }\n            }\n            // either not server-rendered, or hydration failed.\n            // create an empty node and replace it\n            oldVnode = emptyNodeAt(oldVnode);\n          }\n          // replacing existing element\n          elm = oldVnode.elm;\n          parent = nodeOps.parentNode(elm);\n          createElm(vnode, insertedVnodeQueue, parent, nodeOps.nextSibling(elm));\n\n          if (vnode.parent) {\n            // component root element replaced.\n            // update parent placeholder node element, recursively\n            var ancestor = vnode.parent;\n            while (ancestor) {\n              ancestor.elm = vnode.elm;\n              ancestor = ancestor.parent;\n            }\n            if (isPatchable(vnode)) {\n              for (var i = 0; i < cbs.create.length; ++i) {\n                cbs.create[i](emptyNode, vnode.parent);\n              }\n            }\n          }\n\n          if (parent !== null) {\n            removeVnodes(parent, [oldVnode], 0, 0);\n          } else if (isDef(oldVnode.tag)) {\n            invokeDestroyHook(oldVnode);\n          }\n        }\n      }\n\n      invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n      return vnode.elm;\n    };\n  }\n\n  /*  */\n\n  var directives = {\n    create: updateDirectives,\n    update: updateDirectives,\n    destroy: function unbindDirectives(vnode) {\n      updateDirectives(vnode, emptyNode);\n    }\n  };\n\n  function updateDirectives(oldVnode, vnode) {\n    if (oldVnode.data.directives || vnode.data.directives) {\n      _update(oldVnode, vnode);\n    }\n  }\n\n  function _update(oldVnode, vnode) {\n    var isCreate = oldVnode === emptyNode;\n    var isDestroy = vnode === emptyNode;\n    var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n    var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n    var dirsWithInsert = [];\n    var dirsWithPostpatch = [];\n\n    var key, oldDir, dir;\n    for (key in newDirs) {\n      oldDir = oldDirs[key];\n      dir = newDirs[key];\n      if (!oldDir) {\n        // new directive, bind\n        callHook$1(dir, 'bind', vnode, oldVnode);\n        if (dir.def && dir.def.inserted) {\n          dirsWithInsert.push(dir);\n        }\n      } else {\n        // existing directive, update\n        dir.oldValue = oldDir.value;\n        callHook$1(dir, 'update', vnode, oldVnode);\n        if (dir.def && dir.def.componentUpdated) {\n          dirsWithPostpatch.push(dir);\n        }\n      }\n    }\n\n    if (dirsWithInsert.length) {\n      var callInsert = function () {\n        for (var i = 0; i < dirsWithInsert.length; i++) {\n          callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n        }\n      };\n      if (isCreate) {\n        mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert, 'dir-insert');\n      } else {\n        callInsert();\n      }\n    }\n\n    if (dirsWithPostpatch.length) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n        for (var i = 0; i < dirsWithPostpatch.length; i++) {\n          callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n        }\n      }, 'dir-postpatch');\n    }\n\n    if (!isCreate) {\n      for (key in oldDirs) {\n        if (!newDirs[key]) {\n          // no longer present, unbind\n          callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n        }\n      }\n    }\n  }\n\n  var emptyModifiers = Object.create(null);\n\n  function normalizeDirectives$1(dirs, vm) {\n    var res = Object.create(null);\n    if (!dirs) {\n      return res;\n    }\n    var i, dir;\n    for (i = 0; i < dirs.length; i++) {\n      dir = dirs[i];\n      if (!dir.modifiers) {\n        dir.modifiers = emptyModifiers;\n      }\n      res[getRawDirName(dir)] = dir;\n      dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n    }\n    return res;\n  }\n\n  function getRawDirName(dir) {\n    return dir.rawName || dir.name + '.' + Object.keys(dir.modifiers || {}).join('.');\n  }\n\n  function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {\n    var fn = dir.def && dir.def[hook];\n    if (fn) {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    }\n  }\n\n  var baseModules = [ref, directives];\n\n  /*  */\n\n  function updateAttrs(oldVnode, vnode) {\n    if (!oldVnode.data.attrs && !vnode.data.attrs) {\n      return;\n    }\n    var key, cur, old;\n    var elm = vnode.elm;\n    var oldAttrs = oldVnode.data.attrs || {};\n    var attrs = vnode.data.attrs || {};\n    // clone observed objects, as the user probably wants to mutate it\n    if (attrs.__ob__) {\n      attrs = vnode.data.attrs = extend({}, attrs);\n    }\n\n    for (key in attrs) {\n      cur = attrs[key];\n      old = oldAttrs[key];\n      if (old !== cur) {\n        setAttr(elm, key, cur);\n      }\n    }\n    // #4391: in IE9, setting type can reset value for input[type=radio]\n    /* istanbul ignore if */\n    if (isIE9 && attrs.value !== oldAttrs.value) {\n      setAttr(elm, 'value', attrs.value);\n    }\n    for (key in oldAttrs) {\n      if (attrs[key] == null) {\n        if (isXlink(key)) {\n          elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n        } else if (!isEnumeratedAttr(key)) {\n          elm.removeAttribute(key);\n        }\n      }\n    }\n  }\n\n  function setAttr(el, key, value) {\n    if (isBooleanAttr(key)) {\n      // set attribute for blank value\n      // e.g. <option disabled>Select one</option>\n      if (isFalsyAttrValue(value)) {\n        el.removeAttribute(key);\n      } else {\n        el.setAttribute(key, key);\n      }\n    } else if (isEnumeratedAttr(key)) {\n      el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n    } else if (isXlink(key)) {\n      if (isFalsyAttrValue(value)) {\n        el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else {\n        el.setAttributeNS(xlinkNS, key, value);\n      }\n    } else {\n      if (isFalsyAttrValue(value)) {\n        el.removeAttribute(key);\n      } else {\n        el.setAttribute(key, value);\n      }\n    }\n  }\n\n  var attrs = {\n    create: updateAttrs,\n    update: updateAttrs\n\n    /*  */\n\n  };function updateClass(oldVnode, vnode) {\n    var el = vnode.elm;\n    var data = vnode.data;\n    var oldData = oldVnode.data;\n    if (!data.staticClass && !data.class && (!oldData || !oldData.staticClass && !oldData.class)) {\n      return;\n    }\n\n    var cls = genClassForVnode(vnode\n\n    // handle transition classes\n    );var transitionClass = el._transitionClasses;\n    if (transitionClass) {\n      cls = concat(cls, stringifyClass(transitionClass));\n    }\n\n    // set the class\n    if (cls !== el._prevClass) {\n      el.setAttribute('class', cls);\n      el._prevClass = cls;\n    }\n  }\n\n  var klass = {\n    create: updateClass,\n    update: updateClass\n\n    /*  */\n\n  };var target$1;\n\n  function add$2(event, handler, once, capture) {\n    if (once) {\n      var oldHandler = handler;\n      handler = function (ev) {\n        remove$3(event, handler, capture);\n        arguments.length === 1 ? oldHandler(ev) : oldHandler.apply(null, arguments);\n      };\n    }\n    target$1.addEventListener(event, handler, capture);\n  }\n\n  function remove$3(event, handler, capture) {\n    target$1.removeEventListener(event, handler, capture);\n  }\n\n  function updateDOMListeners(oldVnode, vnode) {\n    if (!oldVnode.data.on && !vnode.data.on) {\n      return;\n    }\n    var on = vnode.data.on || {};\n    var oldOn = oldVnode.data.on || {};\n    target$1 = vnode.elm;\n    updateListeners(on, oldOn, add$2, remove$3, vnode.context);\n  }\n\n  var events = {\n    create: updateDOMListeners,\n    update: updateDOMListeners\n\n    /*  */\n\n  };function updateDOMProps(oldVnode, vnode) {\n    if (!oldVnode.data.domProps && !vnode.data.domProps) {\n      return;\n    }\n    var key, cur;\n    var elm = vnode.elm;\n    var oldProps = oldVnode.data.domProps || {};\n    var props = vnode.data.domProps || {};\n    // clone observed objects, as the user probably wants to mutate it\n    if (props.__ob__) {\n      props = vnode.data.domProps = extend({}, props);\n    }\n\n    for (key in oldProps) {\n      if (props[key] == null) {\n        elm[key] = '';\n      }\n    }\n    for (key in props) {\n      cur = props[key];\n      // ignore children if the node has textContent or innerHTML,\n      // as these will throw away existing DOM nodes and cause removal errors\n      // on subsequent patches (#3360)\n      if (key === 'textContent' || key === 'innerHTML') {\n        if (vnode.children) {\n          vnode.children.length = 0;\n        }\n        if (cur === oldProps[key]) {\n          continue;\n        }\n      }\n      // #4521: if a click event triggers update before the change event is\n      // dispatched on a checkbox/radio input, the input's checked state will\n      // be reset and fail to trigger another update.\n      /* istanbul ignore next */\n      if (key === 'checked' && !isDirty(elm, cur)) {\n        continue;\n      }\n      if (key === 'value') {\n        // store value as _value as well since\n        // non-string values will be stringified\n        elm._value = cur;\n        // avoid resetting cursor position when value is the same\n        var strCur = cur == null ? '' : String(cur);\n        if (shouldUpdateValue(elm, vnode, strCur)) {\n          elm.value = strCur;\n        }\n      } else {\n        elm[key] = cur;\n      }\n    }\n  }\n\n  // check platforms/web/util/attrs.js acceptValue\n\n  function shouldUpdateValue(elm, vnode, checkVal) {\n    if (!elm.composing && (vnode.tag === 'option' || isDirty(elm, checkVal) || isInputChanged(vnode, checkVal))) {\n      return true;\n    }\n    return false;\n  }\n\n  function isDirty(elm, checkVal) {\n    return document.activeElement !== elm && elm.value !== checkVal;\n  }\n\n  function isInputChanged(vnode, newVal) {\n    var value = vnode.elm.value;\n    var modifiers = vnode.elm._vModifiers; // injected by v-model runtime\n    if (modifiers && modifiers.number || vnode.elm.type === 'number') {\n      return toNumber(value) !== toNumber(newVal);\n    }\n    if (modifiers && modifiers.trim) {\n      return value.trim() !== newVal.trim();\n    }\n    return value !== newVal;\n  }\n\n  var domProps = {\n    create: updateDOMProps,\n    update: updateDOMProps\n\n    /*  */\n\n  };var parseStyleText = cached(function (cssText) {\n    var res = {};\n    var listDelimiter = /;(?![^(]*\\))/g;\n    var propertyDelimiter = /:(.+)/;\n    cssText.split(listDelimiter).forEach(function (item) {\n      if (item) {\n        var tmp = item.split(propertyDelimiter);\n        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n      }\n    });\n    return res;\n  }\n\n  // merge static and dynamic style data on the same vnode\n  );function normalizeStyleData(data) {\n    var style = normalizeStyleBinding(data.style\n    // static style is pre-processed into an object during compilation\n    // and is always a fresh object, so it's safe to merge into it\n    );return data.staticStyle ? extend(data.staticStyle, style) : style;\n  }\n\n  // normalize possible array / string values into Object\n  function normalizeStyleBinding(bindingStyle) {\n    if (Array.isArray(bindingStyle)) {\n      return toObject(bindingStyle);\n    }\n    if (typeof bindingStyle === 'string') {\n      return parseStyleText(bindingStyle);\n    }\n    return bindingStyle;\n  }\n\n  /**\n   * parent component style should be after child's\n   * so that parent component's style could override it\n   */\n  function getStyle(vnode, checkChild) {\n    var res = {};\n    var styleData;\n\n    if (checkChild) {\n      var childNode = vnode;\n      while (childNode.child) {\n        childNode = childNode.child._vnode;\n        if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n          extend(res, styleData);\n        }\n      }\n    }\n\n    if (styleData = normalizeStyleData(vnode.data)) {\n      extend(res, styleData);\n    }\n\n    var parentNode = vnode;\n    while (parentNode = parentNode.parent) {\n      if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n        extend(res, styleData);\n      }\n    }\n    return res;\n  }\n\n  /*  */\n\n  var cssVarRE = /^--/;\n  var importantRE = /\\s*!important$/;\n  var setProp = function (el, name, val) {\n    /* istanbul ignore if */\n    if (cssVarRE.test(name)) {\n      el.style.setProperty(name, val);\n    } else if (importantRE.test(val)) {\n      el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n    } else {\n      el.style[normalize(name)] = val;\n    }\n  };\n\n  var prefixes = ['Webkit', 'Moz', 'ms'];\n\n  var testEl;\n  var normalize = cached(function (prop) {\n    testEl = testEl || document.createElement('div');\n    prop = camelize(prop);\n    if (prop !== 'filter' && prop in testEl.style) {\n      return prop;\n    }\n    var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\n    for (var i = 0; i < prefixes.length; i++) {\n      var prefixed = prefixes[i] + upper;\n      if (prefixed in testEl.style) {\n        return prefixed;\n      }\n    }\n  });\n\n  function updateStyle(oldVnode, vnode) {\n    var data = vnode.data;\n    var oldData = oldVnode.data;\n\n    if (!data.staticStyle && !data.style && !oldData.staticStyle && !oldData.style) {\n      return;\n    }\n\n    var cur, name;\n    var el = vnode.elm;\n    var oldStaticStyle = oldVnode.data.staticStyle;\n    var oldStyleBinding = oldVnode.data.style || {};\n\n    // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n    var oldStyle = oldStaticStyle || oldStyleBinding;\n\n    var style = normalizeStyleBinding(vnode.data.style) || {};\n\n    vnode.data.style = style.__ob__ ? extend({}, style) : style;\n\n    var newStyle = getStyle(vnode, true);\n\n    for (name in oldStyle) {\n      if (newStyle[name] == null) {\n        setProp(el, name, '');\n      }\n    }\n    for (name in newStyle) {\n      cur = newStyle[name];\n      if (cur !== oldStyle[name]) {\n        // ie9 setting to null has no effect, must use empty string\n        setProp(el, name, cur == null ? '' : cur);\n      }\n    }\n  }\n\n  var style = {\n    create: updateStyle,\n    update: updateStyle\n\n    /*  */\n\n    /**\n     * Add class with compatibility for SVG since classList is not supported on\n     * SVG elements in IE\n     */\n  };function addClass(el, cls) {\n    /* istanbul ignore if */\n    if (!cls || !cls.trim()) {\n      return;\n    }\n\n    /* istanbul ignore else */\n    if (el.classList) {\n      if (cls.indexOf(' ') > -1) {\n        cls.split(/\\s+/).forEach(function (c) {\n          return el.classList.add(c);\n        });\n      } else {\n        el.classList.add(cls);\n      }\n    } else {\n      var cur = ' ' + el.getAttribute('class') + ' ';\n      if (cur.indexOf(' ' + cls + ' ') < 0) {\n        el.setAttribute('class', (cur + cls).trim());\n      }\n    }\n  }\n\n  /**\n   * Remove class with compatibility for SVG since classList is not supported on\n   * SVG elements in IE\n   */\n  function removeClass(el, cls) {\n    /* istanbul ignore if */\n    if (!cls || !cls.trim()) {\n      return;\n    }\n\n    /* istanbul ignore else */\n    if (el.classList) {\n      if (cls.indexOf(' ') > -1) {\n        cls.split(/\\s+/).forEach(function (c) {\n          return el.classList.remove(c);\n        });\n      } else {\n        el.classList.remove(cls);\n      }\n    } else {\n      var cur = ' ' + el.getAttribute('class') + ' ';\n      var tar = ' ' + cls + ' ';\n      while (cur.indexOf(tar) >= 0) {\n        cur = cur.replace(tar, ' ');\n      }\n      el.setAttribute('class', cur.trim());\n    }\n  }\n\n  /*  */\n\n  var hasTransition = inBrowser && !isIE9;\n  var TRANSITION = 'transition';\n  var ANIMATION = 'animation';\n\n  // Transition property/event sniffing\n  var transitionProp = 'transition';\n  var transitionEndEvent = 'transitionend';\n  var animationProp = 'animation';\n  var animationEndEvent = 'animationend';\n  if (hasTransition) {\n    /* istanbul ignore if */\n    if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {\n      transitionProp = 'WebkitTransition';\n      transitionEndEvent = 'webkitTransitionEnd';\n    }\n    if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {\n      animationProp = 'WebkitAnimation';\n      animationEndEvent = 'webkitAnimationEnd';\n    }\n  }\n\n  var raf = inBrowser && window.requestAnimationFrame || setTimeout;\n  function nextFrame(fn) {\n    raf(function () {\n      raf(fn);\n    });\n  }\n\n  function addTransitionClass(el, cls) {\n    (el._transitionClasses || (el._transitionClasses = [])).push(cls);\n    addClass(el, cls);\n  }\n\n  function removeTransitionClass(el, cls) {\n    if (el._transitionClasses) {\n      remove$1(el._transitionClasses, cls);\n    }\n    removeClass(el, cls);\n  }\n\n  function whenTransitionEnds(el, expectedType, cb) {\n    var ref = getTransitionInfo(el, expectedType);\n    var type = ref.type;\n    var timeout = ref.timeout;\n    var propCount = ref.propCount;\n    if (!type) {\n      return cb();\n    }\n    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n    var ended = 0;\n    var end = function () {\n      el.removeEventListener(event, onEnd);\n      cb();\n    };\n    var onEnd = function (e) {\n      if (e.target === el) {\n        if (++ended >= propCount) {\n          end();\n        }\n      }\n    };\n    setTimeout(function () {\n      if (ended < propCount) {\n        end();\n      }\n    }, timeout + 1);\n    el.addEventListener(event, onEnd);\n  }\n\n  var transformRE = /\\b(transform|all)(,|$)/;\n\n  function getTransitionInfo(el, expectedType) {\n    var styles = window.getComputedStyle(el);\n    var transitioneDelays = styles[transitionProp + 'Delay'].split(', ');\n    var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n    var transitionTimeout = getTimeout(transitioneDelays, transitionDurations);\n    var animationDelays = styles[animationProp + 'Delay'].split(', ');\n    var animationDurations = styles[animationProp + 'Duration'].split(', ');\n    var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n    var type;\n    var timeout = 0;\n    var propCount = 0;\n    /* istanbul ignore if */\n    if (expectedType === TRANSITION) {\n      if (transitionTimeout > 0) {\n        type = TRANSITION;\n        timeout = transitionTimeout;\n        propCount = transitionDurations.length;\n      }\n    } else if (expectedType === ANIMATION) {\n      if (animationTimeout > 0) {\n        type = ANIMATION;\n        timeout = animationTimeout;\n        propCount = animationDurations.length;\n      }\n    } else {\n      timeout = Math.max(transitionTimeout, animationTimeout);\n      type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;\n      propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;\n    }\n    var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);\n    return {\n      type: type,\n      timeout: timeout,\n      propCount: propCount,\n      hasTransform: hasTransform\n    };\n  }\n\n  function getTimeout(delays, durations) {\n    /* istanbul ignore next */\n    while (delays.length < durations.length) {\n      delays = delays.concat(delays);\n    }\n\n    return Math.max.apply(null, durations.map(function (d, i) {\n      return toMs(d) + toMs(delays[i]);\n    }));\n  }\n\n  function toMs(s) {\n    return Number(s.slice(0, -1)) * 1000;\n  }\n\n  /*  */\n\n  function enter(vnode, toggleDisplay) {\n    var el = vnode.elm;\n\n    // call leave callback now\n    if (el._leaveCb) {\n      el._leaveCb.cancelled = true;\n      el._leaveCb();\n    }\n\n    var data = resolveTransition(vnode.data.transition);\n    if (!data) {\n      return;\n    }\n\n    /* istanbul ignore if */\n    if (el._enterCb || el.nodeType !== 1) {\n      return;\n    }\n\n    var css = data.css;\n    var type = data.type;\n    var enterClass = data.enterClass;\n    var enterToClass = data.enterToClass;\n    var enterActiveClass = data.enterActiveClass;\n    var appearClass = data.appearClass;\n    var appearToClass = data.appearToClass;\n    var appearActiveClass = data.appearActiveClass;\n    var beforeEnter = data.beforeEnter;\n    var enter = data.enter;\n    var afterEnter = data.afterEnter;\n    var enterCancelled = data.enterCancelled;\n    var beforeAppear = data.beforeAppear;\n    var appear = data.appear;\n    var afterAppear = data.afterAppear;\n    var appearCancelled = data.appearCancelled;\n\n    // activeInstance will always be the <transition> component managing this\n    // transition. One edge case to check is when the <transition> is placed\n    // as the root node of a child component. In that case we need to check\n    // <transition>'s parent for appear check.\n    var context = activeInstance;\n    var transitionNode = activeInstance.$vnode;\n    while (transitionNode && transitionNode.parent) {\n      transitionNode = transitionNode.parent;\n      context = transitionNode.context;\n    }\n\n    var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n    if (isAppear && !appear && appear !== '') {\n      return;\n    }\n\n    var startClass = isAppear ? appearClass : enterClass;\n    var activeClass = isAppear ? appearActiveClass : enterActiveClass;\n    var toClass = isAppear ? appearToClass : enterToClass;\n    var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;\n    var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;\n    var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;\n    var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;\n\n    var expectsCSS = css !== false && !isIE9;\n    var userWantsControl = enterHook &&\n    // enterHook may be a bound method which exposes\n    // the length of original fn as _length\n    (enterHook._length || enterHook.length) > 1;\n\n    var cb = el._enterCb = once(function () {\n      if (expectsCSS) {\n        removeTransitionClass(el, toClass);\n        removeTransitionClass(el, activeClass);\n      }\n      if (cb.cancelled) {\n        if (expectsCSS) {\n          removeTransitionClass(el, startClass);\n        }\n        enterCancelledHook && enterCancelledHook(el);\n      } else {\n        afterEnterHook && afterEnterHook(el);\n      }\n      el._enterCb = null;\n    });\n\n    if (!vnode.data.show) {\n      // remove pending leave element on enter by injecting an insert hook\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n        var parent = el.parentNode;\n        var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n        if (pendingNode && pendingNode.context === vnode.context && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {\n          pendingNode.elm._leaveCb();\n        }\n        enterHook && enterHook(el, cb);\n      }, 'transition-insert');\n    }\n\n    // start enter transition\n    beforeEnterHook && beforeEnterHook(el);\n    if (expectsCSS) {\n      addTransitionClass(el, startClass);\n      addTransitionClass(el, activeClass);\n      nextFrame(function () {\n        addTransitionClass(el, toClass);\n        removeTransitionClass(el, startClass);\n        if (!cb.cancelled && !userWantsControl) {\n          whenTransitionEnds(el, type, cb);\n        }\n      });\n    }\n\n    if (vnode.data.show) {\n      toggleDisplay && toggleDisplay();\n      enterHook && enterHook(el, cb);\n    }\n\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n\n  function leave(vnode, rm) {\n    var el = vnode.elm;\n\n    // call enter callback now\n    if (el._enterCb) {\n      el._enterCb.cancelled = true;\n      el._enterCb();\n    }\n\n    var data = resolveTransition(vnode.data.transition);\n    if (!data) {\n      return rm();\n    }\n\n    /* istanbul ignore if */\n    if (el._leaveCb || el.nodeType !== 1) {\n      return;\n    }\n\n    var css = data.css;\n    var type = data.type;\n    var leaveClass = data.leaveClass;\n    var leaveToClass = data.leaveToClass;\n    var leaveActiveClass = data.leaveActiveClass;\n    var beforeLeave = data.beforeLeave;\n    var leave = data.leave;\n    var afterLeave = data.afterLeave;\n    var leaveCancelled = data.leaveCancelled;\n    var delayLeave = data.delayLeave;\n\n    var expectsCSS = css !== false && !isIE9;\n    var userWantsControl = leave &&\n    // leave hook may be a bound method which exposes\n    // the length of original fn as _length\n    (leave._length || leave.length) > 1;\n\n    var cb = el._leaveCb = once(function () {\n      if (el.parentNode && el.parentNode._pending) {\n        el.parentNode._pending[vnode.key] = null;\n      }\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveActiveClass);\n      }\n      if (cb.cancelled) {\n        if (expectsCSS) {\n          removeTransitionClass(el, leaveClass);\n        }\n        leaveCancelled && leaveCancelled(el);\n      } else {\n        rm();\n        afterLeave && afterLeave(el);\n      }\n      el._leaveCb = null;\n    });\n\n    if (delayLeave) {\n      delayLeave(performLeave);\n    } else {\n      performLeave();\n    }\n\n    function performLeave() {\n      // the delayed leave may have already been cancelled\n      if (cb.cancelled) {\n        return;\n      }\n      // record leaving element\n      if (!vnode.data.show) {\n        (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;\n      }\n      beforeLeave && beforeLeave(el);\n      if (expectsCSS) {\n        addTransitionClass(el, leaveClass);\n        addTransitionClass(el, leaveActiveClass);\n        nextFrame(function () {\n          addTransitionClass(el, leaveToClass);\n          removeTransitionClass(el, leaveClass);\n          if (!cb.cancelled && !userWantsControl) {\n            whenTransitionEnds(el, type, cb);\n          }\n        });\n      }\n      leave && leave(el, cb);\n      if (!expectsCSS && !userWantsControl) {\n        cb();\n      }\n    }\n  }\n\n  function resolveTransition(def$$1) {\n    if (!def$$1) {\n      return;\n    }\n    /* istanbul ignore else */\n    if (typeof def$$1 === 'object') {\n      var res = {};\n      if (def$$1.css !== false) {\n        extend(res, autoCssTransition(def$$1.name || 'v'));\n      }\n      extend(res, def$$1);\n      return res;\n    } else if (typeof def$$1 === 'string') {\n      return autoCssTransition(def$$1);\n    }\n  }\n\n  var autoCssTransition = cached(function (name) {\n    return {\n      enterClass: name + '-enter',\n      leaveClass: name + '-leave',\n      appearClass: name + '-enter',\n      enterToClass: name + '-enter-to',\n      leaveToClass: name + '-leave-to',\n      appearToClass: name + '-enter-to',\n      enterActiveClass: name + '-enter-active',\n      leaveActiveClass: name + '-leave-active',\n      appearActiveClass: name + '-enter-active'\n    };\n  });\n\n  function once(fn) {\n    var called = false;\n    return function () {\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n  }\n\n  function _enter(_, vnode) {\n    if (!vnode.data.show) {\n      enter(vnode);\n    }\n  }\n\n  var transition = inBrowser ? {\n    create: _enter,\n    activate: _enter,\n    remove: function remove(vnode, rm) {\n      /* istanbul ignore else */\n      if (!vnode.data.show) {\n        leave(vnode, rm);\n      } else {\n        rm();\n      }\n    }\n  } : {};\n\n  var platformModules = [attrs, klass, events, domProps, style, transition];\n\n  /*  */\n\n  // the directive module should be applied last, after all\n  // built-in modules have been applied.\n  var modules = platformModules.concat(baseModules);\n\n  var patch$1 = createPatchFunction({ nodeOps: nodeOps, modules: modules }\n\n  /**\n   * Not type checking this file because flow doesn't like attaching\n   * properties to Elements.\n   */\n\n  );var modelableTagRE = /^input|select|textarea|vue-component-[0-9]+(-[0-9a-zA-Z_-]*)?$/;\n\n  /* istanbul ignore if */\n  if (isIE9) {\n    // http://www.matts411.com/post/internet-explorer-9-oninput/\n    document.addEventListener('selectionchange', function () {\n      var el = document.activeElement;\n      if (el && el.vmodel) {\n        trigger(el, 'input');\n      }\n    });\n  }\n\n  var model = {\n    inserted: function inserted(el, binding, vnode) {\n      {\n        if (!modelableTagRE.test(vnode.tag)) {\n          warn('v-model is not supported on element type: <' + vnode.tag + '>. ' + 'If you are working with contenteditable, it\\'s recommended to ' + 'wrap a library dedicated for that purpose inside a custom component.', vnode.context);\n        }\n      }\n      if (vnode.tag === 'select') {\n        var cb = function () {\n          setSelected(el, binding, vnode.context);\n        };\n        cb\n        /* istanbul ignore if */\n        ();if (isIE || isEdge) {\n          setTimeout(cb, 0);\n        }\n      } else if (vnode.tag === 'textarea' || el.type === 'text') {\n        el._vModifiers = binding.modifiers;\n        if (!binding.modifiers.lazy) {\n          if (!isAndroid) {\n            el.addEventListener('compositionstart', onCompositionStart);\n            el.addEventListener('compositionend', onCompositionEnd);\n          }\n          /* istanbul ignore if */\n          if (isIE9) {\n            el.vmodel = true;\n          }\n        }\n      }\n    },\n    componentUpdated: function componentUpdated(el, binding, vnode) {\n      if (vnode.tag === 'select') {\n        setSelected(el, binding, vnode.context\n        // in case the options rendered by v-for have changed,\n        // it's possible that the value is out-of-sync with the rendered options.\n        // detect such cases and filter out values that no longer has a matching\n        // option in the DOM.\n        );var needReset = el.multiple ? binding.value.some(function (v) {\n          return hasNoMatchingOption(v, el.options);\n        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  };\n\n  function setSelected(el, binding, vm) {\n    var value = binding.value;\n    var isMultiple = el.multiple;\n    if (isMultiple && !Array.isArray(value)) {\n      'development' !== 'production' && warn('<select multiple v-model=\"' + binding.expression + '\"> ' + 'expects an Array value for its binding, but got ' + Object.prototype.toString.call(value).slice(8, -1), vm);\n      return;\n    }\n    var selected, option;\n    for (var i = 0, l = el.options.length; i < l; i++) {\n      option = el.options[i];\n      if (isMultiple) {\n        selected = looseIndexOf(value, getValue(option)) > -1;\n        if (option.selected !== selected) {\n          option.selected = selected;\n        }\n      } else {\n        if (looseEqual(getValue(option), value)) {\n          if (el.selectedIndex !== i) {\n            el.selectedIndex = i;\n          }\n          return;\n        }\n      }\n    }\n    if (!isMultiple) {\n      el.selectedIndex = -1;\n    }\n  }\n\n  function hasNoMatchingOption(value, options) {\n    for (var i = 0, l = options.length; i < l; i++) {\n      if (looseEqual(getValue(options[i]), value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function getValue(option) {\n    return '_value' in option ? option._value : option.value;\n  }\n\n  function onCompositionStart(e) {\n    e.target.composing = true;\n  }\n\n  function onCompositionEnd(e) {\n    e.target.composing = false;\n    trigger(e.target, 'input');\n  }\n\n  function trigger(el, type) {\n    var e = document.createEvent('HTMLEvents');\n    e.initEvent(type, true, true);\n    el.dispatchEvent(e);\n  }\n\n  /*  */\n\n  // recursively search for possible transition defined inside the component root\n  function locateNode(vnode) {\n    return vnode.child && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.child._vnode) : vnode;\n  }\n\n  var show = {\n    bind: function bind(el, ref, vnode) {\n      var value = ref.value;\n\n      vnode = locateNode(vnode);\n      var transition = vnode.data && vnode.data.transition;\n      var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;\n      if (value && transition && !isIE9) {\n        vnode.data.show = true;\n        enter(vnode, function () {\n          el.style.display = originalDisplay;\n        });\n      } else {\n        el.style.display = value ? originalDisplay : 'none';\n      }\n    },\n\n    update: function update(el, ref, vnode) {\n      var value = ref.value;\n      var oldValue = ref.oldValue;\n\n      /* istanbul ignore if */\n      if (value === oldValue) {\n        return;\n      }\n      vnode = locateNode(vnode);\n      var transition = vnode.data && vnode.data.transition;\n      if (transition && !isIE9) {\n        vnode.data.show = true;\n        if (value) {\n          enter(vnode, function () {\n            el.style.display = el.__vOriginalDisplay;\n          });\n        } else {\n          leave(vnode, function () {\n            el.style.display = 'none';\n          });\n        }\n      } else {\n        el.style.display = value ? el.__vOriginalDisplay : 'none';\n      }\n    },\n\n    unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {\n      if (!isDestroy) {\n        el.style.display = el.__vOriginalDisplay;\n      }\n    }\n  };\n\n  var platformDirectives = {\n    model: model,\n    show: show\n\n    /*  */\n\n    // Provides transition support for a single element/component.\n    // supports transition mode (out-in / in-out)\n\n  };var transitionProps = {\n    name: String,\n    appear: Boolean,\n    css: Boolean,\n    mode: String,\n    type: String,\n    enterClass: String,\n    leaveClass: String,\n    enterToClass: String,\n    leaveToClass: String,\n    enterActiveClass: String,\n    leaveActiveClass: String,\n    appearClass: String,\n    appearActiveClass: String,\n    appearToClass: String\n\n    // in case the child is also an abstract component, e.g. <keep-alive>\n    // we want to recursively retrieve the real component to be rendered\n  };function getRealChild(vnode) {\n    var compOptions = vnode && vnode.componentOptions;\n    if (compOptions && compOptions.Ctor.options.abstract) {\n      return getRealChild(getFirstComponentChild(compOptions.children));\n    } else {\n      return vnode;\n    }\n  }\n\n  function extractTransitionData(comp) {\n    var data = {};\n    var options = comp.$options;\n    // props\n    for (var key in options.propsData) {\n      data[key] = comp[key];\n    }\n    // events.\n    // extract listeners and pass them directly to the transition methods\n    var listeners = options._parentListeners;\n    for (var key$1 in listeners) {\n      data[camelize(key$1)] = listeners[key$1].fn;\n    }\n    return data;\n  }\n\n  function placeholder(h, rawChild) {\n    return (/\\d-keep-alive$/.test(rawChild.tag) ? h('keep-alive') : null\n    );\n  }\n\n  function hasParentTransition(vnode) {\n    while (vnode = vnode.parent) {\n      if (vnode.data.transition) {\n        return true;\n      }\n    }\n  }\n\n  function isSameChild(child, oldChild) {\n    return oldChild.key === child.key && oldChild.tag === child.tag;\n  }\n\n  var Transition = {\n    name: 'transition',\n    props: transitionProps,\n    abstract: true,\n    render: function render(h) {\n      var this$1 = this;\n\n      var children = this.$slots.default;\n      if (!children) {\n        return;\n      }\n\n      // filter out text nodes (possible whitespaces)\n      children = children.filter(function (c) {\n        return c.tag;\n      }\n      /* istanbul ignore if */\n      );if (!children.length) {\n        return;\n      }\n\n      // warn multiple elements\n      if ('development' !== 'production' && children.length > 1) {\n        warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);\n      }\n\n      var mode = this.mode;\n\n      // warn invalid mode\n      if ('development' !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {\n        warn('invalid <transition> mode: ' + mode, this.$parent);\n      }\n\n      var rawChild = children[0];\n\n      // if this is a component root node and the component's\n      // parent container node also has transition, skip.\n      if (hasParentTransition(this.$vnode)) {\n        return rawChild;\n      }\n\n      // apply transition data to child\n      // use getRealChild() to ignore abstract components e.g. keep-alive\n      var child = getRealChild(rawChild\n      /* istanbul ignore if */\n      );if (!child) {\n        return rawChild;\n      }\n\n      if (this._leaving) {\n        return placeholder(h, rawChild);\n      }\n\n      var key = child.key = child.key == null || child.isStatic ? '__v' + (child.tag + this._uid) + '__' : child.key;\n      var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n      var oldRawChild = this._vnode;\n      var oldChild = getRealChild(oldRawChild\n\n      // mark v-show\n      // so that the transition module can hand over the control to the directive\n      );if (child.data.directives && child.data.directives.some(function (d) {\n        return d.name === 'show';\n      })) {\n        child.data.show = true;\n      }\n\n      if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\n        // replace old child transition data with fresh one\n        // important for dynamic transitions!\n        var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n        // handle transition mode\n        if (mode === 'out-in') {\n          // return placeholder node and queue update when leave finishes\n          this._leaving = true;\n          mergeVNodeHook(oldData, 'afterLeave', function () {\n            this$1._leaving = false;\n            this$1.$forceUpdate();\n          }, key);\n          return placeholder(h, rawChild);\n        } else if (mode === 'in-out') {\n          var delayedLeave;\n          var performLeave = function () {\n            delayedLeave();\n          };\n          mergeVNodeHook(data, 'afterEnter', performLeave, key);\n          mergeVNodeHook(data, 'enterCancelled', performLeave, key);\n          mergeVNodeHook(oldData, 'delayLeave', function (leave) {\n            delayedLeave = leave;\n          }, key);\n        }\n      }\n\n      return rawChild;\n    }\n\n    /*  */\n\n    // Provides transition support for list items.\n    // supports move transitions using the FLIP technique.\n\n    // Because the vdom's children update algorithm is \"unstable\" - i.e.\n    // it doesn't guarantee the relative positioning of removed elements,\n    // we force transition-group to update its children into two passes:\n    // in the first pass, we remove all nodes that need to be removed,\n    // triggering their leaving transition; in the second pass, we insert/move\n    // into the final disired state. This way in the second pass removed\n    // nodes will remain where they should be.\n\n  };var props = extend({\n    tag: String,\n    moveClass: String\n  }, transitionProps);\n\n  delete props.mode;\n\n  var TransitionGroup = {\n    props: props,\n\n    render: function render(h) {\n      var tag = this.tag || this.$vnode.data.tag || 'span';\n      var map = Object.create(null);\n      var prevChildren = this.prevChildren = this.children;\n      var rawChildren = this.$slots.default || [];\n      var children = this.children = [];\n      var transitionData = extractTransitionData(this);\n\n      for (var i = 0; i < rawChildren.length; i++) {\n        var c = rawChildren[i];\n        if (c.tag) {\n          if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n            children.push(c);\n            map[c.key] = c;(c.data || (c.data = {})).transition = transitionData;\n          } else {\n            var opts = c.componentOptions;\n            var name = opts ? opts.Ctor.options.name || opts.tag : c.tag;\n            warn('<transition-group> children must be keyed: <' + name + '>');\n          }\n        }\n      }\n\n      if (prevChildren) {\n        var kept = [];\n        var removed = [];\n        for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n          var c$1 = prevChildren[i$1];\n          c$1.data.transition = transitionData;\n          c$1.data.pos = c$1.elm.getBoundingClientRect();\n          if (map[c$1.key]) {\n            kept.push(c$1);\n          } else {\n            removed.push(c$1);\n          }\n        }\n        this.kept = h(tag, null, kept);\n        this.removed = removed;\n      }\n\n      return h(tag, null, children);\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      // force removing pass\n      this.__patch__(this._vnode, this.kept, false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n      );\n      this._vnode = this.kept;\n    },\n\n    updated: function updated() {\n      var children = this.prevChildren;\n      var moveClass = this.moveClass || (this.name || 'v') + '-move';\n      if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n        return;\n      }\n\n      // we divide the work into three loops to avoid mixing DOM reads and writes\n      // in each iteration - which helps prevent layout thrashing.\n      children.forEach(callPendingCbs);\n      children.forEach(recordPosition);\n      children.forEach(applyTranslation\n\n      // force reflow to put everything in position\n      );var f = document.body.offsetHeight; // eslint-disable-line\n\n      children.forEach(function (c) {\n        if (c.data.moved) {\n          var el = c.elm;\n          var s = el.style;\n          addTransitionClass(el, moveClass);\n          s.transform = s.WebkitTransform = s.transitionDuration = '';\n          el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {\n            if (!e || /transform$/.test(e.propertyName)) {\n              el.removeEventListener(transitionEndEvent, cb);\n              el._moveCb = null;\n              removeTransitionClass(el, moveClass);\n            }\n          });\n        }\n      });\n    },\n\n    methods: {\n      hasMove: function hasMove(el, moveClass) {\n        /* istanbul ignore if */\n        if (!hasTransition) {\n          return false;\n        }\n        if (this._hasMove != null) {\n          return this._hasMove;\n        }\n        addTransitionClass(el, moveClass);\n        var info = getTransitionInfo(el);\n        removeTransitionClass(el, moveClass);\n        return this._hasMove = info.hasTransform;\n      }\n    }\n  };\n\n  function callPendingCbs(c) {\n    /* istanbul ignore if */\n    if (c.elm._moveCb) {\n      c.elm._moveCb();\n    }\n    /* istanbul ignore if */\n    if (c.elm._enterCb) {\n      c.elm._enterCb();\n    }\n  }\n\n  function recordPosition(c) {\n    c.data.newPos = c.elm.getBoundingClientRect();\n  }\n\n  function applyTranslation(c) {\n    var oldPos = c.data.pos;\n    var newPos = c.data.newPos;\n    var dx = oldPos.left - newPos.left;\n    var dy = oldPos.top - newPos.top;\n    if (dx || dy) {\n      c.data.moved = true;\n      var s = c.elm.style;\n      s.transform = s.WebkitTransform = 'translate(' + dx + 'px,' + dy + 'px)';\n      s.transitionDuration = '0s';\n    }\n  }\n\n  var platformComponents = {\n    Transition: Transition,\n    TransitionGroup: TransitionGroup\n\n    /*  */\n\n    // install platform specific utils\n  };Vue$3.config.isUnknownElement = isUnknownElement;\n  Vue$3.config.isReservedTag = isReservedTag;\n  Vue$3.config.getTagNamespace = getTagNamespace;\n  Vue$3.config.mustUseProp = mustUseProp;\n\n  // install platform runtime directives & components\n  extend(Vue$3.options.directives, platformDirectives);\n  extend(Vue$3.options.components, platformComponents\n\n  // install platform patch function\n  );Vue$3.prototype.__patch__ = inBrowser ? patch$1 : noop;\n\n  // wrap mount\n  Vue$3.prototype.$mount = function (el, hydrating) {\n    el = el && inBrowser ? query(el) : undefined;\n    return this._mount(el, hydrating);\n  };\n\n  if ('development' !== 'production' && inBrowser && typeof console !== 'undefined') {\n    console[console.info ? 'info' : 'log']('You are running Vue in development mode.\\n' + 'Make sure to turn on production mode when deploying for production.\\n' + 'See more tips at https://vuejs.org/guide/deployment.html');\n  }\n\n  // devtools global hook\n  /* istanbul ignore next */\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue$3);\n      } else if ('development' !== 'production' && inBrowser && !isEdge && /Chrome\\/\\d+/.test(window.navigator.userAgent)) {\n        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\n      }\n    }\n  }, 0\n\n  /*  */\n\n  // check whether current browser encodes a char inside attribute values\n  );function shouldDecode(content, encoded) {\n    var div = document.createElement('div');\n    div.innerHTML = '<div a=\"' + content + '\">';\n    return div.innerHTML.indexOf(encoded) > 0;\n  }\n\n  // #3663\n  // IE encodes newlines inside attribute values while other browsers don't\n  var shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\n\n  /*  */\n\n  var decoder;\n\n  function decode(html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent;\n  }\n\n  /*  */\n\n  var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr', true\n\n  // Elements that you can, intentionally, leave open\n  // (and which close themselves)\n  );var canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source', true\n\n  // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n  // Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\n  );var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track', true\n\n  /**\n   * Not type-checking this file because it's mostly vendor code.\n   */\n\n  /*!\n   * HTML Parser By John Resig (ejohn.org)\n   * Modified by Juriy \"kangax\" Zaytsev\n   * Original code by Erik Arvidsson, Mozilla Public License\n   * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n   */\n\n  // Regular Expressions for parsing tags and attributes\n  );var singleAttrIdentifier = /([^\\s\"'<>/=]+)/;\n  var singleAttrAssign = /(?:=)/;\n  var singleAttrValues = [\n  // attr value double quotes\n  /\"([^\"]*)\"+/.source,\n  // attr value, single quotes\n  /'([^']*)'+/.source,\n  // attr value, no quotes\n  /([^\\s\"'=<>`]+)/.source];\n  var attribute = new RegExp('^\\\\s*' + singleAttrIdentifier.source + '(?:\\\\s*(' + singleAttrAssign.source + ')' + '\\\\s*(?:' + singleAttrValues.join('|') + '))?');\n\n  // could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n  // but for Vue templates we can enforce a simple charset\n  var ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\n  var qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')';\n  var startTagOpen = new RegExp('^<' + qnameCapture);\n  var startTagClose = /^\\s*(\\/?)>/;\n  var endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>');\n  var doctype = /^<!DOCTYPE [^>]+>/i;\n  var comment = /^<!--/;\n  var conditionalComment = /^<!\\[/;\n\n  var IS_REGEX_CAPTURING_BROKEN = false;\n  'x'.replace(/x(.)?/g, function (m, g) {\n    IS_REGEX_CAPTURING_BROKEN = g === '';\n  }\n\n  // Special Elements (can contain anything)\n  );var isScriptOrStyle = makeMap('script,style', true);\n  var hasLang = function (attr) {\n    return attr.name === 'lang' && attr.value !== 'html';\n  };\n  var isSpecialTag = function (tag, isSFC, stack) {\n    if (isScriptOrStyle(tag)) {\n      return true;\n    }\n    if (isSFC && stack.length === 1) {\n      // top-level template that has no pre-processor\n      if (tag === 'template' && !stack[0].attrs.some(hasLang)) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  var reCache = {};\n\n  var ltRE = /&lt;/g;\n  var gtRE = /&gt;/g;\n  var nlRE = /&#10;/g;\n  var ampRE = /&amp;/g;\n  var quoteRE = /&quot;/g;\n\n  function decodeAttr(value, shouldDecodeNewlines) {\n    if (shouldDecodeNewlines) {\n      value = value.replace(nlRE, '\\n');\n    }\n    return value.replace(ltRE, '<').replace(gtRE, '>').replace(ampRE, '&').replace(quoteRE, '\"');\n  }\n\n  function parseHTML(html, options) {\n    var stack = [];\n    var expectHTML = options.expectHTML;\n    var isUnaryTag$$1 = options.isUnaryTag || no;\n    var index = 0;\n    var last, lastTag;\n    while (html) {\n      last = html;\n      // Make sure we're not in a script or style element\n      if (!lastTag || !isSpecialTag(lastTag, options.sfc, stack)) {\n        var textEnd = html.indexOf('<');\n        if (textEnd === 0) {\n          // Comment:\n          if (comment.test(html)) {\n            var commentEnd = html.indexOf('-->');\n\n            if (commentEnd >= 0) {\n              advance(commentEnd + 3);\n              continue;\n            }\n          }\n\n          // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n          if (conditionalComment.test(html)) {\n            var conditionalEnd = html.indexOf(']>');\n\n            if (conditionalEnd >= 0) {\n              advance(conditionalEnd + 2);\n              continue;\n            }\n          }\n\n          // Doctype:\n          var doctypeMatch = html.match(doctype);\n          if (doctypeMatch) {\n            advance(doctypeMatch[0].length);\n            continue;\n          }\n\n          // End tag:\n          var endTagMatch = html.match(endTag);\n          if (endTagMatch) {\n            var curIndex = index;\n            advance(endTagMatch[0].length);\n            parseEndTag(endTagMatch[0], endTagMatch[1], curIndex, index);\n            continue;\n          }\n\n          // Start tag:\n          var startTagMatch = parseStartTag();\n          if (startTagMatch) {\n            handleStartTag(startTagMatch);\n            continue;\n          }\n        }\n\n        var text = void 0,\n            rest$1 = void 0,\n            next = void 0;\n        if (textEnd > 0) {\n          rest$1 = html.slice(textEnd);\n          while (!endTag.test(rest$1) && !startTagOpen.test(rest$1) && !comment.test(rest$1) && !conditionalComment.test(rest$1)) {\n            // < in plain text, be forgiving and treat it as text\n            next = rest$1.indexOf('<', 1);\n            if (next < 0) {\n              break;\n            }\n            textEnd += next;\n            rest$1 = html.slice(textEnd);\n          }\n          text = html.substring(0, textEnd);\n          advance(textEnd);\n        }\n\n        if (textEnd < 0) {\n          text = html;\n          html = '';\n        }\n\n        if (options.chars && text) {\n          options.chars(text);\n        }\n      } else {\n        var stackedTag = lastTag.toLowerCase();\n        var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n        var endTagLength = 0;\n        var rest = html.replace(reStackedTag, function (all, text, endTag) {\n          endTagLength = endTag.length;\n          if (stackedTag !== 'script' && stackedTag !== 'style' && stackedTag !== 'noscript') {\n            text = text.replace(/<!--([\\s\\S]*?)-->/g, '$1').replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n          }\n          if (options.chars) {\n            options.chars(text);\n          }\n          return '';\n        });\n        index += html.length - rest.length;\n        html = rest;\n        parseEndTag('</' + stackedTag + '>', stackedTag, index - endTagLength, index);\n      }\n\n      if (html === last && options.chars) {\n        options.chars(html);\n        break;\n      }\n    }\n\n    // Clean up any remaining tags\n    parseEndTag();\n\n    function advance(n) {\n      index += n;\n      html = html.substring(n);\n    }\n\n    function parseStartTag() {\n      var start = html.match(startTagOpen);\n      if (start) {\n        var match = {\n          tagName: start[1],\n          attrs: [],\n          start: index\n        };\n        advance(start[0].length);\n        var end, attr;\n        while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n          advance(attr[0].length);\n          match.attrs.push(attr);\n        }\n        if (end) {\n          match.unarySlash = end[1];\n          advance(end[0].length);\n          match.end = index;\n          return match;\n        }\n      }\n    }\n\n    function handleStartTag(match) {\n      var tagName = match.tagName;\n      var unarySlash = match.unarySlash;\n\n      if (expectHTML) {\n        if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n          parseEndTag('', lastTag);\n        }\n        if (canBeLeftOpenTag(tagName) && lastTag === tagName) {\n          parseEndTag('', tagName);\n        }\n      }\n\n      var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;\n\n      var l = match.attrs.length;\n      var attrs = new Array(l);\n      for (var i = 0; i < l; i++) {\n        var args = match.attrs[i];\n        // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n        if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n          if (args[3] === '') {\n            delete args[3];\n          }\n          if (args[4] === '') {\n            delete args[4];\n          }\n          if (args[5] === '') {\n            delete args[5];\n          }\n        }\n        var value = args[3] || args[4] || args[5] || '';\n        attrs[i] = {\n          name: args[1],\n          value: decodeAttr(value, options.shouldDecodeNewlines)\n        };\n      }\n\n      if (!unary) {\n        stack.push({ tag: tagName, attrs: attrs });\n        lastTag = tagName;\n        unarySlash = '';\n      }\n\n      if (options.start) {\n        options.start(tagName, attrs, unary, match.start, match.end);\n      }\n    }\n\n    function parseEndTag(tag, tagName, start, end) {\n      var pos;\n      if (start == null) {\n        start = index;\n      }\n      if (end == null) {\n        end = index;\n      }\n\n      // Find the closest opened tag of the same type\n      if (tagName) {\n        var needle = tagName.toLowerCase();\n        for (pos = stack.length - 1; pos >= 0; pos--) {\n          if (stack[pos].tag.toLowerCase() === needle) {\n            break;\n          }\n        }\n      } else {\n        // If no tag name is provided, clean shop\n        pos = 0;\n      }\n\n      if (pos >= 0) {\n        // Close all the open elements, up the stack\n        for (var i = stack.length - 1; i >= pos; i--) {\n          if (options.end) {\n            options.end(stack[i].tag, start, end);\n          }\n        }\n\n        // Remove the open elements from the stack\n        stack.length = pos;\n        lastTag = pos && stack[pos - 1].tag;\n      } else if (tagName.toLowerCase() === 'br') {\n        if (options.start) {\n          options.start(tagName, [], true, start, end);\n        }\n      } else if (tagName.toLowerCase() === 'p') {\n        if (options.start) {\n          options.start(tagName, [], false, start, end);\n        }\n        if (options.end) {\n          options.end(tagName, start, end);\n        }\n      }\n    }\n  }\n\n  /*  */\n\n  function parseFilters(exp) {\n    var inSingle = false;\n    var inDouble = false;\n    var inTemplateString = false;\n    var inRegex = false;\n    var curly = 0;\n    var square = 0;\n    var paren = 0;\n    var lastFilterIndex = 0;\n    var c, prev, i, expression, filters;\n\n    for (i = 0; i < exp.length; i++) {\n      prev = c;\n      c = exp.charCodeAt(i);\n      if (inSingle) {\n        if (c === 0x27 && prev !== 0x5C) {\n          inSingle = false;\n        }\n      } else if (inDouble) {\n        if (c === 0x22 && prev !== 0x5C) {\n          inDouble = false;\n        }\n      } else if (inTemplateString) {\n        if (c === 0x60 && prev !== 0x5C) {\n          inTemplateString = false;\n        }\n      } else if (inRegex) {\n        if (c === 0x2f && prev !== 0x5C) {\n          inRegex = false;\n        }\n      } else if (c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {\n        if (expression === undefined) {\n          // first filter, end of expression\n          lastFilterIndex = i + 1;\n          expression = exp.slice(0, i).trim();\n        } else {\n          pushFilter();\n        }\n      } else {\n        switch (c) {\n          case 0x22:\n            inDouble = true;break; // \"\n          case 0x27:\n            inSingle = true;break; // '\n          case 0x60:\n            inTemplateString = true;break; // `\n          case 0x28:\n            paren++;break; // (\n          case 0x29:\n            paren--;break; // )\n          case 0x5B:\n            square++;break; // [\n          case 0x5D:\n            square--;break; // ]\n          case 0x7B:\n            curly++;break; // {\n          case 0x7D:\n            curly--;break; // }\n        }\n        if (c === 0x2f) {\n          // /\n          var j = i - 1;\n          var p = void 0;\n          // find first non-whitespace prev char\n          for (; j >= 0; j--) {\n            p = exp.charAt(j);\n            if (p !== ' ') {\n              break;\n            }\n          }\n          if (!p || !/[\\w$]/.test(p)) {\n            inRegex = true;\n          }\n        }\n      }\n    }\n\n    if (expression === undefined) {\n      expression = exp.slice(0, i).trim();\n    } else if (lastFilterIndex !== 0) {\n      pushFilter();\n    }\n\n    function pushFilter() {\n      (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n      lastFilterIndex = i + 1;\n    }\n\n    if (filters) {\n      for (i = 0; i < filters.length; i++) {\n        expression = wrapFilter(expression, filters[i]);\n      }\n    }\n\n    return expression;\n  }\n\n  function wrapFilter(exp, filter) {\n    var i = filter.indexOf('(');\n    if (i < 0) {\n      // _f: resolveFilter\n      return '_f(\"' + filter + '\")(' + exp + ')';\n    } else {\n      var name = filter.slice(0, i);\n      var args = filter.slice(i + 1);\n      return '_f(\"' + name + '\")(' + exp + ',' + args;\n    }\n  }\n\n  /*  */\n\n  var defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\n  var regexEscapeRE = /[-.*+?^${}()|[\\]/\\\\]/g;\n\n  var buildRegex = cached(function (delimiters) {\n    var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n    var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n    return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g');\n  });\n\n  function parseText(text, delimiters) {\n    var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n    if (!tagRE.test(text)) {\n      return;\n    }\n    var tokens = [];\n    var lastIndex = tagRE.lastIndex = 0;\n    var match, index;\n    while (match = tagRE.exec(text)) {\n      index = match.index;\n      // push text token\n      if (index > lastIndex) {\n        tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n      }\n      // tag token\n      var exp = parseFilters(match[1].trim());\n      tokens.push('_s(' + exp + ')');\n      lastIndex = index + match[0].length;\n    }\n    if (lastIndex < text.length) {\n      tokens.push(JSON.stringify(text.slice(lastIndex)));\n    }\n    return tokens.join('+');\n  }\n\n  /*  */\n\n  function baseWarn(msg) {\n    console.error('[Vue parser]: ' + msg);\n  }\n\n  function pluckModuleFunction(modules, key) {\n    return modules ? modules.map(function (m) {\n      return m[key];\n    }).filter(function (_) {\n      return _;\n    }) : [];\n  }\n\n  function addProp(el, name, value) {\n    (el.props || (el.props = [])).push({ name: name, value: value });\n  }\n\n  function addAttr(el, name, value) {\n    (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n  }\n\n  function addDirective(el, name, rawName, value, arg, modifiers) {\n    (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n  }\n\n  function addHandler(el, name, value, modifiers, important) {\n    // check capture modifier\n    if (modifiers && modifiers.capture) {\n      delete modifiers.capture;\n      name = '!' + name; // mark the event as captured\n    }\n    if (modifiers && modifiers.once) {\n      delete modifiers.once;\n      name = '~' + name; // mark the event as once\n    }\n    var events;\n    if (modifiers && modifiers.native) {\n      delete modifiers.native;\n      events = el.nativeEvents || (el.nativeEvents = {});\n    } else {\n      events = el.events || (el.events = {});\n    }\n    var newHandler = { value: value, modifiers: modifiers };\n    var handlers = events[name];\n    /* istanbul ignore if */\n    if (Array.isArray(handlers)) {\n      important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n    } else if (handlers) {\n      events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n    } else {\n      events[name] = newHandler;\n    }\n  }\n\n  function getBindingAttr(el, name, getStatic) {\n    var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);\n    if (dynamicValue != null) {\n      return parseFilters(dynamicValue);\n    } else if (getStatic !== false) {\n      var staticValue = getAndRemoveAttr(el, name);\n      if (staticValue != null) {\n        return JSON.stringify(staticValue);\n      }\n    }\n  }\n\n  function getAndRemoveAttr(el, name) {\n    var val;\n    if ((val = el.attrsMap[name]) != null) {\n      var list = el.attrsList;\n      for (var i = 0, l = list.length; i < l; i++) {\n        if (list[i].name === name) {\n          list.splice(i, 1);\n          break;\n        }\n      }\n    }\n    return val;\n  }\n\n  var len;\n  var str;\n  var chr;\n  var index$1;\n  var expressionPos;\n  var expressionEndPos;\n\n  /**\n   * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n   *\n   * for loop possible cases:\n   *\n   * - test\n   * - test[idx]\n   * - test[test1[idx]]\n   * - test[\"a\"][idx]\n   * - xxx.test[a[a].test1[idx]]\n   * - test.xxx.a[\"asa\"][test1[idx]]\n   *\n   */\n\n  function parseModel(val) {\n    str = val;\n    len = str.length;\n    index$1 = expressionPos = expressionEndPos = 0;\n\n    if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n      return {\n        exp: val,\n        idx: null\n      };\n    }\n\n    while (!eof()) {\n      chr = next\n      /* istanbul ignore if */\n      ();if (isStringStart(chr)) {\n        parseString(chr);\n      } else if (chr === 0x5B) {\n        parseBracket(chr);\n      }\n    }\n\n    return {\n      exp: val.substring(0, expressionPos),\n      idx: val.substring(expressionPos + 1, expressionEndPos)\n    };\n  }\n\n  function next() {\n    return str.charCodeAt(++index$1);\n  }\n\n  function eof() {\n    return index$1 >= len;\n  }\n\n  function isStringStart(chr) {\n    return chr === 0x22 || chr === 0x27;\n  }\n\n  function parseBracket(chr) {\n    var inBracket = 1;\n    expressionPos = index$1;\n    while (!eof()) {\n      chr = next();\n      if (isStringStart(chr)) {\n        parseString(chr);\n        continue;\n      }\n      if (chr === 0x5B) {\n        inBracket++;\n      }\n      if (chr === 0x5D) {\n        inBracket--;\n      }\n      if (inBracket === 0) {\n        expressionEndPos = index$1;\n        break;\n      }\n    }\n  }\n\n  function parseString(chr) {\n    var stringQuote = chr;\n    while (!eof()) {\n      chr = next();\n      if (chr === stringQuote) {\n        break;\n      }\n    }\n  }\n\n  /*  */\n\n  var dirRE = /^v-|^@|^:/;\n  var forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\n  var forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\n  var bindRE = /^:|^v-bind:/;\n  var onRE = /^@|^v-on:/;\n  var argRE = /:(.*)$/;\n  var modifierRE = /\\.[^.]+/g;\n\n  var decodeHTMLCached = cached(decode\n\n  // configurable state\n  );var warn$1;\n  var platformGetTagNamespace;\n  var platformMustUseProp;\n  var platformIsPreTag;\n  var preTransforms;\n  var transforms;\n  var postTransforms;\n  var delimiters;\n\n  /**\n   * Convert HTML string to AST.\n   */\n  function parse(template, options) {\n    warn$1 = options.warn || baseWarn;\n    platformGetTagNamespace = options.getTagNamespace || no;\n    platformMustUseProp = options.mustUseProp || no;\n    platformIsPreTag = options.isPreTag || no;\n    preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n    transforms = pluckModuleFunction(options.modules, 'transformNode');\n    postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n    delimiters = options.delimiters;\n    var stack = [];\n    var preserveWhitespace = options.preserveWhitespace !== false;\n    var root;\n    var currentParent;\n    var inVPre = false;\n    var inPre = false;\n    var warned = false;\n    parseHTML(template, {\n      expectHTML: options.expectHTML,\n      isUnaryTag: options.isUnaryTag,\n      shouldDecodeNewlines: options.shouldDecodeNewlines,\n      start: function start(tag, attrs, unary) {\n        // check namespace.\n        // inherit parent ns if there is one\n        var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag\n\n        // handle IE svg bug\n        /* istanbul ignore if */\n        );if (isIE && ns === 'svg') {\n          attrs = guardIESVGBug(attrs);\n        }\n\n        var element = {\n          type: 1,\n          tag: tag,\n          attrsList: attrs,\n          attrsMap: makeAttrsMap(attrs),\n          parent: currentParent,\n          children: []\n        };\n        if (ns) {\n          element.ns = ns;\n        }\n\n        if (isForbiddenTag(element) && !isServerRendering()) {\n          element.forbidden = true;\n          'development' !== 'production' && warn$1('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + '<' + tag + '>' + ', as they will not be parsed.');\n        }\n\n        // apply pre-transforms\n        for (var i = 0; i < preTransforms.length; i++) {\n          preTransforms[i](element, options);\n        }\n\n        if (!inVPre) {\n          processPre(element);\n          if (element.pre) {\n            inVPre = true;\n          }\n        }\n        if (platformIsPreTag(element.tag)) {\n          inPre = true;\n        }\n        if (inVPre) {\n          processRawAttrs(element);\n        } else {\n          processFor(element);\n          processIf(element);\n          processOnce(element);\n          processKey(element\n\n          // determine whether this is a plain element after\n          // removing structural attributes\n          );element.plain = !element.key && !attrs.length;\n\n          processRef(element);\n          processSlot(element);\n          processComponent(element);\n          for (var i$1 = 0; i$1 < transforms.length; i$1++) {\n            transforms[i$1](element, options);\n          }\n          processAttrs(element);\n        }\n\n        function checkRootConstraints(el) {\n          if ('development' !== 'production' && !warned) {\n            if (el.tag === 'slot' || el.tag === 'template') {\n              warned = true;\n              warn$1('Cannot use <' + el.tag + '> as component root element because it may ' + 'contain multiple nodes:\\n' + template);\n            }\n            if (el.attrsMap.hasOwnProperty('v-for')) {\n              warned = true;\n              warn$1('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements:\\n' + template);\n            }\n          }\n        }\n\n        // tree management\n        if (!root) {\n          root = element;\n          checkRootConstraints(root);\n        } else if (!stack.length) {\n          // allow root elements with v-if, v-else-if and v-else\n          if (root.if && (element.elseif || element.else)) {\n            checkRootConstraints(element);\n            addIfCondition(root, {\n              exp: element.elseif,\n              block: element\n            });\n          } else if ('development' !== 'production' && !warned) {\n            warned = true;\n            warn$1('Component template should contain exactly one root element:' + '\\n\\n' + template + '\\n\\n' + 'If you are using v-if on multiple elements, ' + 'use v-else-if to chain them instead.');\n          }\n        }\n        if (currentParent && !element.forbidden) {\n          if (element.elseif || element.else) {\n            processIfConditions(element, currentParent);\n          } else if (element.slotScope) {\n            // scoped slot\n            currentParent.plain = false;\n            var name = element.slotTarget || 'default';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n          } else {\n            currentParent.children.push(element);\n            element.parent = currentParent;\n          }\n        }\n        if (!unary) {\n          currentParent = element;\n          stack.push(element);\n        }\n        // apply post-transforms\n        for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\n          postTransforms[i$2](element, options);\n        }\n      },\n\n      end: function end() {\n        // remove trailing whitespace\n        var element = stack[stack.length - 1];\n        var lastNode = element.children[element.children.length - 1];\n        if (lastNode && lastNode.type === 3 && lastNode.text === ' ') {\n          element.children.pop();\n        }\n        // pop stack\n        stack.length -= 1;\n        currentParent = stack[stack.length - 1];\n        // check pre state\n        if (element.pre) {\n          inVPre = false;\n        }\n        if (platformIsPreTag(element.tag)) {\n          inPre = false;\n        }\n      },\n\n      chars: function chars(text) {\n        if (!currentParent) {\n          if ('development' !== 'production' && !warned && text === template) {\n            warned = true;\n            warn$1('Component template requires a root element, rather than just text:\\n\\n' + template);\n          }\n          return;\n        }\n        // IE textarea placeholder bug\n        /* istanbul ignore if */\n        if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {\n          return;\n        }\n        var children = currentParent.children;\n        text = inPre || text.trim() ? decodeHTMLCached(text\n        // only preserve whitespace if its not right after a starting tag\n        ) : preserveWhitespace && children.length ? ' ' : '';\n        if (text) {\n          var expression;\n          if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\n            children.push({\n              type: 2,\n              expression: expression,\n              text: text\n            });\n          } else if (text !== ' ' || children[children.length - 1].text !== ' ') {\n            currentParent.children.push({\n              type: 3,\n              text: text\n            });\n          }\n        }\n      }\n    });\n    return root;\n  }\n\n  function processPre(el) {\n    if (getAndRemoveAttr(el, 'v-pre') != null) {\n      el.pre = true;\n    }\n  }\n\n  function processRawAttrs(el) {\n    var l = el.attrsList.length;\n    if (l) {\n      var attrs = el.attrs = new Array(l);\n      for (var i = 0; i < l; i++) {\n        attrs[i] = {\n          name: el.attrsList[i].name,\n          value: JSON.stringify(el.attrsList[i].value)\n        };\n      }\n    } else if (!el.pre) {\n      // non root node in pre blocks with no attributes\n      el.plain = true;\n    }\n  }\n\n  function processKey(el) {\n    var exp = getBindingAttr(el, 'key');\n    if (exp) {\n      if ('development' !== 'production' && el.tag === 'template') {\n        warn$1('<template> cannot be keyed. Place the key on real elements instead.');\n      }\n      el.key = exp;\n    }\n  }\n\n  function processRef(el) {\n    var ref = getBindingAttr(el, 'ref');\n    if (ref) {\n      el.ref = ref;\n      el.refInFor = checkInFor(el);\n    }\n  }\n\n  function processFor(el) {\n    var exp;\n    if (exp = getAndRemoveAttr(el, 'v-for')) {\n      var inMatch = exp.match(forAliasRE);\n      if (!inMatch) {\n        'development' !== 'production' && warn$1('Invalid v-for expression: ' + exp);\n        return;\n      }\n      el.for = inMatch[2].trim();\n      var alias = inMatch[1].trim();\n      var iteratorMatch = alias.match(forIteratorRE);\n      if (iteratorMatch) {\n        el.alias = iteratorMatch[1].trim();\n        el.iterator1 = iteratorMatch[2].trim();\n        if (iteratorMatch[3]) {\n          el.iterator2 = iteratorMatch[3].trim();\n        }\n      } else {\n        el.alias = alias;\n      }\n    }\n  }\n\n  function processIf(el) {\n    var exp = getAndRemoveAttr(el, 'v-if');\n    if (exp) {\n      el.if = exp;\n      addIfCondition(el, {\n        exp: exp,\n        block: el\n      });\n    } else {\n      if (getAndRemoveAttr(el, 'v-else') != null) {\n        el.else = true;\n      }\n      var elseif = getAndRemoveAttr(el, 'v-else-if');\n      if (elseif) {\n        el.elseif = elseif;\n      }\n    }\n  }\n\n  function processIfConditions(el, parent) {\n    var prev = findPrevElement(parent.children);\n    if (prev && prev.if) {\n      addIfCondition(prev, {\n        exp: el.elseif,\n        block: el\n      });\n    } else {\n      warn$1('v-' + (el.elseif ? 'else-if=\"' + el.elseif + '\"' : 'else') + ' ' + 'used on element <' + el.tag + '> without corresponding v-if.');\n    }\n  }\n\n  function findPrevElement(children) {\n    var i = children.length;\n    while (i--) {\n      if (children[i].type === 1) {\n        return children[i];\n      } else {\n        if ('development' !== 'production' && children[i].text !== ' ') {\n          warn$1('text \"' + children[i].text.trim() + '\" between v-if and v-else(-if) ' + 'will be ignored.');\n        }\n        children.pop();\n      }\n    }\n  }\n\n  function addIfCondition(el, condition) {\n    if (!el.ifConditions) {\n      el.ifConditions = [];\n    }\n    el.ifConditions.push(condition);\n  }\n\n  function processOnce(el) {\n    var once = getAndRemoveAttr(el, 'v-once');\n    if (once != null) {\n      el.once = true;\n    }\n  }\n\n  function processSlot(el) {\n    if (el.tag === 'slot') {\n      el.slotName = getBindingAttr(el, 'name');\n      if ('development' !== 'production' && el.key) {\n        warn$1('`key` does not work on <slot> because slots are abstract outlets ' + 'and can possibly expand into multiple elements. ' + 'Use the key on a wrapping element instead.');\n      }\n    } else {\n      var slotTarget = getBindingAttr(el, 'slot');\n      if (slotTarget) {\n        el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n      }\n      if (el.tag === 'template') {\n        el.slotScope = getAndRemoveAttr(el, 'scope');\n      }\n    }\n  }\n\n  function processComponent(el) {\n    var binding;\n    if (binding = getBindingAttr(el, 'is')) {\n      el.component = binding;\n    }\n    if (getAndRemoveAttr(el, 'inline-template') != null) {\n      el.inlineTemplate = true;\n    }\n  }\n\n  function processAttrs(el) {\n    var list = el.attrsList;\n    var i, l, name, rawName, value, arg, modifiers, isProp;\n    for (i = 0, l = list.length; i < l; i++) {\n      name = rawName = list[i].name;\n      value = list[i].value;\n      if (dirRE.test(name)) {\n        // mark element as dynamic\n        el.hasBindings = true;\n        // modifiers\n        modifiers = parseModifiers(name);\n        if (modifiers) {\n          name = name.replace(modifierRE, '');\n        }\n        if (bindRE.test(name)) {\n          // v-bind\n          name = name.replace(bindRE, '');\n          value = parseFilters(value);\n          isProp = false;\n          if (modifiers) {\n            if (modifiers.prop) {\n              isProp = true;\n              name = camelize(name);\n              if (name === 'innerHtml') {\n                name = 'innerHTML';\n              }\n            }\n            if (modifiers.camel) {\n              name = camelize(name);\n            }\n          }\n          if (isProp || platformMustUseProp(el.tag, name)) {\n            addProp(el, name, value);\n          } else {\n            addAttr(el, name, value);\n          }\n        } else if (onRE.test(name)) {\n          // v-on\n          name = name.replace(onRE, '');\n          addHandler(el, name, value, modifiers);\n        } else {\n          // normal directives\n          name = name.replace(dirRE, ''\n          // parse arg\n          );var argMatch = name.match(argRE);\n          if (argMatch && (arg = argMatch[1])) {\n            name = name.slice(0, -(arg.length + 1));\n          }\n          addDirective(el, name, rawName, value, arg, modifiers);\n          if ('development' !== 'production' && name === 'model') {\n            checkForAliasModel(el, value);\n          }\n        }\n      } else {\n        // literal attribute\n        {\n          var expression = parseText(value, delimiters);\n          if (expression) {\n            warn$1(name + '=\"' + value + '\": ' + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.');\n          }\n        }\n        addAttr(el, name, JSON.stringify(value)\n        // #4530 also bind special attributes as props even if they are static\n        // so that patches between dynamic/static are consistent\n        );if (platformMustUseProp(el.tag, name)) {\n          if (name === 'value') {\n            addProp(el, name, JSON.stringify(value));\n          } else {\n            addProp(el, name, 'true');\n          }\n        }\n      }\n    }\n  }\n\n  function checkInFor(el) {\n    var parent = el;\n    while (parent) {\n      if (parent.for !== undefined) {\n        return true;\n      }\n      parent = parent.parent;\n    }\n    return false;\n  }\n\n  function parseModifiers(name) {\n    var match = name.match(modifierRE);\n    if (match) {\n      var ret = {};\n      match.forEach(function (m) {\n        ret[m.slice(1)] = true;\n      });\n      return ret;\n    }\n  }\n\n  function makeAttrsMap(attrs) {\n    var map = {};\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      if ('development' !== 'production' && map[attrs[i].name] && !isIE) {\n        warn$1('duplicate attribute: ' + attrs[i].name);\n      }\n      map[attrs[i].name] = attrs[i].value;\n    }\n    return map;\n  }\n\n  function isForbiddenTag(el) {\n    return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');\n  }\n\n  var ieNSBug = /^xmlns:NS\\d+/;\n  var ieNSPrefix = /^NS\\d+:/;\n\n  /* istanbul ignore next */\n  function guardIESVGBug(attrs) {\n    var res = [];\n    for (var i = 0; i < attrs.length; i++) {\n      var attr = attrs[i];\n      if (!ieNSBug.test(attr.name)) {\n        attr.name = attr.name.replace(ieNSPrefix, '');\n        res.push(attr);\n      }\n    }\n    return res;\n  }\n\n  function checkForAliasModel(el, value) {\n    var _el = el;\n    while (_el) {\n      if (_el.for && _el.alias === value) {\n        warn$1('<' + el.tag + ' v-model=\"' + value + '\">: ' + 'You are binding v-model directly to a v-for iteration alias. ' + 'This will not be able to modify the v-for source array because ' + 'writing to the alias is like modifying a function local variable. ' + 'Consider using an array of objects and use v-model on an object property instead.');\n      }\n      _el = _el.parent;\n    }\n  }\n\n  /*  */\n\n  var isStaticKey;\n  var isPlatformReservedTag;\n\n  var genStaticKeysCached = cached(genStaticKeys$1\n\n  /**\n   * Goal of the optimizer: walk the generated template AST tree\n   * and detect sub-trees that are purely static, i.e. parts of\n   * the DOM that never needs to change.\n   *\n   * Once we detect these sub-trees, we can:\n   *\n   * 1. Hoist them into constants, so that we no longer need to\n   *    create fresh nodes for them on each re-render;\n   * 2. Completely skip them in the patching process.\n   */\n  );function optimize(root, options) {\n    if (!root) {\n      return;\n    }\n    isStaticKey = genStaticKeysCached(options.staticKeys || '');\n    isPlatformReservedTag = options.isReservedTag || no;\n    // first pass: mark all non-static nodes.\n    markStatic(root\n    // second pass: mark static roots.\n    );markStaticRoots(root, false);\n  }\n\n  function genStaticKeys$1(keys) {\n    return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs' + (keys ? ',' + keys : ''));\n  }\n\n  function markStatic(node) {\n    node.static = isStatic(node);\n    if (node.type === 1) {\n      // do not make component slot content static. this avoids\n      // 1. components not able to mutate slot nodes\n      // 2. static slot content fails for hot-reloading\n      if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {\n        return;\n      }\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        var child = node.children[i];\n        markStatic(child);\n        if (!child.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n\n  function markStaticRoots(node, isInFor) {\n    if (node.type === 1) {\n      if (node.static || node.once) {\n        node.staticInFor = isInFor;\n      }\n      // For a node to qualify as a static root, it should have children that\n      // are not just static text. Otherwise the cost of hoisting out will\n      // outweigh the benefits and it's better off to just always render it fresh.\n      if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {\n        node.staticRoot = true;\n        return;\n      } else {\n        node.staticRoot = false;\n      }\n      if (node.children) {\n        for (var i = 0, l = node.children.length; i < l; i++) {\n          markStaticRoots(node.children[i], isInFor || !!node.for);\n        }\n      }\n      if (node.ifConditions) {\n        walkThroughConditionsBlocks(node.ifConditions, isInFor);\n      }\n    }\n  }\n\n  function walkThroughConditionsBlocks(conditionBlocks, isInFor) {\n    for (var i = 1, len = conditionBlocks.length; i < len; i++) {\n      markStaticRoots(conditionBlocks[i].block, isInFor);\n    }\n  }\n\n  function isStatic(node) {\n    if (node.type === 2) {\n      // expression\n      return false;\n    }\n    if (node.type === 3) {\n      // text\n      return true;\n    }\n    return !!(node.pre || !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));\n  }\n\n  function isDirectChildOfTemplateFor(node) {\n    while (node.parent) {\n      node = node.parent;\n      if (node.tag !== 'template') {\n        return false;\n      }\n      if (node.for) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /*  */\n\n  var fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\n  var simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n  // keyCode aliases\n  var keyCodes = {\n    esc: 27,\n    tab: 9,\n    enter: 13,\n    space: 32,\n    up: 38,\n    left: 37,\n    right: 39,\n    down: 40,\n    'delete': [8, 46]\n  };\n\n  var modifierCode = {\n    stop: '$event.stopPropagation();',\n    prevent: '$event.preventDefault();',\n    self: 'if($event.target !== $event.currentTarget)return;',\n    ctrl: 'if(!$event.ctrlKey)return;',\n    shift: 'if(!$event.shiftKey)return;',\n    alt: 'if(!$event.altKey)return;',\n    meta: 'if(!$event.metaKey)return;'\n  };\n\n  function genHandlers(events, native) {\n    var res = native ? 'nativeOn:{' : 'on:{';\n    for (var name in events) {\n      res += '\"' + name + '\":' + genHandler(name, events[name]) + ',';\n    }\n    return res.slice(0, -1) + '}';\n  }\n\n  function genHandler(name, handler) {\n    if (!handler) {\n      return 'function(){}';\n    } else if (Array.isArray(handler)) {\n      return '[' + handler.map(function (handler) {\n        return genHandler(name, handler);\n      }).join(',') + ']';\n    } else if (!handler.modifiers) {\n      return fnExpRE.test(handler.value) || simplePathRE.test(handler.value) ? handler.value : 'function($event){' + handler.value + '}';\n    } else {\n      var code = '';\n      var keys = [];\n      for (var key in handler.modifiers) {\n        if (modifierCode[key]) {\n          code += modifierCode[key];\n        } else {\n          keys.push(key);\n        }\n      }\n      if (keys.length) {\n        code = genKeyFilter(keys) + code;\n      }\n      var handlerCode = simplePathRE.test(handler.value) ? handler.value + '($event)' : handler.value;\n      return 'function($event){' + code + handlerCode + '}';\n    }\n  }\n\n  function genKeyFilter(keys) {\n    return 'if(' + keys.map(genFilterCode).join('&&') + ')return;';\n  }\n\n  function genFilterCode(key) {\n    var keyVal = parseInt(key, 10);\n    if (keyVal) {\n      return '$event.keyCode!==' + keyVal;\n    }\n    var alias = keyCodes[key];\n    return '_k($event.keyCode,' + JSON.stringify(key) + (alias ? ',' + JSON.stringify(alias) : '') + ')';\n  }\n\n  /*  */\n\n  function bind$2(el, dir) {\n    el.wrapData = function (code) {\n      return '_b(' + code + \",'\" + el.tag + \"',\" + dir.value + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + ')';\n    };\n  }\n\n  /*  */\n\n  var baseDirectives = {\n    bind: bind$2,\n    cloak: noop\n\n    /*  */\n\n    // configurable state\n  };var warn$2;\n  var transforms$1;\n  var dataGenFns;\n  var platformDirectives$1;\n  var isPlatformReservedTag$1;\n  var staticRenderFns;\n  var onceCount;\n  var currentOptions;\n\n  function generate(ast, options) {\n    // save previous staticRenderFns so generate calls can be nested\n    var prevStaticRenderFns = staticRenderFns;\n    var currentStaticRenderFns = staticRenderFns = [];\n    var prevOnceCount = onceCount;\n    onceCount = 0;\n    currentOptions = options;\n    warn$2 = options.warn || baseWarn;\n    transforms$1 = pluckModuleFunction(options.modules, 'transformCode');\n    dataGenFns = pluckModuleFunction(options.modules, 'genData');\n    platformDirectives$1 = options.directives || {};\n    isPlatformReservedTag$1 = options.isReservedTag || no;\n    var code = ast ? genElement(ast) : '_c(\"div\")';\n    staticRenderFns = prevStaticRenderFns;\n    onceCount = prevOnceCount;\n    return {\n      render: 'with(this){return ' + code + '}',\n      staticRenderFns: currentStaticRenderFns\n    };\n  }\n\n  function genElement(el) {\n    if (el.staticRoot && !el.staticProcessed) {\n      return genStatic(el);\n    } else if (el.once && !el.onceProcessed) {\n      return genOnce(el);\n    } else if (el.for && !el.forProcessed) {\n      return genFor(el);\n    } else if (el.if && !el.ifProcessed) {\n      return genIf(el);\n    } else if (el.tag === 'template' && !el.slotTarget) {\n      return genChildren(el) || 'void 0';\n    } else if (el.tag === 'slot') {\n      return genSlot(el);\n    } else {\n      // component or element\n      var code;\n      if (el.component) {\n        code = genComponent(el.component, el);\n      } else {\n        var data = el.plain ? undefined : genData(el);\n\n        var children = el.inlineTemplate ? null : genChildren(el, true);\n        code = \"_c('\" + el.tag + \"'\" + (data ? ',' + data : '') + (children ? ',' + children : '') + ')';\n      }\n      // module transforms\n      for (var i = 0; i < transforms$1.length; i++) {\n        code = transforms$1[i](el, code);\n      }\n      return code;\n    }\n  }\n\n  // hoist static sub-trees out\n  function genStatic(el) {\n    el.staticProcessed = true;\n    staticRenderFns.push('with(this){return ' + genElement(el) + '}');\n    return '_m(' + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ')';\n  }\n\n  // v-once\n  function genOnce(el) {\n    el.onceProcessed = true;\n    if (el.if && !el.ifProcessed) {\n      return genIf(el);\n    } else if (el.staticInFor) {\n      var key = '';\n      var parent = el.parent;\n      while (parent) {\n        if (parent.for) {\n          key = parent.key;\n          break;\n        }\n        parent = parent.parent;\n      }\n      if (!key) {\n        'development' !== 'production' && warn$2('v-once can only be used inside v-for that is keyed. ');\n        return genElement(el);\n      }\n      return '_o(' + genElement(el) + ',' + onceCount++ + (key ? ',' + key : '') + ')';\n    } else {\n      return genStatic(el);\n    }\n  }\n\n  function genIf(el) {\n    el.ifProcessed = true; // avoid recursion\n    return genIfConditions(el.ifConditions.slice());\n  }\n\n  function genIfConditions(conditions) {\n    if (!conditions.length) {\n      return '_e()';\n    }\n\n    var condition = conditions.shift();\n    if (condition.exp) {\n      return '(' + condition.exp + ')?' + genTernaryExp(condition.block) + ':' + genIfConditions(conditions);\n    } else {\n      return '' + genTernaryExp(condition.block);\n    }\n\n    // v-if with v-once should generate code like (a)?_m(0):_m(1)\n    function genTernaryExp(el) {\n      return el.once ? genOnce(el) : genElement(el);\n    }\n  }\n\n  function genFor(el) {\n    var exp = el.for;\n    var alias = el.alias;\n    var iterator1 = el.iterator1 ? ',' + el.iterator1 : '';\n    var iterator2 = el.iterator2 ? ',' + el.iterator2 : '';\n    el.forProcessed = true; // avoid recursion\n    return '_l((' + exp + '),' + 'function(' + alias + iterator1 + iterator2 + '){' + 'return ' + genElement(el) + '})';\n  }\n\n  function genData(el) {\n    var data = '{';\n\n    // directives first.\n    // directives may mutate the el's other properties before they are generated.\n    var dirs = genDirectives(el);\n    if (dirs) {\n      data += dirs + ',';\n    }\n\n    // key\n    if (el.key) {\n      data += 'key:' + el.key + ',';\n    }\n    // ref\n    if (el.ref) {\n      data += 'ref:' + el.ref + ',';\n    }\n    if (el.refInFor) {\n      data += 'refInFor:true,';\n    }\n    // pre\n    if (el.pre) {\n      data += 'pre:true,';\n    }\n    // record original tag name for components using \"is\" attribute\n    if (el.component) {\n      data += 'tag:\"' + el.tag + '\",';\n    }\n    // module data generation functions\n    for (var i = 0; i < dataGenFns.length; i++) {\n      data += dataGenFns[i](el);\n    }\n    // attributes\n    if (el.attrs) {\n      data += 'attrs:{' + genProps(el.attrs) + '},';\n    }\n    // DOM props\n    if (el.props) {\n      data += 'domProps:{' + genProps(el.props) + '},';\n    }\n    // event handlers\n    if (el.events) {\n      data += genHandlers(el.events) + ',';\n    }\n    if (el.nativeEvents) {\n      data += genHandlers(el.nativeEvents, true) + ',';\n    }\n    // slot target\n    if (el.slotTarget) {\n      data += 'slot:' + el.slotTarget + ',';\n    }\n    // scoped slots\n    if (el.scopedSlots) {\n      data += genScopedSlots(el.scopedSlots) + ',';\n    }\n    // inline-template\n    if (el.inlineTemplate) {\n      var inlineTemplate = genInlineTemplate(el);\n      if (inlineTemplate) {\n        data += inlineTemplate + ',';\n      }\n    }\n    data = data.replace(/,$/, '') + '}';\n    // v-bind data wrap\n    if (el.wrapData) {\n      data = el.wrapData(data);\n    }\n    return data;\n  }\n\n  function genDirectives(el) {\n    var dirs = el.directives;\n    if (!dirs) {\n      return;\n    }\n    var res = 'directives:[';\n    var hasRuntime = false;\n    var i, l, dir, needRuntime;\n    for (i = 0, l = dirs.length; i < l; i++) {\n      dir = dirs[i];\n      needRuntime = true;\n      var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];\n      if (gen) {\n        // compile-time directive that manipulates AST.\n        // returns true if it also needs a runtime counterpart.\n        needRuntime = !!gen(el, dir, warn$2);\n      }\n      if (needRuntime) {\n        hasRuntime = true;\n        res += '{name:\"' + dir.name + '\",rawName:\"' + dir.rawName + '\"' + (dir.value ? ',value:(' + dir.value + '),expression:' + JSON.stringify(dir.value) : '') + (dir.arg ? ',arg:\"' + dir.arg + '\"' : '') + (dir.modifiers ? ',modifiers:' + JSON.stringify(dir.modifiers) : '') + '},';\n      }\n    }\n    if (hasRuntime) {\n      return res.slice(0, -1) + ']';\n    }\n  }\n\n  function genInlineTemplate(el) {\n    var ast = el.children[0];\n    if ('development' !== 'production' && (el.children.length > 1 || ast.type !== 1)) {\n      warn$2('Inline-template components must have exactly one child element.');\n    }\n    if (ast.type === 1) {\n      var inlineRenderFns = generate(ast, currentOptions);\n      return 'inlineTemplate:{render:function(){' + inlineRenderFns.render + '},staticRenderFns:[' + inlineRenderFns.staticRenderFns.map(function (code) {\n        return 'function(){' + code + '}';\n      }).join(',') + ']}';\n    }\n  }\n\n  function genScopedSlots(slots) {\n    return 'scopedSlots:{' + Object.keys(slots).map(function (key) {\n      return genScopedSlot(key, slots[key]);\n    }).join(',') + '}';\n  }\n\n  function genScopedSlot(key, el) {\n    return key + ':function(' + String(el.attrsMap.scope) + '){' + 'return ' + (el.tag === 'template' ? genChildren(el) || 'void 0' : genElement(el)) + '}';\n  }\n\n  function genChildren(el, checkSkip) {\n    var children = el.children;\n    if (children.length) {\n      var el$1 = children[0];\n      // optimize single v-for\n      if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {\n        return genElement(el$1);\n      }\n      var normalizationType = getNormalizationType(children);\n      return '[' + children.map(genNode).join(',') + ']' + (checkSkip ? normalizationType ? ',' + normalizationType : '' : '');\n    }\n  }\n\n  // determine the normalization needed for the children array.\n  // 0: no normalization needed\n  // 1: simple normalization needed (possible 1-level deep nested array)\n  // 2: full normalization needed\n  function getNormalizationType(children) {\n    var res = 0;\n    for (var i = 0; i < children.length; i++) {\n      var el = children[i];\n      if (needsNormalization(el) || el.if && el.ifConditions.some(function (c) {\n        return needsNormalization(c.block);\n      })) {\n        res = 2;\n        break;\n      }\n      if (maybeComponent(el) || el.if && el.ifConditions.some(function (c) {\n        return maybeComponent(c.block);\n      })) {\n        res = 1;\n      }\n    }\n    return res;\n  }\n\n  function needsNormalization(el) {\n    return el.for || el.tag === 'template' || el.tag === 'slot';\n  }\n\n  function maybeComponent(el) {\n    return el.type === 1 && !isPlatformReservedTag$1(el.tag);\n  }\n\n  function genNode(node) {\n    if (node.type === 1) {\n      return genElement(node);\n    } else {\n      return genText(node);\n    }\n  }\n\n  function genText(text) {\n    return '_v(' + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + ')';\n  }\n\n  function genSlot(el) {\n    var slotName = el.slotName || '\"default\"';\n    var children = genChildren(el);\n    var res = '_t(' + slotName + (children ? ',' + children : '');\n    var attrs = el.attrs && '{' + el.attrs.map(function (a) {\n      return camelize(a.name) + ':' + a.value;\n    }).join(',') + '}';\n    var bind$$1 = el.attrsMap['v-bind'];\n    if ((attrs || bind$$1) && !children) {\n      res += ',null';\n    }\n    if (attrs) {\n      res += ',' + attrs;\n    }\n    if (bind$$1) {\n      res += (attrs ? '' : ',null') + ',' + bind$$1;\n    }\n    return res + ')';\n  }\n\n  // componentName is el.component, take it as argument to shun flow's pessimistic refinement\n  function genComponent(componentName, el) {\n    var children = el.inlineTemplate ? null : genChildren(el, true);\n    return '_c(' + componentName + ',' + genData(el) + (children ? ',' + children : '') + ')';\n  }\n\n  function genProps(props) {\n    var res = '';\n    for (var i = 0; i < props.length; i++) {\n      var prop = props[i];\n      res += '\"' + prop.name + '\":' + transformSpecialNewlines(prop.value) + ',';\n    }\n    return res.slice(0, -1);\n  }\n\n  // #3895, #4268\n  function transformSpecialNewlines(text) {\n    return text.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\n  }\n\n  /*  */\n\n  /**\n   * Compile a template.\n   */\n  function compile$1(template, options) {\n    var ast = parse(template.trim(), options);\n    optimize(ast, options);\n    var code = generate(ast, options);\n    return {\n      ast: ast,\n      render: code.render,\n      staticRenderFns: code.staticRenderFns\n    };\n  }\n\n  /*  */\n\n  // operators like typeof, instanceof and in are allowed\n  var prohibitedKeywordRE = new RegExp('\\\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\\\b|\\\\b') + '\\\\b');\n  // check valid identifier for v-for\n  var identRE = /[A-Za-z_$][\\w$]*/;\n  // strip strings in expressions\n  var stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n  // detect problematic expressions in a template\n  function detectErrors(ast) {\n    var errors = [];\n    if (ast) {\n      checkNode(ast, errors);\n    }\n    return errors;\n  }\n\n  function checkNode(node, errors) {\n    if (node.type === 1) {\n      for (var name in node.attrsMap) {\n        if (dirRE.test(name)) {\n          var value = node.attrsMap[name];\n          if (value) {\n            if (name === 'v-for') {\n              checkFor(node, 'v-for=\"' + value + '\"', errors);\n            } else {\n              checkExpression(value, name + '=\"' + value + '\"', errors);\n            }\n          }\n        }\n      }\n      if (node.children) {\n        for (var i = 0; i < node.children.length; i++) {\n          checkNode(node.children[i], errors);\n        }\n      }\n    } else if (node.type === 2) {\n      checkExpression(node.expression, node.text, errors);\n    }\n  }\n\n  function checkFor(node, text, errors) {\n    checkExpression(node.for || '', text, errors);\n    checkIdentifier(node.alias, 'v-for alias', text, errors);\n    checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n    checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n  }\n\n  function checkIdentifier(ident, type, text, errors) {\n    if (typeof ident === 'string' && !identRE.test(ident)) {\n      errors.push('- invalid ' + type + ' \"' + ident + '\" in expression: ' + text);\n    }\n  }\n\n  function checkExpression(exp, text, errors) {\n    try {\n      new Function('return ' + exp);\n    } catch (e) {\n      var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n      if (keywordMatch) {\n        errors.push('- avoid using JavaScript keyword as property name: ' + '\"' + keywordMatch[0] + '\" in expression ' + text);\n      } else {\n        errors.push('- invalid expression: ' + text);\n      }\n    }\n  }\n\n  /*  */\n\n  function transformNode(el, options) {\n    var warn = options.warn || baseWarn;\n    var staticClass = getAndRemoveAttr(el, 'class');\n    if ('development' !== 'production' && staticClass) {\n      var expression = parseText(staticClass, options.delimiters);\n      if (expression) {\n        warn('class=\"' + staticClass + '\": ' + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.');\n      }\n    }\n    if (staticClass) {\n      el.staticClass = JSON.stringify(staticClass);\n    }\n    var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n    if (classBinding) {\n      el.classBinding = classBinding;\n    }\n  }\n\n  function genData$1(el) {\n    var data = '';\n    if (el.staticClass) {\n      data += 'staticClass:' + el.staticClass + ',';\n    }\n    if (el.classBinding) {\n      data += 'class:' + el.classBinding + ',';\n    }\n    return data;\n  }\n\n  var klass$1 = {\n    staticKeys: ['staticClass'],\n    transformNode: transformNode,\n    genData: genData$1\n\n    /*  */\n\n  };function transformNode$1(el, options) {\n    var warn = options.warn || baseWarn;\n    var staticStyle = getAndRemoveAttr(el, 'style');\n    if (staticStyle) {\n      /* istanbul ignore if */\n      {\n        var expression = parseText(staticStyle, options.delimiters);\n        if (expression) {\n          warn('style=\"' + staticStyle + '\": ' + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.');\n        }\n      }\n      el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n    }\n\n    var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n    if (styleBinding) {\n      el.styleBinding = styleBinding;\n    }\n  }\n\n  function genData$2(el) {\n    var data = '';\n    if (el.staticStyle) {\n      data += 'staticStyle:' + el.staticStyle + ',';\n    }\n    if (el.styleBinding) {\n      data += 'style:(' + el.styleBinding + '),';\n    }\n    return data;\n  }\n\n  var style$1 = {\n    staticKeys: ['staticStyle'],\n    transformNode: transformNode$1,\n    genData: genData$2\n  };\n\n  var modules$1 = [klass$1, style$1];\n\n  /*  */\n\n  var warn$3;\n\n  function model$1(el, dir, _warn) {\n    warn$3 = _warn;\n    var value = dir.value;\n    var modifiers = dir.modifiers;\n    var tag = el.tag;\n    var type = el.attrsMap.type;\n    {\n      var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n      if (tag === 'input' && dynamicType) {\n        warn$3('<input :type=\"' + dynamicType + '\" v-model=\"' + value + '\">:\\n' + 'v-model does not support dynamic input types. Use v-if branches instead.');\n      }\n    }\n    if (tag === 'select') {\n      genSelect(el, value, modifiers);\n    } else if (tag === 'input' && type === 'checkbox') {\n      genCheckboxModel(el, value, modifiers);\n    } else if (tag === 'input' && type === 'radio') {\n      genRadioModel(el, value, modifiers);\n    } else {\n      genDefaultModel(el, value, modifiers);\n    }\n    // ensure runtime directive metadata\n    return true;\n  }\n\n  function genCheckboxModel(el, value, modifiers) {\n    if ('development' !== 'production' && el.attrsMap.checked != null) {\n      warn$3('<' + el.tag + ' v-model=\"' + value + '\" checked>:\\n' + 'inline checked attributes will be ignored when using v-model. ' + 'Declare initial values in the component\\'s data option instead.');\n    }\n    var number = modifiers && modifiers.number;\n    var valueBinding = getBindingAttr(el, 'value') || 'null';\n    var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n    var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n    addProp(el, 'checked', 'Array.isArray(' + value + ')' + '?_i(' + value + ',' + valueBinding + ')>-1' + (trueValueBinding === 'true' ? ':(' + value + ')' : ':_q(' + value + ',' + trueValueBinding + ')'));\n    addHandler(el, 'change', 'var $$a=' + value + ',' + '$$el=$event.target,' + '$$c=$$el.checked?(' + trueValueBinding + '):(' + falseValueBinding + ');' + 'if(Array.isArray($$a)){' + 'var $$v=' + (number ? '_n(' + valueBinding + ')' : valueBinding) + ',' + '$$i=_i($$a,$$v);' + 'if($$c){$$i<0&&(' + value + '=$$a.concat($$v))}' + 'else{$$i>-1&&(' + value + '=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}' + '}else{' + value + '=$$c}', null, true);\n  }\n\n  function genRadioModel(el, value, modifiers) {\n    if ('development' !== 'production' && el.attrsMap.checked != null) {\n      warn$3('<' + el.tag + ' v-model=\"' + value + '\" checked>:\\n' + 'inline checked attributes will be ignored when using v-model. ' + 'Declare initial values in the component\\'s data option instead.');\n    }\n    var number = modifiers && modifiers.number;\n    var valueBinding = getBindingAttr(el, 'value') || 'null';\n    valueBinding = number ? '_n(' + valueBinding + ')' : valueBinding;\n    addProp(el, 'checked', '_q(' + value + ',' + valueBinding + ')');\n    addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n  }\n\n  function genDefaultModel(el, value, modifiers) {\n    {\n      if (el.tag === 'input' && el.attrsMap.value) {\n        warn$3('<' + el.tag + ' v-model=\"' + value + '\" value=\"' + el.attrsMap.value + '\">:\\n' + 'inline value attributes will be ignored when using v-model. ' + 'Declare initial values in the component\\'s data option instead.');\n      }\n      if (el.tag === 'textarea' && el.children.length) {\n        warn$3('<textarea v-model=\"' + value + '\">:\\n' + 'inline content inside <textarea> will be ignored when using v-model. ' + 'Declare initial values in the component\\'s data option instead.');\n      }\n    }\n\n    var type = el.attrsMap.type;\n    var ref = modifiers || {};\n    var lazy = ref.lazy;\n    var number = ref.number;\n    var trim = ref.trim;\n    var event = lazy || isIE && type === 'range' ? 'change' : 'input';\n    var needCompositionGuard = !lazy && type !== 'range';\n    var isNative = el.tag === 'input' || el.tag === 'textarea';\n\n    var valueExpression = isNative ? '$event.target.value' + (trim ? '.trim()' : '') : trim ? \"(typeof $event === 'string' ? $event.trim() : $event)\" : '$event';\n    valueExpression = number || type === 'number' ? '_n(' + valueExpression + ')' : valueExpression;\n\n    var code = genAssignmentCode(value, valueExpression);\n    if (isNative && needCompositionGuard) {\n      code = 'if($event.target.composing)return;' + code;\n    }\n\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if ('development' !== 'production' && type === 'file') {\n      warn$3('<' + el.tag + ' v-model=\"' + value + '\" type=\"file\">:\\n' + 'File inputs are read only. Use a v-on:change listener instead.');\n    }\n\n    addProp(el, 'value', isNative ? '_s(' + value + ')' : '(' + value + ')');\n    addHandler(el, event, code, null, true);\n    if (trim || number || type === 'number') {\n      addHandler(el, 'blur', '$forceUpdate()');\n    }\n  }\n\n  function genSelect(el, value, modifiers) {\n    {\n      el.children.some(checkOptionWarning);\n    }\n\n    var number = modifiers && modifiers.number;\n    var assignment = 'Array.prototype.filter' + '.call($event.target.options,function(o){return o.selected})' + '.map(function(o){var val = \"_value\" in o ? o._value : o.value;' + 'return ' + (number ? '_n(val)' : 'val') + '})' + (el.attrsMap.multiple == null ? '[0]' : '');\n\n    var code = genAssignmentCode(value, assignment);\n    addHandler(el, 'change', code, null, true);\n  }\n\n  function checkOptionWarning(option) {\n    if (option.type === 1 && option.tag === 'option' && option.attrsMap.selected != null) {\n      warn$3('<select v-model=\"' + option.parent.attrsMap['v-model'] + '\">:\\n' + 'inline selected attributes on <option> will be ignored when using v-model. ' + 'Declare initial values in the component\\'s data option instead.');\n      return true;\n    }\n    return false;\n  }\n\n  function genAssignmentCode(value, assignment) {\n    var modelRs = parseModel(value);\n    if (modelRs.idx === null) {\n      return value + '=' + assignment;\n    } else {\n      return 'var $$exp = ' + modelRs.exp + ', $$idx = ' + modelRs.idx + ';' + 'if (!Array.isArray($$exp)){' + value + '=' + assignment + '}' + 'else{$$exp.splice($$idx, 1, ' + assignment + ')}';\n    }\n  }\n\n  /*  */\n\n  function text(el, dir) {\n    if (dir.value) {\n      addProp(el, 'textContent', '_s(' + dir.value + ')');\n    }\n  }\n\n  /*  */\n\n  function html(el, dir) {\n    if (dir.value) {\n      addProp(el, 'innerHTML', '_s(' + dir.value + ')');\n    }\n  }\n\n  var directives$1 = {\n    model: model$1,\n    text: text,\n    html: html\n\n    /*  */\n\n  };var cache = Object.create(null);\n\n  var baseOptions = {\n    expectHTML: true,\n    modules: modules$1,\n    staticKeys: genStaticKeys(modules$1),\n    directives: directives$1,\n    isReservedTag: isReservedTag,\n    isUnaryTag: isUnaryTag,\n    mustUseProp: mustUseProp,\n    getTagNamespace: getTagNamespace,\n    isPreTag: isPreTag\n  };\n\n  function compile$$1(template, options) {\n    options = options ? extend(extend({}, baseOptions), options) : baseOptions;\n    return compile$1(template, options);\n  }\n\n  function compileToFunctions(template, options, vm) {\n    var _warn = options && options.warn || warn;\n    // detect possible CSP restriction\n    /* istanbul ignore if */\n    {\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          _warn('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');\n        }\n      }\n    }\n    var key = options && options.delimiters ? String(options.delimiters) + template : template;\n    if (cache[key]) {\n      return cache[key];\n    }\n    var res = {};\n    var compiled = compile$$1(template, options);\n    res.render = makeFunction(compiled.render);\n    var l = compiled.staticRenderFns.length;\n    res.staticRenderFns = new Array(l);\n    for (var i = 0; i < l; i++) {\n      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i]);\n    }\n    {\n      if (res.render === noop || res.staticRenderFns.some(function (fn) {\n        return fn === noop;\n      })) {\n        _warn('failed to compile template:\\n\\n' + template + '\\n\\n' + detectErrors(compiled.ast).join('\\n') + '\\n\\n', vm);\n      }\n    }\n    return cache[key] = res;\n  }\n\n  function makeFunction(code) {\n    try {\n      return new Function(code);\n    } catch (e) {\n      return noop;\n    }\n  }\n\n  /*  */\n\n  var idToTemplate = cached(function (id) {\n    var el = query(id);\n    return el && el.innerHTML;\n  });\n\n  var mount = Vue$3.prototype.$mount;\n  Vue$3.prototype.$mount = function (el, hydrating) {\n    el = el && query(el\n\n    /* istanbul ignore if */\n    );if (el === document.body || el === document.documentElement) {\n      'development' !== 'production' && warn('Do not mount Vue to <html> or <body> - mount to normal elements instead.');\n      return this;\n    }\n\n    var options = this.$options;\n    // resolve template/el and convert to render function\n    if (!options.render) {\n      var template = options.template;\n      if (template) {\n        if (typeof template === 'string') {\n          if (template.charAt(0) === '#') {\n            template = idToTemplate(template\n            /* istanbul ignore if */\n            );if ('development' !== 'production' && !template) {\n              warn('Template element not found or is empty: ' + options.template, this);\n            }\n          }\n        } else if (template.nodeType) {\n          template = template.innerHTML;\n        } else {\n          {\n            warn('invalid template option:' + template, this);\n          }\n          return this;\n        }\n      } else if (el) {\n        template = getOuterHTML(el);\n      }\n      if (template) {\n        var ref = compileToFunctions(template, {\n          warn: warn,\n          shouldDecodeNewlines: shouldDecodeNewlines,\n          delimiters: options.delimiters\n        }, this);\n        var render = ref.render;\n        var staticRenderFns = ref.staticRenderFns;\n        options.render = render;\n        options.staticRenderFns = staticRenderFns;\n      }\n    }\n    return mount.call(this, el, hydrating);\n  };\n\n  /**\n   * Get outerHTML of elements, taking care\n   * of SVG elements in IE as well.\n   */\n  function getOuterHTML(el) {\n    if (el.outerHTML) {\n      return el.outerHTML;\n    } else {\n      var container = document.createElement('div');\n      container.appendChild(el.cloneNode(true));\n      return container.innerHTML;\n    }\n  }\n\n  Vue$3.compile = compileToFunctions;\n\n  return Vue$3;\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

eval("(function(root, factory) {\n\n  if (true) {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = factory(root, exports);\n    }\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], function(exports) {\n      root.Lockr = factory(root, exports);\n    });\n  } else {\n    root.Lockr = factory(root, {});\n  }\n\n}(this, function(root, Lockr) {\n  'use strict';\n\n  if (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(elt /*, from*/)\n    {\n      var len = this.length >>> 0;\n\n      var from = Number(arguments[1]) || 0;\n      from = (from < 0)\n      ? Math.ceil(from)\n      : Math.floor(from);\n      if (from < 0)\n        from += len;\n\n      for (; from < len; from++)\n      {\n        if (from in this &&\n            this[from] === elt)\n          return from;\n      }\n      return -1;\n    };\n  }\n\n  Lockr.prefix = \"\";\n\n  Lockr._getPrefixedKey = function(key, options) {\n    options = options || {};\n\n    if (options.noPrefix) {\n      return key;\n    } else {\n      return this.prefix + key;\n    }\n\n  };\n\n  Lockr.set = function (key, value, options) {\n    var query_key = this._getPrefixedKey(key, options);\n\n    try {\n      localStorage.setItem(query_key, JSON.stringify({\"data\": value}));\n    } catch (e) {\n      if (console) console.warn(\"Lockr didn't successfully save the '{\"+ key +\": \"+ value +\"}' pair, because the localStorage is full.\");\n    }\n  };\n\n  Lockr.get = function (key, missing, options) {\n    var query_key = this._getPrefixedKey(key, options),\n        value;\n\n    try {\n      value = JSON.parse(localStorage.getItem(query_key));\n    } catch (e) {\n        try {\n            if(localStorage[query_key]) {\n                value = JSON.parse('{\"data\":\"' + localStorage.getItem(query_key) + '\"}');\n            } else{\n                value = null;\n            }\n        } catch (e) {\n            if (console) console.warn(\"Lockr could not load the item with key \" + key);\n        }\n    }\n    if(value === null) {\n      return missing;\n    } else if (typeof value.data !== 'undefined') {\n      return value.data;\n    } else {\n      return missing;\n    }\n  };\n\n  Lockr.sadd = function(key, value, options) {\n    var query_key = this._getPrefixedKey(key, options),\n        json;\n\n    var values = Lockr.smembers(key);\n\n    if (values.indexOf(value) > -1) {\n      return null;\n    }\n\n    try {\n      values.push(value);\n      json = JSON.stringify({\"data\": values});\n      localStorage.setItem(query_key, json);\n    } catch (e) {\n      console.log(e);\n      if (console) console.warn(\"Lockr didn't successfully add the \"+ value +\" to \"+ key +\" set, because the localStorage is full.\");\n    }\n  };\n\n  Lockr.smembers = function(key, options) {\n    var query_key = this._getPrefixedKey(key, options),\n        value;\n\n    try {\n      value = JSON.parse(localStorage.getItem(query_key));\n    } catch (e) {\n      value = null;\n    }\n\n    if (value === null)\n      return [];\n    else\n      return (value.data || []);\n  };\n\n  Lockr.sismember = function(key, value, options) {\n    var query_key = this._getPrefixedKey(key, options);\n\n    return Lockr.smembers(key).indexOf(value) > -1;\n  };\n\n  Lockr.getAll = function () {\n    var keys = Object.keys(localStorage);\n\n    return keys.map(function (key) {\n      return Lockr.get(key);\n    });\n  };\n\n  Lockr.srem = function(key, value, options) {\n    var query_key = this._getPrefixedKey(key, options),\n        json,\n        index;\n\n    var values = Lockr.smembers(key, value);\n\n    index = values.indexOf(value);\n\n    if (index > -1)\n      values.splice(index, 1);\n\n    json = JSON.stringify({\"data\": values});\n\n    try {\n      localStorage.setItem(query_key, json);\n    } catch (e) {\n      if (console) console.warn(\"Lockr couldn't remove the \"+ value +\" from the set \"+ key);\n    }\n  };\n\n  Lockr.rm =  function (key) {\n    localStorage.removeItem(key);\n  };\n\n  Lockr.flush = function () {\n    localStorage.clear();\n  };\n  return Lockr;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2xvY2tyL2xvY2tyLmpzP2Q5NzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsaUNBQWlDO0FBQ2pDOztBQUVBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHNEQUFzRCxjQUFjO0FBQ3BFLEtBQUs7QUFDTCxzRUFBc0UsdUJBQXVCO0FBQzdGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHFDQUFxQyxpREFBaUQ7QUFDdEYsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkJBQTZCLGVBQWU7QUFDNUM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSwyQkFBMkIsZUFBZTs7QUFFMUM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUMiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuXG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnkocm9vdCwgZXhwb3J0cyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnXSwgZnVuY3Rpb24oZXhwb3J0cykge1xuICAgICAgcm9vdC5Mb2NrciA9IGZhY3Rvcnkocm9vdCwgZXhwb3J0cyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5Mb2NrciA9IGZhY3Rvcnkocm9vdCwge30pO1xuICB9XG5cbn0odGhpcywgZnVuY3Rpb24ocm9vdCwgTG9ja3IpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uKGVsdCAvKiwgZnJvbSovKVxuICAgIHtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCA+Pj4gMDtcblxuICAgICAgdmFyIGZyb20gPSBOdW1iZXIoYXJndW1lbnRzWzFdKSB8fCAwO1xuICAgICAgZnJvbSA9IChmcm9tIDwgMClcbiAgICAgID8gTWF0aC5jZWlsKGZyb20pXG4gICAgICA6IE1hdGguZmxvb3IoZnJvbSk7XG4gICAgICBpZiAoZnJvbSA8IDApXG4gICAgICAgIGZyb20gKz0gbGVuO1xuXG4gICAgICBmb3IgKDsgZnJvbSA8IGxlbjsgZnJvbSsrKVxuICAgICAge1xuICAgICAgICBpZiAoZnJvbSBpbiB0aGlzICYmXG4gICAgICAgICAgICB0aGlzW2Zyb21dID09PSBlbHQpXG4gICAgICAgICAgcmV0dXJuIGZyb207XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgfVxuXG4gIExvY2tyLnByZWZpeCA9IFwiXCI7XG5cbiAgTG9ja3IuX2dldFByZWZpeGVkS2V5ID0gZnVuY3Rpb24oa2V5LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICBpZiAob3B0aW9ucy5ub1ByZWZpeCkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucHJlZml4ICsga2V5O1xuICAgIH1cblxuICB9O1xuXG4gIExvY2tyLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdmFyIHF1ZXJ5X2tleSA9IHRoaXMuX2dldFByZWZpeGVkS2V5KGtleSwgb3B0aW9ucyk7XG5cbiAgICB0cnkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocXVlcnlfa2V5LCBKU09OLnN0cmluZ2lmeSh7XCJkYXRhXCI6IHZhbHVlfSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChjb25zb2xlKSBjb25zb2xlLndhcm4oXCJMb2NrciBkaWRuJ3Qgc3VjY2Vzc2Z1bGx5IHNhdmUgdGhlICd7XCIrIGtleSArXCI6IFwiKyB2YWx1ZSArXCJ9JyBwYWlyLCBiZWNhdXNlIHRoZSBsb2NhbFN0b3JhZ2UgaXMgZnVsbC5cIik7XG4gICAgfVxuICB9O1xuXG4gIExvY2tyLmdldCA9IGZ1bmN0aW9uIChrZXksIG1pc3NpbmcsIG9wdGlvbnMpIHtcbiAgICB2YXIgcXVlcnlfa2V5ID0gdGhpcy5fZ2V0UHJlZml4ZWRLZXkoa2V5LCBvcHRpb25zKSxcbiAgICAgICAgdmFsdWU7XG5cbiAgICB0cnkge1xuICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHF1ZXJ5X2tleSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmKGxvY2FsU3RvcmFnZVtxdWVyeV9rZXldKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKCd7XCJkYXRhXCI6XCInICsgbG9jYWxTdG9yYWdlLmdldEl0ZW0ocXVlcnlfa2V5KSArICdcIn0nKTtcbiAgICAgICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChjb25zb2xlKSBjb25zb2xlLndhcm4oXCJMb2NrciBjb3VsZCBub3QgbG9hZCB0aGUgaXRlbSB3aXRoIGtleSBcIiArIGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBtaXNzaW5nO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlLmRhdGEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdmFsdWUuZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1pc3Npbmc7XG4gICAgfVxuICB9O1xuXG4gIExvY2tyLnNhZGQgPSBmdW5jdGlvbihrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdmFyIHF1ZXJ5X2tleSA9IHRoaXMuX2dldFByZWZpeGVkS2V5KGtleSwgb3B0aW9ucyksXG4gICAgICAgIGpzb247XG5cbiAgICB2YXIgdmFsdWVzID0gTG9ja3Iuc21lbWJlcnMoa2V5KTtcblxuICAgIGlmICh2YWx1ZXMuaW5kZXhPZih2YWx1ZSkgPiAtMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIGpzb24gPSBKU09OLnN0cmluZ2lmeSh7XCJkYXRhXCI6IHZhbHVlc30pO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocXVlcnlfa2V5LCBqc29uKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIGlmIChjb25zb2xlKSBjb25zb2xlLndhcm4oXCJMb2NrciBkaWRuJ3Qgc3VjY2Vzc2Z1bGx5IGFkZCB0aGUgXCIrIHZhbHVlICtcIiB0byBcIisga2V5ICtcIiBzZXQsIGJlY2F1c2UgdGhlIGxvY2FsU3RvcmFnZSBpcyBmdWxsLlwiKTtcbiAgICB9XG4gIH07XG5cbiAgTG9ja3Iuc21lbWJlcnMgPSBmdW5jdGlvbihrZXksIG9wdGlvbnMpIHtcbiAgICB2YXIgcXVlcnlfa2V5ID0gdGhpcy5fZ2V0UHJlZml4ZWRLZXkoa2V5LCBvcHRpb25zKSxcbiAgICAgICAgdmFsdWU7XG5cbiAgICB0cnkge1xuICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHF1ZXJ5X2tleSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHZhbHVlID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPT09IG51bGwpXG4gICAgICByZXR1cm4gW107XG4gICAgZWxzZVxuICAgICAgcmV0dXJuICh2YWx1ZS5kYXRhIHx8IFtdKTtcbiAgfTtcblxuICBMb2Nrci5zaXNtZW1iZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdmFyIHF1ZXJ5X2tleSA9IHRoaXMuX2dldFByZWZpeGVkS2V5KGtleSwgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gTG9ja3Iuc21lbWJlcnMoa2V5KS5pbmRleE9mKHZhbHVlKSA+IC0xO1xuICB9O1xuXG4gIExvY2tyLmdldEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGxvY2FsU3RvcmFnZSk7XG5cbiAgICByZXR1cm4ga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIExvY2tyLmdldChrZXkpO1xuICAgIH0pO1xuICB9O1xuXG4gIExvY2tyLnNyZW0gPSBmdW5jdGlvbihrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdmFyIHF1ZXJ5X2tleSA9IHRoaXMuX2dldFByZWZpeGVkS2V5KGtleSwgb3B0aW9ucyksXG4gICAgICAgIGpzb24sXG4gICAgICAgIGluZGV4O1xuXG4gICAgdmFyIHZhbHVlcyA9IExvY2tyLnNtZW1iZXJzKGtleSwgdmFsdWUpO1xuXG4gICAgaW5kZXggPSB2YWx1ZXMuaW5kZXhPZih2YWx1ZSk7XG5cbiAgICBpZiAoaW5kZXggPiAtMSlcbiAgICAgIHZhbHVlcy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAganNvbiA9IEpTT04uc3RyaW5naWZ5KHtcImRhdGFcIjogdmFsdWVzfSk7XG5cbiAgICB0cnkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocXVlcnlfa2V5LCBqc29uKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoY29uc29sZSkgY29uc29sZS53YXJuKFwiTG9ja3IgY291bGRuJ3QgcmVtb3ZlIHRoZSBcIisgdmFsdWUgK1wiIGZyb20gdGhlIHNldCBcIisga2V5KTtcbiAgICB9XG4gIH07XG5cbiAgTG9ja3Iucm0gPSAgZnVuY3Rpb24gKGtleSkge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gIH07XG5cbiAgTG9ja3IuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gIH07XG4gIHJldHVybiBMb2NrcjtcblxufSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvY2tyL2xvY2tyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * vee-validate v2.0.0-rc.5\n * (c) 2017 Abdelrahman Awad\n * @license MIT\n */\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.VeeValidate = factory());\n}(this, (function () { 'use strict';\n\n/**\n * Some Alpha Regex helpers.\n * https://github.com/chriso/validator.js/blob/master/src/lib/alpha.js\n */\n\nvar alpha$1 = {\n  en: /^[A-Z]*$/i,\n  cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,\n  da: /^[A-ZÆØÅ]*$/i,\n  de: /^[A-ZÄÖÜß]*$/i,\n  es: /^[A-ZÁÉÍÑÓÚÜ]*$/i,\n  fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,\n  nl: /^[A-ZÉËÏÓÖÜ]*$/i,\n  hu: /^[A-ZÁÉÍÓÖŐÚÜŰ]*$/i,\n  pl: /^[A-ZĄĆĘŚŁŃÓŻŹ]*$/i,\n  pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,\n  ru: /^[А-ЯЁ]*$/i,\n  sr: /^[A-ZČĆŽŠĐ]*$/i,\n  tr: /^[A-ZÇĞİıÖŞÜ]*$/i,\n  uk: /^[А-ЩЬЮЯЄIЇҐ]*$/i,\n  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/\n};\n\nvar alphaSpaces = {\n  en: /^[A-Z\\s]*$/i,\n  cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ\\s]*$/i,\n  da: /^[A-ZÆØÅ\\s]*$/i,\n  de: /^[A-ZÄÖÜß\\s]*$/i,\n  es: /^[A-ZÁÉÍÑÓÚÜ\\s]*$/i,\n  fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ\\s]*$/i,\n  nl: /^[A-ZÉËÏÓÖÜ\\s]*$/i,\n  hu: /^[A-ZÁÉÍÓÖŐÚÜŰ\\s]*$/i,\n  pl: /^[A-ZĄĆĘŚŁŃÓŻŹ\\s]*$/i,\n  pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ\\s]*$/i,\n  ru: /^[А-ЯЁ\\s]*$/i,\n  sr: /^[A-ZČĆŽŠĐ\\s]*$/i,\n  tr: /^[A-ZÇĞİıÖŞÜ\\s]*$/i,\n  uk: /^[А-ЩЬЮЯЄIЇҐ\\s]*$/i,\n  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ\\s]*$/\n};\n\nvar alphanumeric = {\n  en: /^[0-9A-Z]*$/i,\n  cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,\n  da: /^[0-9A-ZÆØÅ]$/i,\n  de: /^[0-9A-ZÄÖÜß]*$/i,\n  es: /^[0-9A-ZÁÉÍÑÓÚÜ]*$/i,\n  fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,\n  hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]*$/i,\n  nl: /^[0-9A-ZÉËÏÓÖÜ]*$/i,\n  pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]*$/i,\n  pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,\n  ru: /^[0-9А-ЯЁ]*$/i,\n  sr: /^[0-9A-ZČĆŽŠĐ]*$/i,\n  tr: /^[0-9A-ZÇĞİıÖŞÜ]*$/i,\n  uk: /^[0-9А-ЩЬЮЯЄIЇҐ]*$/i,\n  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/\n};\n\nvar alphaDash = {\n  en: /^[0-9A-Z_-]*$/i,\n  cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ_-]*$/i,\n  da: /^[0-9A-ZÆØÅ_-]*$/i,\n  de: /^[0-9A-ZÄÖÜß_-]*$/i,\n  es: /^[0-9A-ZÁÉÍÑÓÚÜ_-]*$/i,\n  fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ_-]*$/i,\n  nl: /^[0-9A-ZÉËÏÓÖÜ_-]*$/i,\n  hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ_-]*$/i,\n  pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ_-]*$/i,\n  pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ_-]*$/i,\n  ru: /^[0-9А-ЯЁ_-]*$/i,\n  sr: /^[0-9A-ZČĆŽŠĐ_-]*$/i,\n  tr: /^[0-9A-ZÇĞİıÖŞÜ_-]*$/i,\n  uk: /^[0-9А-ЩЬЮЯЄIЇҐ_-]*$/i,\n  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ_-]*$/\n};\n\nvar alpha$$1 = function (value, ref) {\n  if ( ref === void 0 ) ref = [null];\n  var locale = ref[0];\n\n  // Match at least one locale.\n  if (! locale) {\n    return Object.keys(alpha$1).some(function (loc) { return alpha$1[loc].test(value); });\n  }\n\n  return (alpha$1[locale] || alpha$1.en).test(value);\n};\n\nvar alpha_dash = function (value, ref) {\n  if ( ref === void 0 ) ref = [null];\n  var locale = ref[0];\n\n  // Match at least one locale.\n  if (! locale) {\n    return Object.keys(alphaDash).some(function (loc) { return alphaDash[loc].test(value); });\n  }\n\n  return (alphaDash[locale] || alphaDash.en).test(value);\n};\n\nvar alpha_num = function (value, ref) {\n  if ( ref === void 0 ) ref = [null];\n  var locale = ref[0];\n\n  // Match at least one locale.\n  if (! locale) {\n    return Object.keys(alphanumeric).some(function (loc) { return alphanumeric[loc].test(value); });\n  }\n\n  return (alphanumeric[locale] || alphanumeric.en).test(value);\n};\n\nvar alpha_spaces = function (value, ref) {\n  if ( ref === void 0 ) ref = [null];\n  var locale = ref[0];\n\n  // Match at least one locale.\n  if (! locale) {\n    return Object.keys(alphaSpaces).some(function (loc) { return alphaSpaces[loc].test(value); });\n  }\n\n  return (alphaSpaces[locale] || alphaSpaces.en).test(value);\n};\n\nvar between = function (value, ref) {\n\tvar min = ref[0];\n\tvar max = ref[1];\n\n\treturn Number(min) <= value && Number(max) >= value;\n};\n\nvar confirmed = function (value, ref, validatingField) {\n  var confirmedField = ref[0];\n\n  var field = confirmedField\n    ? document.querySelector((\"input[name='\" + confirmedField + \"']\"))\n    : document.querySelector((\"input[name='\" + validatingField + \"_confirmation']\"));\n\n  return !! (field && String(value) === field.value);\n};\n\nfunction unwrapExports (x) {\n\treturn x && x.__esModule ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar assertString_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = assertString;\nfunction assertString(input) {\n  if (typeof input !== 'string') {\n    throw new TypeError('This library (validator.js) validates strings only');\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar isCreditCard_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCreditCard;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable max-len */\nvar creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})|62[0-9]{14}$/;\n/* eslint-enable max-len */\n\nfunction isCreditCard(str) {\n  (0, _assertString2.default)(str);\n  var sanitized = str.replace(/[^0-9]+/g, '');\n  if (!creditCard.test(sanitized)) {\n    return false;\n  }\n  var sum = 0;\n  var digit = void 0;\n  var tmpNum = void 0;\n  var shouldDouble = void 0;\n  for (var i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += tmpNum % 10 + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n  return !!(sum % 10 === 0 ? sanitized : false);\n}\nmodule.exports = exports['default'];\n});\n\nvar isCreditCard = unwrapExports(isCreditCard_1);\n\nvar credit_card = function (value) { return isCreditCard(String(value)); };\n\nvar decimal = function (value, params) {\n  var decimals = Array.isArray(params) ? (params[0] || '*') : '*';\n  if (Array.isArray(value)) {\n    return false;\n  }\n\n  if (value === null || value === undefined || value === '') {\n    return true;\n  }\n\n    // if is 0.\n  if (Number(decimals) === 0) {\n    return /^-?\\d*$/.test(value);\n  }\n\n  var regexPart = decimals === '*' ? '+' : (\"{1,\" + decimals + \"}\");\n  var regex = new RegExp((\"^-?\\\\d*(\\\\.\\\\d\" + regexPart + \")?$\"));\n\n  if (! regex.test(value)) {\n    return false;\n  }\n\n  var parsedValue = parseFloat(value);\n\n    // eslint-disable-next-line\n    return parsedValue === parsedValue;\n};\n\nvar digits = function (value, ref) {\n  var length = ref[0];\n\n  var strVal = String(value);\n\n  return /^[0-9]*$/.test(strVal) && strVal.length === Number(length);\n};\n\nvar validateImage = function (file, width, height) {\n  var URL = window.URL || window.webkitURL;\n  return new Promise(function (resolve) {\n    var image = new Image();\n    image.onerror = function () { return resolve({ valid: false }); };\n    image.onload = function () { return resolve({\n      valid: image.width === Number(width) && image.height === Number(height)\n    }); };\n\n    image.src = URL.createObjectURL(file);\n  });\n};\n\nvar dimensions = function (files, ref) {\n  var width = ref[0];\n  var height = ref[1];\n\n  var list = [];\n  for (var i = 0; i < files.length; i++) {\n        // if file is not an image, reject.\n    if (! /\\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(files[i].name)) {\n      return false;\n    }\n\n    list.push(files[i]);\n  }\n\n  return Promise.all(list.map(function (file) { return validateImage(file, width, height); }));\n};\n\nvar merge_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge;\nfunction merge() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults = arguments[1];\n\n  for (var key in defaults) {\n    if (typeof obj[key] === 'undefined') {\n      obj[key] = defaults[key];\n    }\n  }\n  return obj;\n}\nmodule.exports = exports['default'];\n});\n\nvar isByteLength_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = isByteLength;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable prefer-rest-params */\nfunction isByteLength(str, options) {\n  (0, _assertString2.default)(str);\n  var min = void 0;\n  var max = void 0;\n  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n    min = options.min || 0;\n    max = options.max;\n  } else {\n    // backwards compatibility: isByteLength(str, min [, max])\n    min = arguments[1];\n    max = arguments[2];\n  }\n  var len = encodeURI(str).split(/%..|./).length - 1;\n  return len >= min && (typeof max === 'undefined' || len <= max);\n}\nmodule.exports = exports['default'];\n});\n\nvar isFQDN = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isFDQN;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\n\n\nvar _merge2 = _interopRequireDefault(merge_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_fqdn_options = {\n  require_tld: true,\n  allow_underscores: false,\n  allow_trailing_dot: false\n};\n\nfunction isFDQN(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_fqdn_options);\n\n  /* Remove the optional trailing dot before checking validity */\n  if (options.allow_trailing_dot && str[str.length - 1] === '.') {\n    str = str.substring(0, str.length - 1);\n  }\n  var parts = str.split('.');\n  if (options.require_tld) {\n    var tld = parts.pop();\n    if (!parts.length || !/^([a-z\\u00a1-\\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\n      return false;\n    }\n  }\n  for (var part, i = 0; i < parts.length; i++) {\n    part = parts[i];\n    if (options.allow_underscores) {\n      part = part.replace(/_/g, '');\n    }\n    if (!/^[a-z\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    }\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      // disallow full-width chars\n      return false;\n    }\n    if (part[0] === '-' || part[part.length - 1] === '-') {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = exports['default'];\n});\n\nvar isEmail_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\n\n\nvar _merge2 = _interopRequireDefault(merge_1);\n\n\n\nvar _isByteLength2 = _interopRequireDefault(isByteLength_1);\n\n\n\nvar _isFQDN2 = _interopRequireDefault(isFQDN);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true\n};\n\n/* eslint-disable max-len */\n/* eslint-disable no-control-regex */\nvar displayName = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\s]*<(.+)>$/i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\n/* eslint-enable max-len */\n/* eslint-enable no-control-regex */\n\nfunction isEmail(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(displayName);\n    if (display_email) {\n      str = display_email[1];\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var user = parts.join('@');\n\n  var lower_domain = domain.toLowerCase();\n  if (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com') {\n    user = user.replace(/\\./g, '').toLowerCase();\n  }\n\n  if (!(0, _isByteLength2.default)(user, { max: 64 }) || !(0, _isByteLength2.default)(domain, { max: 256 })) {\n    return false;\n  }\n\n  if (!(0, _isFQDN2.default)(domain, { require_tld: options.require_tld })) {\n    return false;\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n\n  var user_parts = user.split('.');\n  for (var i = 0; i < user_parts.length; i++) {\n    if (!pattern.test(user_parts[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nmodule.exports = exports['default'];\n});\n\nvar isEmail = unwrapExports(isEmail_1);\n\nvar email = function (value) { return isEmail(String(value)); };\n\nvar ext = function (files, extensions) {\n  var regex = new RegExp((\".(\" + (extensions.join('|')) + \")$\"), 'i');\n\n  return files.every(function (file) { return regex.test(file.name); });\n};\n\nvar image = function (files) { return files.every(function (file) { return /\\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(file.name); }\n); };\n\nvar In = function (value, options) { return !! options.filter(function (option) { return option == value; }).length; }; // eslint-disable-line\n\nvar isIP_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\nvar ipv6Block = /^[0-9A-F]{1,4}$/i;\n\nfunction isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  (0, _assertString2.default)(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  } else if (version === '4') {\n    if (!ipv4Maybe.test(str)) {\n      return false;\n    }\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  } else if (version === '6') {\n    var blocks = str.split(':');\n    var foundOmissionBlock = false; // marker to indicate ::\n\n    // At least some OS accept the last 32 bits of an IPv6 address\n    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\n    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\n    // and '::a.b.c.d' is deprecated, but also valid.\n    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);\n    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\n\n    if (blocks.length > expectedNumberOfBlocks) {\n      return false;\n    }\n    // initial or final ::\n    if (str === '::') {\n      return true;\n    } else if (str.substr(0, 2) === '::') {\n      blocks.shift();\n      blocks.shift();\n      foundOmissionBlock = true;\n    } else if (str.substr(str.length - 2) === '::') {\n      blocks.pop();\n      blocks.pop();\n      foundOmissionBlock = true;\n    }\n\n    for (var i = 0; i < blocks.length; ++i) {\n      // test for a :: which can not be at the string start/end\n      // since those cases have been handled above\n      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\n        if (foundOmissionBlock) {\n          return false; // multiple :: in address\n        }\n        foundOmissionBlock = true;\n      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {\n        // it has been checked before that the last\n        // block is a valid IPv4 address\n      } else if (!ipv6Block.test(blocks[i])) {\n        return false;\n      }\n    }\n    if (foundOmissionBlock) {\n      return blocks.length >= 1;\n    }\n    return blocks.length === expectedNumberOfBlocks;\n  }\n  return false;\n}\nmodule.exports = exports['default'];\n});\n\nvar isIP = unwrapExports(isIP_1);\n\nvar ip = function (value, ref) {\n\tif ( ref === void 0 ) ref = [4];\n\tvar version = ref[0];\n\n\treturn isIP(value, version);\n};\n\nvar max = function (value, ref) {\n  var length = ref[0];\n\n  if (value === undefined || value === null) {\n    return length >= 0;\n  }\n\n  return String(value).length <= length;\n};\n\nvar max_value = function (value, ref) {\n  var max = ref[0];\n\n  if (Array.isArray(value) || value === null || value === undefined || value === '') {\n    return false;\n  }\n\n  return Number(value) <= max;\n};\n\nvar mimes = function (files, mimes) {\n  var regex = new RegExp(((mimes.join('|').replace('*', '.+')) + \"$\"), 'i');\n\n  return files.every(function (file) { return regex.test(file.type); });\n};\n\nvar min = function (value, ref) {\n  var length = ref[0];\n\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return String(value).length >= length;\n};\n\nvar min_value = function (value, ref) {\n  var min = ref[0];\n\n  if (Array.isArray(value) || value === null || value === undefined || value === '') {\n    return false;\n  }\n\n  return Number(value) >= min;\n};\n\nvar not_in = function (value, options) { return ! options.filter(function (option) { return option == value; }).length; }; // eslint-disable-line\n\nvar numeric = function (value) { return /^[0-9]+$/.test(String(value)); };\n\nvar regex = function (value, ref) {\n  var regex = ref[0];\n  var flags = ref.slice(1);\n\n  if (regex instanceof RegExp) {\n    return regex.test(value);\n  }\n\n  return new RegExp(regex, flags).test(String(value));\n};\n\nvar required = function (value) {\n  if (Array.isArray(value)) {\n    return !! value.length;\n  }\n\n  if (value === undefined || value === null || value === false) {\n    return false;\n  }\n\n  return !! String(value).trim().length;\n};\n\nvar size = function (files, ref) {\n  var size = ref[0];\n\n  if (isNaN(size)) {\n    return false;\n  }\n\n  var nSize = Number(size) * 1024;\n  for (var i = 0; i < files.length; i++) {\n    if (files[i].size > nSize) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar isURL_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isURL;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\n\n\nvar _isFQDN2 = _interopRequireDefault(isFQDN);\n\n\n\nvar _isIP2 = _interopRequireDefault(isIP_1);\n\n\n\nvar _merge2 = _interopRequireDefault(merge_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_url_options = {\n  protocols: ['http', 'https', 'ftp'],\n  require_tld: true,\n  require_protocol: false,\n  require_host: true,\n  require_valid_protocol: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_protocol_relative_urls: false\n};\n\nvar wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\n\nfunction isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\nfunction checkHost(host, matches) {\n  for (var i = 0; i < matches.length; i++) {\n    var match = matches[i];\n    if (host === match || isRegExp(match) && match.test(host)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isURL(url, options) {\n  (0, _assertString2.default)(url);\n  if (!url || url.length >= 2083 || /[\\s<>]/.test(url)) {\n    return false;\n  }\n  if (url.indexOf('mailto:') === 0) {\n    return false;\n  }\n  options = (0, _merge2.default)(options, default_url_options);\n  var protocol = void 0,\n      auth = void 0,\n      host = void 0,\n      hostname = void 0,\n      port = void 0,\n      port_str = void 0,\n      split = void 0,\n      ipv6 = void 0;\n\n  split = url.split('#');\n  url = split.shift();\n\n  split = url.split('?');\n  url = split.shift();\n\n  split = url.split('://');\n  if (split.length > 1) {\n    protocol = split.shift();\n    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {\n      return false;\n    }\n  } else if (options.require_protocol) {\n    return false;\n  } else if (options.allow_protocol_relative_urls && url.substr(0, 2) === '//') {\n    split[0] = url.substr(2);\n  }\n  url = split.join('://');\n\n  split = url.split('/');\n  url = split.shift();\n\n  if (url === '' && !options.require_host) {\n    return true;\n  }\n\n  split = url.split('@');\n  if (split.length > 1) {\n    auth = split.shift();\n    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\n      return false;\n    }\n  }\n  hostname = split.join('@');\n\n  port_str = ipv6 = null;\n  var ipv6_match = hostname.match(wrapped_ipv6);\n  if (ipv6_match) {\n    host = '';\n    ipv6 = ipv6_match[1];\n    port_str = ipv6_match[2] || null;\n  } else {\n    split = hostname.split(':');\n    host = split.shift();\n    if (split.length) {\n      port_str = split.join(':');\n    }\n  }\n\n  if (port_str !== null) {\n    port = parseInt(port_str, 10);\n    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\n      return false;\n    }\n  }\n\n  if (!(0, _isIP2.default)(host) && !(0, _isFQDN2.default)(host, options) && (!ipv6 || !(0, _isIP2.default)(ipv6, 6)) && host !== 'localhost') {\n    return false;\n  }\n\n  host = host || ipv6;\n\n  if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {\n    return false;\n  }\n  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {\n    return false;\n  }\n\n  return true;\n}\nmodule.exports = exports['default'];\n});\n\nvar isURL = unwrapExports(isURL_1);\n\nvar url = function (value, ref) {\n        if ( ref === void 0 ) ref = [true];\n        var requireProtocol = ref[0];\n\n        return isURL(value, { require_protocol: !! requireProtocol });\n};\n\n/* eslint-disable camelcase */\nvar Rules = {\n  alpha_dash: alpha_dash,\n  alpha_num: alpha_num,\n  alpha_spaces: alpha_spaces,\n  alpha: alpha$$1,\n  between: between,\n  confirmed: confirmed,\n  credit_card: credit_card,\n  decimal: decimal,\n  digits: digits,\n  dimensions: dimensions,\n  email: email,\n  ext: ext,\n  image: image,\n  in: In,\n  ip: ip,\n  max: max,\n  max_value: max_value,\n  mimes: mimes,\n  min: min,\n  min_value: min_value,\n  not_in: not_in,\n  numeric: numeric,\n  regex: regex,\n  required: required,\n  size: size,\n  url: url\n};\n\nvar ErrorBag = function ErrorBag() {\n  this.errors = [];\n};\n\n  /**\n   * Adds an error to the internal array.\n   *\n   * @param {string} field The field name.\n   * @param {string} msg The error message.\n   * @param {String} rule The rule that is responsible for the error.\n   * @param {String} scope The Scope name, optional.\n   */\nErrorBag.prototype.add = function add (field, msg, rule, scope) {\n    if ( scope === void 0 ) scope = '__global__';\n\n  this.errors.push({ field: field, msg: msg, rule: rule, scope: scope });\n};\n\n  /**\n   * Gets all error messages from the internal array.\n   *\n   * @param {String} scope The Scope name, optional.\n   * @return {Array} errors Array of all error messages.\n   */\nErrorBag.prototype.all = function all (scope) {\n  if (! scope) {\n    return this.errors.map(function (e) { return e.msg; });\n  }\n\n  return this.errors.filter(function (e) { return e.scope === scope; }).map(function (e) { return e.msg; });\n};\n\n  /**\n   * Checks if there are any errors in the internal array.\n   * @param {String} scope The Scope name, optional.\n   * @return {boolean} result True if there was at least one error, false otherwise.\n   */\nErrorBag.prototype.any = function any (scope) {\n  if (! scope) {\n    return !! this.errors.length;\n  }\n\n  return !! this.errors.filter(function (e) { return e.scope === scope; }).length;\n};\n\n  /**\n   * Removes all items from the internal array.\n   *\n   * @param {String} scope The Scope name, optional.\n   */\nErrorBag.prototype.clear = function clear (scope) {\n  if (! scope) {\n    scope = '__global__';\n  }\n\n  this.errors = this.errors.filter(function (e) { return e.scope !== scope; });\n};\n\n  /**\n   * Collects errors into groups or for a specific field.\n   *\n   * @param{string} field The field name.\n   * @param{string} scope The scope name.\n   * @param {Boolean} map If it should map the errors to strings instead of objects.\n   * @return {Array} errors The errors for the specified field.\n   */\nErrorBag.prototype.collect = function collect (field, scope, map) {\n    if ( map === void 0 ) map = true;\n\n  if (! field) {\n    var collection = {};\n    this.errors.forEach(function (e) {\n      if (! collection[e.field]) {\n        collection[e.field] = [];\n      }\n\n      collection[e.field].push(map ? e.msg : e);\n    });\n\n    return collection;\n  }\n\n  if (! scope) {\n    return this.errors.filter(function (e) { return e.field === field; }).map(function (e) { return (map ? e.msg : e); });\n  }\n\n  return this.errors.filter(function (e) { return e.field === field && e.scope === scope; })\n                    .map(function (e) { return (map ? e.msg : e); });\n};\n  /**\n   * Gets the internal array length.\n   *\n   * @return {Number} length The internal array length.\n   */\nErrorBag.prototype.count = function count () {\n  return this.errors.length;\n};\n\n  /**\n   * Gets the first error message for a specific field.\n   *\n   * @param{string} field The field name.\n   * @return {string|null} message The error message.\n   */\nErrorBag.prototype.first = function first (field, scope) {\n    var this$1 = this;\n    if ( scope === void 0 ) scope = '__global__';\n\n  var selector = this._selector(field);\n  var scoped = this._scope(field);\n\n  if (scoped) {\n    var result = this.first(scoped.name, scoped.scope);\n    // if such result exist, return it. otherwise it could be a field.\n    // with dot in its name.\n    if (result) {\n      return result;\n    }\n  }\n\n  if (selector) {\n    return this.firstByRule(selector.name, selector.rule, scope);\n  }\n\n  for (var i = 0; i < this.errors.length; i++) {\n    if (this$1.errors[i].field === field && (this$1.errors[i].scope === scope)) {\n      return this$1.errors[i].msg;\n    }\n  }\n\n  return null;\n};\n\n  /**\n   * Returns the first error rule for the specified field\n   *\n   * @param {string} field The specified field.\n   * @return {string|null} First error rule on the specified field if one is found, otherwise null\n   */\nErrorBag.prototype.firstRule = function firstRule (field, scope) {\n  var errors = this.collect(field, scope, false);\n\n  return (errors.length && errors[0].rule) || null;\n};\n\n  /**\n   * Checks if the internal array has at least one error for the specified field.\n   *\n   * @param{string} field The specified field.\n   * @return {Boolean} result True if at least one error is found, false otherwise.\n   */\nErrorBag.prototype.has = function has (field, scope) {\n    if ( scope === void 0 ) scope = '__global__';\n\n  return !! this.first(field, scope);\n};\n\n  /**\n   * Gets the first error message for a specific field and a rule.\n   * @param {String} name The name of the field.\n   * @param {String} rule The name of the rule.\n   * @param {String} scope The name of the scope (optional).\n   */\nErrorBag.prototype.firstByRule = function firstByRule (name, rule, scope) {\n  var error = this.collect(name, scope, false).filter(function (e) { return e.rule === rule; })[0];\n\n  return (error && error.msg) || null;\n};\n\n  /**\n   * Removes all error messages associated with a specific field.\n   *\n   * @param{string} field The field which messages are to be removed.\n   * @param {String} scope The Scope name, optional.\n   */\nErrorBag.prototype.remove = function remove (field, scope) {\n  var filter = scope ? (function (e) { return e.field !== field || e.scope !== scope; }) :\n                         (function (e) { return e.field !== field || e.scope !== '__global__'; });\n\n  this.errors = this.errors.filter(filter);\n};\n\n\n  /**\n   * Get the field attributes if there's a rule selector.\n   *\n   * @param{string} field The specified field.\n   * @return {Object|null}\n   */\nErrorBag.prototype._selector = function _selector (field) {\n  if (field.indexOf(':') > -1) {\n    var ref = field.split(':');\n      var name = ref[0];\n      var rule = ref[1];\n\n    return { name: name, rule: rule };\n  }\n\n  return null;\n};\n\n  /**\n   * Get the field scope if specified using dot notation.\n   *\n   * @param {string} field the specifie field.\n   * @return {Object|null}\n   */\nErrorBag.prototype._scope = function _scope (field) {\n  if (field.indexOf('.') > -1) {\n    var ref = field.split('.');\n      var scope = ref[0];\n      var name = ref[1];\n\n    return { name: name, scope: scope };\n  }\n\n  return null;\n};\n\nvar ValidatorException = (function () {\n  function anonymous(msg) {\n    this.msg = \"[vee-validate]: \" + msg;\n  }\n\n  anonymous.prototype.toString = function toString () {\n    return this.msg;\n  };\n\n  return anonymous;\n}());\n\n/**\n * Gets the data attribute. the name must be kebab-case.\n */\nvar getDataAttribute = function (el, name) { return el.getAttribute((\"data-vv-\" + name)); };\n\n/**\n * Determines the input field scope.\n */\nvar getScope = function (el) {\n  var scope = getDataAttribute(el, 'scope');\n  if (! scope && el.form) {\n    scope = getDataAttribute(el.form, 'scope');\n  }\n\n  return scope;\n};\n\n/**\n * Gets the value in an object safely.\n * @param {String} propPath\n * @param {Object} target\n * @param {*} def\n */\nvar getPath = function (propPath, target, def) {\n  if ( def === void 0 ) def = undefined;\n\n  if (!propPath || !target) { return def; }\n\n  var value = target;\n  propPath.split('.').every(function (prop) {\n    if (! Object.prototype.hasOwnProperty.call(value, prop)) {\n      value = def;\n\n      return false;\n    }\n\n    value = value[prop];\n\n    return true;\n  });\n\n  return value;\n};\n\n/**\n * Debounces a function.\n */\nvar debounce = function (callback, wait, immediate) {\n  if ( wait === void 0 ) wait = 0;\n  if ( immediate === void 0 ) immediate = true;\n\n  var timeout;\n\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var later = function () {\n      timeout = null;\n      if (!immediate) { callback.apply(void 0, args); }\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) { callback.apply(void 0, args); }\n  };\n};\n\n/**\n * Emits a warning to the console.\n */\nvar warn = function (message) {\n  if (! console) {\n    return;\n  }\n\n    console.warn((\"[vee-validate]: \" + message)); // eslint-disable-line\n};\n\n/**\n * Checks if the value is an object.\n */\nvar isObject = function (object) { return object !== null && object && typeof object === 'object' && ! Array.isArray(object); };\n\n/**\n * Checks if a function is callable.\n */\nvar isCallable = function (func) { return typeof func === 'function'; };\n\n/**\n * Check if element has the css class on it.\n */\nvar hasClass = function (el, className) {\n  if (el.classList) {\n    return el.classList.contains(className);\n  }\n\n  return !!el.className.match(new RegExp((\"(\\\\s|^)\" + className + \"(\\\\s|$)\")));\n};\n\n/**\n * Adds the provided css className to the element.\n */\nvar addClass = function (el, className) {\n  if (el.classList) {\n    el.classList.add(className);\n    return;\n  }\n\n  if (!hasClass(el, className)) {\n    el.className += \" \" + className;\n  }\n};\n\n/**\n * Remove the provided css className from the element.\n */\nvar removeClass = function (el, className) {\n  if (el.classList) {\n    el.classList.remove(className);\n    return;\n  }\n\n  if (hasClass(el, className)) {\n    var reg = new RegExp((\"(\\\\s|^)\" + className + \"(\\\\s|$)\"));\n    el.className = el.className.replace(reg, ' ');\n  }\n};\n\n/**\n * Converts an array-like object to array.\n * Simple polyfill for Array.from\n */\nvar toArray = function (arrayLike) {\n  if (Array.from) {\n    return Array.from(arrayLike);\n  }\n\n  var array = [];\n  var length = arrayLike.length;\n  for (var i = 0; i < length; i++) {\n    array.push(arrayLike[i]);\n  }\n\n  return array;\n};\n\n/**\n * Assign polyfill from the mdn.\n */\nvar assign = function (target) {\n  var others = [], len = arguments.length - 1;\n  while ( len-- > 0 ) others[ len ] = arguments[ len + 1 ];\n\n  if (Object.assign) {\n    return Object.assign.apply(Object, [ target ].concat( others ));\n  }\n\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var to = Object(target);\n  others.forEach(function (arg) {\n    // Skip over if undefined or null\n    if (arg != null) {\n      Object.keys(arg).forEach(function (key) {\n        to[key] = arg[key];\n      });\n    }\n  });\n\n  return to;\n};\n\n/**\n * polyfills array.find\n * @param {Array} array\n * @param {Function} predicate\n */\nvar find = function (array, predicate) {\n  if (array.find) {\n    return array.find(predicate);\n  }\n\n  var result;\n  array.some(function (item) {\n    if (predicate(item)) {\n      result = item;\n      return true;\n    }\n\n    return false;\n  });\n\n  return result;\n};\n\n/**\n * Gets the rules from a binding value or the element dataset.\n *\n * @param {String} expression The binding expression.\n * @param {Object|String} value The binding value.\n * @param {element} el The element.\n * @returns {String|Object}\n */\nvar getRules = function (expression, value, el) {\n  if (! expression) {\n    return getDataAttribute(el, 'rules');\n  }\n\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (~['string', 'object'].indexOf(typeof value.rules)) {\n    return value.rules;\n  }\n\n  return value;\n};\n\nvar Dictionary = function Dictionary(dictionary) {\n  if ( dictionary === void 0 ) dictionary = {};\n\n  this.dictionary = {};\n  this.merge(dictionary);\n};\n\nDictionary.prototype.hasLocale = function hasLocale (locale) {\n  return !! this.dictionary[locale];\n};\n\nDictionary.prototype.getMessage = function getMessage (locale, key, fallback) {\n  if (! this.hasMessage(locale, key)) {\n    return fallback || this._getDefaultMessage(locale);\n  }\n\n  return this.dictionary[locale].messages[key];\n};\n\n/**\n * Gets a specific message for field. fallsback to the rule message.\n *\n * @param {String} locale\n * @param {String} field\n * @param {String} key\n */\nDictionary.prototype.getFieldMessage = function getFieldMessage (locale, field, key) {\n  if (! this.hasLocale(locale)) {\n    return this.getMessage(locale, key);\n  }\n\n  var dict = this.dictionary[locale].custom && this.dictionary[locale].custom[field];\n  if (! dict || ! dict[key]) {\n    return this.getMessage(locale, key);\n  }\n\n  return dict[key];\n};\n\nDictionary.prototype._getDefaultMessage = function _getDefaultMessage (locale) {\n  if (this.hasMessage(locale, '_default')) {\n    return this.dictionary[locale].messages._default;\n  }\n\n  return this.dictionary.en.messages._default;\n};\n\nDictionary.prototype.getAttribute = function getAttribute (locale, key, fallback) {\n    if ( fallback === void 0 ) fallback = '';\n\n  if (! this.hasAttribute(locale, key)) {\n    return fallback;\n  }\n\n  return this.dictionary[locale].attributes[key];\n};\n\nDictionary.prototype.hasMessage = function hasMessage (locale, key) {\n  return !! (\n          this.hasLocale(locale) &&\n          this.dictionary[locale].messages &&\n          this.dictionary[locale].messages[key]\n      );\n};\n\nDictionary.prototype.hasAttribute = function hasAttribute (locale, key) {\n  return !! (\n          this.hasLocale(locale) &&\n          this.dictionary[locale].attributes &&\n          this.dictionary[locale].attributes[key]\n      );\n};\n\nDictionary.prototype.merge = function merge (dictionary) {\n  this._merge(this.dictionary, dictionary);\n};\n\nDictionary.prototype.setMessage = function setMessage (locale, key, message) {\n  if (! this.hasLocale(locale)) {\n    this.dictionary[locale] = {\n      messages: {},\n      attributes: {}\n    };\n  }\n\n  this.dictionary[locale].messages[key] = message;\n};\n\nDictionary.prototype.setAttribute = function setAttribute (locale, key, attribute) {\n  if (! this.hasLocale(locale)) {\n    this.dictionary[locale] = {\n      messages: {},\n      attributes: {}\n    };\n  }\n\n  this.dictionary[locale].attributes[key] = attribute;\n};\n\nDictionary.prototype._merge = function _merge (target, source) {\n    var this$1 = this;\n\n  if (! (isObject(target) && isObject(source))) {\n    return target;\n  }\n\n  Object.keys(source).forEach(function (key) {\n    if (isObject(source[key])) {\n      if (! target[key]) {\n        assign(target, ( obj = {}, obj[key] = {}, obj ));\n          var obj;\n      }\n\n      this$1._merge(target[key], source[key]);\n      return;\n    }\n\n    assign(target, ( obj$1 = {}, obj$1[key] = source[key], obj$1 ));\n      var obj$1;\n  });\n\n  return target;\n};\n\n/* istanbul ignore next */\nvar messages = {\n  _default: function (field) { return (\"The \" + field + \" value is not valid.\"); },\n  alpha_dash: function (field) { return (\"The \" + field + \" field may contain alpha-numeric characters as well as dashes and underscores.\"); },\n  alpha_num: function (field) { return (\"The \" + field + \" field may only contain alpha-numeric characters.\"); },\n  alpha_spaces: function (field) { return (\"The \" + field + \" field may only contain alphabetic characters as well as spaces.\"); },\n  alpha: function (field) { return (\"The \" + field + \" field may only contain alphabetic characters.\"); },\n  between: function (field, ref) {\n    var min = ref[0];\n    var max = ref[1];\n\n    return (\"The \" + field + \" field must be between \" + min + \" and \" + max + \".\");\n},\n  confirmed: function (field) { return (\"The \" + field + \" confirmation does not match.\"); },\n  credit_card: function (field) { return (\"The \" + field + \" field is invalid.\"); },\n  decimal: function (field, ref) {\n    if ( ref === void 0 ) ref = ['*'];\n    var decimals = ref[0];\n\n    return (\"The \" + field + \" field must be numeric and may contain \" + (decimals === '*' ? '' : decimals) + \" decimal points.\");\n},\n  digits: function (field, ref) {\n    var length = ref[0];\n\n    return (\"The \" + field + \" field must be numeric and exactly contain \" + length + \" digits.\");\n},\n  dimensions: function (field, ref) {\n    var width = ref[0];\n    var height = ref[1];\n\n    return (\"The \" + field + \" field must be \" + width + \" pixels by \" + height + \" pixels.\");\n},\n  email: function (field) { return (\"The \" + field + \" field must be a valid email.\"); },\n  ext: function (field) { return (\"The \" + field + \" field must be a valid file.\"); },\n  image: function (field) { return (\"The \" + field + \" field must be an image.\"); },\n  in: function (field) { return (\"The \" + field + \" field must be a valid value.\"); },\n  ip: function (field) { return (\"The \" + field + \" field must be a valid ip address.\"); },\n  max: function (field, ref) {\n    var length = ref[0];\n\n    return (\"The \" + field + \" field may not be greater than \" + length + \" characters.\");\n},\n  max_value: function (field, ref) {\n    var max = ref[0];\n\n    return (\"The \" + field + \" field must be \" + max + \" or less.\");\n},\n  mimes: function (field) { return (\"The \" + field + \" field must have a valid file type.\"); },\n  min: function (field, ref) {\n    var length = ref[0];\n\n    return (\"The \" + field + \" field must be at least \" + length + \" characters.\");\n},\n  min_value: function (field, ref) {\n    var min = ref[0];\n\n    return (\"The \" + field + \" field must be \" + min + \" or more.\");\n},\n  not_in: function (field) { return (\"The \" + field + \" field must be a valid value.\"); },\n  numeric: function (field) { return (\"The \" + field + \" field may only contain numeric characters.\"); },\n  regex: function (field) { return (\"The \" + field + \" field format is invalid.\"); },\n  required: function (field) { return (\"The \" + field + \" field is required.\"); },\n  size: function (field, ref) {\n    var size = ref[0];\n\n    return (\"The \" + field + \" field must be less than \" + size + \" KB.\");\n},\n  url: function (field) { return (\"The \" + field + \" field is not a valid URL.\"); }\n};\n\nvar after = function (moment) { return function (value, ref) {\n  var targetField = ref[0];\n  var inclusion = ref[1];\n  var format = ref[2];\n\n  var field = document.querySelector((\"input[name='\" + targetField + \"']\"));\n  if (typeof format === 'undefined') {\n    format = inclusion;\n    inclusion = false;\n  }\n  var dateValue = moment(value, format, true);\n  var otherValue = moment(field ? field.value : targetField, format, true);\n\n  // if either is not valid.\n  if (! dateValue.isValid() || ! otherValue.isValid()) {\n    return false;\n  }\n\n  return dateValue.isAfter(otherValue) || (inclusion && dateValue.isSame(otherValue));\n}; };\n\nvar before = function (moment) { return function (value, ref) {\n  var targetField = ref[0];\n  var inclusion = ref[1];\n  var format = ref[2];\n\n  var field = document.querySelector((\"input[name='\" + targetField + \"']\"));\n  if (typeof format === 'undefined') {\n    format = inclusion;\n    inclusion = false;\n  }\n  var dateValue = moment(value, format, true);\n  var otherValue = moment(field ? field.value : targetField, format, true);\n\n  // if either is not valid.\n  if (! dateValue.isValid() || ! otherValue.isValid()) {\n    return false;\n  }\n\n  return dateValue.isBefore(otherValue) || (inclusion && dateValue.isSame(otherValue));\n}; };\n\nvar date_format = function (moment) { return function (value, ref) {\n\tvar format = ref[0];\n\n\treturn moment(value, format, true).isValid();\n }\t};\n\nvar date_between = function (moment) { return function (value, params) {\n  var min;\n  var max;\n  var format;\n  var inclusivity = '()';\n\n  if (params.length > 3) {\n    var assign;\n    (assign = params, min = assign[0], max = assign[1], inclusivity = assign[2], format = assign[3]);\n  } else {\n    var assign$1;\n    (assign$1 = params, min = assign$1[0], max = assign$1[1], format = assign$1[2]);\n  }\n\n  var minDate = moment(min, format, true);\n  var maxDate = moment(max, format, true);\n  var dateVal = moment(value, format, true);\n\n  if (! (minDate.isValid() && maxDate.isValid() && dateVal.isValid())) {\n    return false;\n  }\n\n  return dateVal.isBetween(minDate, maxDate, 'days', inclusivity);\n}; };\n\n/* istanbul ignore next */\n/* eslint-disable max-len */\nvar messages$1 = {\n  after: function (field, ref) {\n    var target = ref[0];\n\n    return (\"The \" + field + \" must be after \" + target + \".\");\n},\n  before: function (field, ref) {\n    var target = ref[0];\n\n    return (\"The \" + field + \" must be before \" + target + \".\");\n},\n  date_between: function (field, ref) {\n    var min = ref[0];\n    var max = ref[1];\n\n    return (\"The \" + field + \" must be between \" + min + \" and \" + max + \".\");\n},\n  date_format: function (field, ref) {\n    var format = ref[0];\n\n    return (\"The \" + field + \" must be in the format \" + format + \".\");\n}\n};\n\nvar date = {\n  make: function (moment) { return ({\n    date_format: date_format(moment),\n    after: after(moment),\n    before: before(moment),\n    date_between: date_between(moment)\n  }); },\n  messages: messages$1,\n  installed: false\n};\n\nvar LOCALE = 'en';\nvar STRICT_MODE = true;\nvar DICTIONARY = new Dictionary({\n  en: {\n    messages: messages,\n    attributes: {},\n    custom: {}\n  }\n});\n\nvar Validator = function Validator(validations, options) {\n  if ( options === void 0 ) options = { init: true, vm: null };\n\n  this.strictMode = STRICT_MODE;\n  this.$scopes = { __global__: {} };\n  this._createFields(validations);\n  this.errorBag = new ErrorBag();\n  this.fieldBag = {};\n  this.paused = false;\n  this.$vm = options.vm;\n\n  // Some fields will be later evaluated, because the vm isn't mounted yet\n  // so it may register it under an inaccurate scope.\n  this.$deferred = [];\n  this.$ready = false;\n\n  // if momentjs is present, install the validators.\n  if (typeof moment === 'function') {\n    // eslint-disable-next-line\n    this.installDateTimeValidators(moment);\n  }\n\n  if (options.init) {\n    this.init();\n  }\n};\n\nvar prototypeAccessors = { dictionary: {},locale: {},rules: {} };\n\n/**\n * @return {Dictionary}\n */\nprototypeAccessors.dictionary.get = function () {\n  return DICTIONARY;\n};\n\n/**\n * @return {String}\n */\nprototypeAccessors.locale.get = function () {\n  return LOCALE;\n};\n\n/**\n * @return {Object}\n */\nprototypeAccessors.rules.get = function () {\n  return Rules;\n};\n\n/**\n * Merges a validator object into the Rules and Messages.\n *\n * @param{string} name The name of the validator.\n * @param{function|object} validator The validator object.\n */\nValidator._merge = function _merge (name, validator) {\n  if (isCallable(validator)) {\n    Rules[name] = validator;\n    return;\n  }\n\n  Rules[name] = validator.validate;\n  if (isCallable(validator.getMessage)) {\n    DICTIONARY.setMessage(LOCALE, name, validator.getMessage);\n  }\n\n  if (validator.messages) {\n    DICTIONARY.merge(\n      Object.keys(validator.messages).reduce(function (prev, curr) {\n        var dict = prev;\n        dict[curr] = {\n          messages: ( obj = {}, obj[name] = validator.messages[curr], obj )\n        };\n          var obj;\n\n        return dict;\n      }, {})\n    );\n  }\n};\n\n/**\n * Guards from extnsion violations.\n *\n * @param{string} name name of the validation rule.\n * @param{object} validator a validation rule object.\n */\nValidator._guardExtend = function _guardExtend (name, validator) {\n  if (Rules[name]) {\n    throw new ValidatorException(\n      (\"Extension Error: There is an existing validator with the same name '\" + name + \"'.\")\n    );\n  }\n\n  if (isCallable(validator)) {\n    return;\n  }\n\n  if (! isCallable(validator.validate)) {\n    throw new ValidatorException(\n      // eslint-disable-next-line\n      (\"Extension Error: The validator '\" + name + \"' must be a function or have a 'validate' method.\")\n    );\n  }\n\n  if (! isCallable(validator.getMessage) && ! isObject(validator.messages)) {\n    throw new ValidatorException(\n      // eslint-disable-next-line\n      (\"Extension Error: The validator '\" + name + \"' must have a 'getMessage' method or have a 'messages' object.\")\n    );\n  }\n};\n\n/**\n * Static constructor.\n *\n * @param{object} validations The validations object.\n * @return {Validator} validator A validator object.\n */\nValidator.create = function create (validations, options) {\n  return new Validator(validations, options);\n};\n\n/**\n * Adds a custom validator to the list of validation rules.\n *\n * @param{string} name The name of the validator.\n * @param{object|function} validator The validator object/function.\n */\nValidator.extend = function extend (name, validator) {\n  Validator._guardExtend(name, validator);\n  Validator._merge(name, validator);\n};\n\n/**\n * Installs the datetime validators and the messages.\n */\nValidator.installDateTimeValidators = function installDateTimeValidators (moment) {\n  if (typeof moment !== 'function') {\n    warn('To use the date-time validators you must provide moment reference.');\n\n    return false;\n  }\n\n  if (date.installed) {\n    return true;\n  }\n\n  var validators = date.make(moment);\n  Object.keys(validators).forEach(function (name) {\n    Validator.extend(name, validators[name]);\n  });\n\n  Validator.updateDictionary({\n    en: {\n      messages: date.messages\n    }\n  });\n  date.installed = true;\n\n  return true;\n};\n\n/**\n * Removes a rule from the list of validators.\n * @param {String} name The name of the validator/rule.\n */\nValidator.remove = function remove (name) {\n  delete Rules[name];\n};\n\n/**\n * Sets the default locale for all validators.\n *\n * @param {String} language The locale id.\n */\nValidator.setLocale = function setLocale (language) {\n    if ( language === void 0 ) language = 'en';\n\n  /* istanbul ignore if */\n  if (! DICTIONARY.hasLocale(language)) {\n    // eslint-disable-next-line\n    warn('You are setting the validator locale to a locale that is not defined in the dicitionary. English messages may still be generated.');\n  }\n\n  LOCALE = language;\n};\n\n/**\n * Sets the operating mode for all newly created validators.\n * strictMode = true: Values without a rule are invalid and cause failure.\n * strictMode = false: Values without a rule are valid and are skipped.\n * @param {Boolean} strictMode.\n */\nValidator.setStrictMode = function setStrictMode (strictMode) {\n    if ( strictMode === void 0 ) strictMode = true;\n\n  STRICT_MODE = strictMode;\n};\n\n/**\n * Updates the dicitionary, overwriting existing values and adding new ones.\n *\n * @param{object} data The dictionary object.\n */\nValidator.updateDictionary = function updateDictionary (data) {\n  DICTIONARY.merge(data);\n};\n\nValidator.addLocale = function addLocale (locale) {\n  if (! locale.name) {\n    warn('Your locale must have a name property');\n    return;\n  }\n\n  this.updateDictionary(( obj = {}, obj[locale.name] = locale, obj ));\n    var obj;\n};\n\nValidator.prototype.addLocale = function addLocale (locale) {\n  Validator.addLocale(locale);\n};\n\n/**\n * Resolves the scope value. Only strings and functions are allowed.\n * @param {Function|String} scope\n * @returns {String}\n */\nValidator.prototype._resolveScope = function _resolveScope (scope) {\n  if (typeof scope === 'string') {\n    return scope;\n  }\n\n  // The resolved value should be string.\n  if (isCallable(scope)) {\n    var value = scope();\n    return typeof value === 'string' ? value : '__global__';\n  }\n\n  return '__global__';\n};\n\n/**\n * Resolves the field values from the getter functions.\n */\nValidator.prototype._resolveValuesFromGetters = function _resolveValuesFromGetters (scope) {\n    var this$1 = this;\n    if ( scope === void 0 ) scope = '__global__';\n\n  if (! this.$scopes[scope]) {\n    return {};\n  }\n  var values = {};\n  Object.keys(this.$scopes[scope]).forEach(function (name) {\n    var field = this$1.$scopes[scope][name];\n    var getter = field.getter;\n    var context = field.context;\n    var fieldScope = this$1._resolveScope(field.scope);\n    if (getter && context && (scope === '__global__' || fieldScope === scope)) {\n      values[name] = {\n        value: getter(context()),\n        scope: fieldScope\n      };\n    }\n  });\n\n  return values;\n};\n\n/**\n * Creates the fields to be validated.\n *\n * @param{object} validations\n * @return {object} Normalized object.\n */\nValidator.prototype._createFields = function _createFields (validations) {\n    var this$1 = this;\n\n  if (! validations) {\n    return;\n  }\n\n  Object.keys(validations).forEach(function (field) {\n    this$1._createField(field, validations[field]);\n  });\n};\n\n/**\n * Creates a field entry in the fields object.\n * @param {String} name.\n * @param {String|Array} checks.\n */\nValidator.prototype._createField = function _createField (name, checks, scope) {\n    if ( scope === void 0 ) scope = '__global__';\n\n  scope = this._resolveScope(scope);\n  if (! this.$scopes[scope]) {\n    this.$scopes[scope] = {};\n  }\n\n  if (! this.$scopes[scope][name]) {\n    this.$scopes[scope][name] = {};\n  }\n\n  var field = this.$scopes[scope][name];\n  field.validations = this._normalizeRules(name, checks, scope);\n  field.required = this._isRequired(field);\n};\n\n/**\n * Normalizes rules.\n * @return {Object}\n */\nValidator.prototype._normalizeRules = function _normalizeRules (name, checks, scope) {\n  if (! checks) { return {}; }\n\n  if (typeof checks === 'string') {\n    return this._normalizeString(checks);\n  }\n\n  if (! isObject(checks)) {\n    warn((\"Your checks for '\" + scope + \".\" + name + \"' must be either a string or an object.\"));\n    return {};\n  }\n\n  return this._normalizeObject(checks);\n};\n\n/**\n * Checks if a field has a required rule.\n */\nValidator.prototype._isRequired = function _isRequired (field) {\n  return field.validations && field.validations.required;\n};\n\n/**\n * Normalizes an object of rules.\n */\nValidator.prototype._normalizeObject = function _normalizeObject (rules) {\n    var this$1 = this;\n\n  var validations = {};\n  Object.keys(rules).forEach(function (rule) {\n    var params = [];\n    if (rules[rule] === true) {\n      params = [];\n    } else if (Array.isArray(rules[rule])) {\n      params = rules[rule];\n    } else {\n      params = [rules[rule]];\n    }\n\n    if (rules[rule] === false) {\n      delete validations[rule];\n    } else {\n      validations[rule] = params;\n    }\n\n    if (date.installed && this$1._isADateRule(rule)) {\n      var dateFormat = this$1._getDateFormat(validations);\n\n      if (! this$1._containsValidation(validations[rule], dateFormat)) {\n        validations[rule].push(this$1._getDateFormat(validations));\n      }\n    }\n  });\n\n  return validations;\n};\n\n/**\n * Date rules need the existance of a format, so date_format must be supplied.\n * @param {String} name The rule name.\n * @param {Array} validations the field validations.\n */\nValidator.prototype._getDateFormat = function _getDateFormat (validations) {\n  if (validations.date_format && Array.isArray(validations.date_format)) {\n    return validations.date_format[0];\n  }\n\n  return null;\n};\n\n/**\n * Checks if the passed rule is a date rule.\n */\nValidator.prototype._isADateRule = function _isADateRule (rule) {\n  return !! ~['after', 'before', 'date_between'].indexOf(rule);\n};\n\n/**\n * Checks if the passed validation appears inside the array.\n */\nValidator.prototype._containsValidation = function _containsValidation (validations, validation) {\n  return !! ~validations.indexOf(validation);\n};\n\n/**\n * Normalizes string rules.\n * @param {String} rules The rules that will be normalized.\n * @param {Object} field The field object that is being operated on.\n */\nValidator.prototype._normalizeString = function _normalizeString (rules) {\n    var this$1 = this;\n\n  var validations = {};\n  rules.split('|').forEach(function (rule) {\n    var parsedRule = this$1._parseRule(rule);\n    if (! parsedRule.name) {\n      return;\n    }\n\n    if (parsedRule.name === 'required') {\n      validations.required = true;\n    }\n\n    validations[parsedRule.name] = parsedRule.params;\n    if (date.installed && this$1._isADateRule(parsedRule.name)) {\n      var dateFormat = this$1._getDateFormat(validations);\n\n      if (! this$1._containsValidation(validations[parsedRule.name], dateFormat)) {\n        validations[parsedRule.name].push(this$1._getDateFormat(validations));\n      }\n    }\n  });\n\n  return validations;\n};\n\n/**\n * Normalizes a string rule.\n *\n * @param {string} rule The rule to be normalized.\n * @return {object} rule The normalized rule.\n */\nValidator.prototype._parseRule = function _parseRule (rule) {\n  var params = [];\n  var name = rule.split(':')[0];\n\n  if (~rule.indexOf(':')) {\n    params = rule.split(':').slice(1).join(':').split(',');\n  }\n\n  return { name: name, params: params };\n};\n\n/**\n * Formats an error message for field and a rule.\n *\n * @param{string} field The field name.\n * @param{object} rule Normalized rule object.\n * @param {object} data Additional Information about the validation result.\n * @param {string} scope The field scope.\n * @return {string} Formatted error message.\n */\nValidator.prototype._formatErrorMessage = function _formatErrorMessage (field, rule, data, scope) {\n    if ( data === void 0 ) data = {};\n    if ( scope === void 0 ) scope = '__global__';\n\n  var name = this._getFieldDisplayName(field, scope);\n  var params = this._getLocalizedParams(rule, scope);\n  // Defaults to english message.\n  if (! this.dictionary.hasLocale(LOCALE)) {\n    var msg$1 = this.dictionary.getFieldMessage('en', field, rule.name);\n\n    return isCallable(msg$1) ? msg$1(name, params, data) : msg$1;\n  }\n\n  var msg = this.dictionary.getFieldMessage(LOCALE, field, rule.name);\n\n  return isCallable(msg) ? msg(name, params, data) : msg;\n};\n\n/**\n * Translates the parameters passed to the rule (mainly for target fields).\n */\nValidator.prototype._getLocalizedParams = function _getLocalizedParams (rule, scope) {\n    if ( scope === void 0 ) scope = '__global__';\n\n  if (~ ['after', 'before', 'confirmed'].indexOf(rule.name) &&\n      rule.params && rule.params[0]) {\n    var param = this.$scopes[scope][rule.params[0]];\n    if (param && param.name) { return [param.name]; }\n    return [this.dictionary.getAttribute(LOCALE, rule.params[0], rule.params[0])];\n  }\n\n  return rule.params;\n};\n\n/**\n * Resolves an appropiate display name, first checking 'data-as' or the registered 'prettyName'\n * Then the dictionary, then fallsback to field name.\n * @return {String} displayName The name to be used in the errors.\n */\nValidator.prototype._getFieldDisplayName = function _getFieldDisplayName (field, scope) {\n    if ( scope === void 0 ) scope = '__global__';\n\n  return this.$scopes[scope][field].as || this.dictionary.getAttribute(LOCALE, field, field);\n};\n\n/**\n * Tests a single input value against a rule.\n *\n * @param{*} name The name of the field.\n * @param{*} valuethe value of the field.\n * @param{object} rule the rule object.\n * @param {scope} scope The field scope.\n * @return {boolean} Whether it passes the check.\n */\nValidator.prototype._test = function _test (name, value, rule, scope) {\n    var this$1 = this;\n    if ( scope === void 0 ) scope = '__global__';\n\n  var validator = Rules[rule.name];\n  if (! validator || typeof validator !== 'function') {\n    throw new ValidatorException((\"No such validator '\" + (rule.name) + \"' exists.\"));\n  }\n\n  var result = validator(value, rule.params, name);\n\n  // If it is a promise.\n  if (isCallable(result.then)) {\n    return result.then(function (values) {\n      var allValid = true;\n      var data = {};\n      if (Array.isArray(values)) {\n        allValid = values.every(function (t) { return t.valid; });\n      } else { // Is a single object.\n        allValid = values.valid;\n        data = values.data;\n      }\n\n      if (! allValid) {\n        this$1.errorBag.add(\n                      name,\n                      this$1._formatErrorMessage(name, rule, data, scope),\n                      rule.name,\n                      scope\n                  );\n      }\n\n      return allValid;\n    });\n  }\n\n  if (! isObject(result)) {\n    result = { valid: result, data: {} };\n  }\n\n  if (! result.valid) {\n    this.errorBag.add(\n              name,\n              this._formatErrorMessage(name, rule, result.data, scope),\n              rule.name,\n              scope\n          );\n  }\n\n  return result.valid;\n};\n\n/**\n * Adds an event listener for a specific field.\n * @param {String} name\n * @param {String} fieldName\n * @param {Function} callback\n */\nValidator.prototype.on = function on (name, fieldName, scope, callback) {\n  if (! fieldName) {\n    throw new ValidatorException((\"Cannot add a listener for non-existent field \" + fieldName + \".\"));\n  }\n\n  if (! isCallable(callback)) {\n    throw new ValidatorException((\"The \" + name + \" callback for field \" + fieldName + \" is not callable.\"));\n  }\n\n  this.$scopes[scope][fieldName].events[name] = callback;\n};\n\n/**\n * Removes the event listener for a specific field.\n * @param {String} name\n * @param {String} fieldName\n */\nValidator.prototype.off = function off (name, fieldName, scope) {\n  if (! fieldName) {\n    warn((\"Cannot remove a listener for non-existent field \" + fieldName + \".\"));\n  }\n\n  this.$scopes[scope][fieldName].events[name] = undefined;\n};\n\nValidator.prototype._assignFlags = function _assignFlags (field) {\n  field.flags = {\n    untouched: true,\n    touched: false,\n    dirty: false,\n    pristine: true,\n    valid: null,\n    invalid: null,\n    required: field.required,\n    pending: false\n  };\n\n  var flagObj = {};\n    flagObj[field.name] = field.flags;\n  if (field.scope === '__global__') {\n    this.fieldBag = assign({}, this.fieldBag, flagObj);\n    return;\n  }\n\n  var scopeObj = assign({}, this.fieldBag[(\"$\" + (field.scope))], flagObj);\n\n  this.fieldBag = assign({}, this.fieldBag, ( obj = {}, obj[(\"$\" + (field.scope))] = scopeObj, obj ));\n    var obj;\n};\n\n/**\n * Registers a field to be validated.\n *\n * @param{string} name The field name.\n * @param{String|Array|Object} checks validations expression.\n * @param {string} prettyName Custom name to be used as field name in error messages.\n * @param {Function} getter A function used to retrive a fresh value for the field.\n */\nValidator.prototype.attach = function attach (name, checks, options) {\n    var this$1 = this;\n    if ( options === void 0 ) options = {};\n\n  var attach = function () {\n    options.scope = this$1._resolveScope(options.scope);\n    this$1.updateField(name, checks, options);\n    var field = this$1.$scopes[options.scope][name];\n    field.scope = options.scope;\n    field.name = name;\n    field.as = options.prettyName;\n    field.getter = options.getter;\n    field.context = options.context;\n    field.listeners = options.listeners || { detach: function detach() {} };\n    field.el = field.listeners.el;\n    field.events = {};\n    this$1._assignFlags(field);\n    // cache the scope property.\n    if (field.el && isCallable(field.el.setAttribute)) {\n      field.el.setAttribute('data-vv-scope', field.scope);\n    }\n\n    if (field.listeners.classes) {\n      field.listeners.classes.attach(field);\n    }\n    this$1._setAriaRequiredAttribute(field);\n    this$1._setAriaValidAttribute(field, true);\n    // if initial modifier is applied, validate immediatly.\n    if (options.initial) {\n      this$1.validate(name, field.getter(field.context()), field.scope).catch(function () {});\n    }\n  };\n\n  var scope = isCallable(options.scope) ? options.scope() : options.scope;\n  if (! scope && ! this.$ready) {\n    this.$deferred.push(attach);\n    return;\n  }\n\n  attach();\n};\n\n/**\n * Initializes the non-scoped fields and any bootstrap logic.\n */\nValidator.prototype.init = function init () {\n  this.$ready = true;\n  this.$deferred.forEach(function (attach) {\n    attach();\n  });\n  this.$deferred = [];\n\n  return this;\n};\n\n/**\n * Sets the flags on a field.\n *\n * @param {String} name\n * @param {Object} flags\n */\nValidator.prototype.flag = function flag (name, flags) {\n  var ref = name.split('.');\n    var scope = ref[0];\n    var fieldName = ref[1];\n  if (!fieldName) {\n    fieldName = scope;\n    scope = null;\n  }\n  var field = scope ? getPath((scope + \".\" + fieldName), this.$scopes) :\n                        this.$scopes.__global__[fieldName];\n  if (! field) {\n    return;\n  }\n\n  Object.keys(field.flags).forEach(function (flag) {\n    field.flags[flag] = flags[flag] !== undefined ? flags[flag] : field.flags[flag];\n  });\n  field.listeners.classes.sync();\n};\n\n/**\n * Append another validation to an existing field.\n *\n * @param{string} name The field name.\n * @param{string} checks validations expression.\n */\nValidator.prototype.append = function append (name, checks, options) {\n    if ( options === void 0 ) options = {};\n\n  options.scope = this._resolveScope(options.scope);\n  // No such field\n  if (! this.$scopes[options.scope] || ! this.$scopes[options.scope][name]) {\n    this.attach(name, checks, options);\n  }\n\n  var field = this.$scopes[options.scope][name];\n  var newChecks = this._normalizeRules(name, checks, options.scope);\n  Object.keys(newChecks).forEach(function (key) {\n    field.validations[key] = newChecks[key];\n  });\n};\n\n/**\n * Updates the field rules with new ones.\n */\nValidator.prototype.updateField = function updateField (name, checks, options) {\n    if ( options === void 0 ) options = {};\n\n  var field = getPath(((options.scope) + \".\" + name), this.$scopes, null);\n  var oldChecks = field ? JSON.stringify(field.validations) : '';\n  this._createField(name, checks, options.scope);\n  field = getPath(((options.scope) + \".\" + name), this.$scopes, null);\n  var newChecks = field ? JSON.stringify(field.validations) : '';\n\n  // compare both newChecks and oldChecks to make sure we don't trigger uneccessary directive\n  // update by changing the errorBag (prevents infinite loops).\n  if (newChecks !== oldChecks) {\n    this.errorBag.remove(name, options.scope);\n  }\n};\n\n/**\n * Clears the errors from the errorBag using the next tick if possible.\n */\nValidator.prototype.clean = function clean () {\n    var this$1 = this;\n\n  if (! this.$vm || ! isCallable(this.$vm.$nextTick)) {\n    return;\n  }\n\n  this.$vm.$nextTick(function () {\n    this$1.errorBag.clear();\n  });\n};\n\n/**\n * Removes a field from the validator.\n *\n * @param{String} name The name of the field.\n * @param {String} scope The name of the field scope.\n */\nValidator.prototype.detach = function detach (name, scope) {\n    if ( scope === void 0 ) scope = '__global__';\n\n  // No such field.\n  if (! this.$scopes[scope] || ! this.$scopes[scope][name]) {\n    return;\n  }\n\n  if (this.$scopes[scope][name].listeners) {\n    this.$scopes[scope][name].listeners.detach();\n  }\n\n  this.errorBag.remove(name, scope);\n  delete this.$scopes[scope][name];\n};\n\n/**\n * Adds a custom validator to the list of validation rules.\n *\n * @param{string} name The name of the validator.\n * @param{object|function} validator The validator object/function.\n */\nValidator.prototype.extend = function extend (name, validator) {\n  Validator.extend(name, validator);\n};\n\n/**\n * Gets the internal errorBag instance.\n *\n * @return {ErrorBag} errorBag The internal error bag object.\n */\nValidator.prototype.getErrors = function getErrors () {\n  return this.errorBag;\n};\n\n/**\n * Just an alias to the static method for convienece.\n */\nValidator.prototype.installDateTimeValidators = function installDateTimeValidators (moment) {\n  Validator.installDateTimeValidators(moment);\n};\n\n/**\n * Removes a rule from the list of validators.\n * @param {String} name The name of the validator/rule.\n */\nValidator.prototype.remove = function remove (name) {\n  Validator.remove(name);\n};\n\n/**\n * Sets the validator current langauge.\n *\n * @param {string} language locale or language id.\n */\nValidator.prototype.setLocale = function setLocale (language) {\n  /* istanbul ignore if */\n  if (! this.dictionary.hasLocale(language)) {\n    // eslint-disable-next-line\n    warn('You are setting the validator locale to a locale that is not defined in the dicitionary. English messages may still be generated.');\n  }\n\n  LOCALE = language;\n};\n\n/**\n * Sets the operating mode for this validator.\n * strictMode = true: Values without a rule are invalid and cause failure.\n * strictMode = false: Values without a rule are valid and are skipped.\n * @param {Boolean} strictMode.\n */\nValidator.prototype.setStrictMode = function setStrictMode (strictMode) {\n    if ( strictMode === void 0 ) strictMode = true;\n\n  this.strictMode = strictMode;\n};\n\n/**\n * Updates the messages dicitionary, overwriting existing values and adding new ones.\n *\n * @param{object} data The messages object.\n */\nValidator.prototype.updateDictionary = function updateDictionary (data) {\n  Validator.updateDictionary(data);\n};\n\n/**\n * Adds a scope.\n */\nValidator.prototype.addScope = function addScope (scope) {\n  if (scope && ! this.$scopes[scope]) {\n    this.$scopes[scope] = {};\n  }\n};\n\n/**\n * Validates a value against a registered field validations.\n *\n * @param{string} name the field name.\n * @param{*} value The value to be validated.\n * @param {String} scope The scope of the field.\n * @param {Boolean} throws If it should throw.\n * @return {Promise}\n */\nValidator.prototype.validate = function validate (name, value, scope, throws) {\n    var this$1 = this;\n    if ( scope === void 0 ) scope = '__global__';\n    if ( throws === void 0 ) throws = true;\n\n  if (this.paused) { return Promise.resolve(true); }\n\n  if (name && name.indexOf('.') > -1) {\n    // no such field, try the scope form.\n    if (! this.$scopes.__global__[name]) {\n      var assign$$1;\n        (assign$$1 = name.split('.'), scope = assign$$1[0], name = assign$$1[1]);\n    }\n  }\n  if (! scope) { scope = '__global__'; }\n  if (! this.$scopes[scope] || ! this.$scopes[scope][name]) {\n    if (! this.strictMode) { return Promise.resolve(true); }\n\n    var fullName = scope === '__global__' ? name : (scope + \".\" + name);\n    warn((\"Validating a non-existant field: \\\"\" + fullName + \"\\\". Use \\\"attach()\\\" first.\"));\n\n    throw new ValidatorException('Validation Failed');\n  }\n\n  var field = this.$scopes[scope][name];\n  if (field.flags) {\n    field.flags.pending = true;\n  }\n  this.errorBag.remove(name, scope);\n  // if its not required and is empty or null or undefined then it passes.\n  if (! field.required && ~[null, undefined, ''].indexOf(value)) {\n    this._setAriaValidAttribute(field, true);\n    if (field.events && isCallable(field.events.after)) {\n      field.events.after({ valid: true });\n    }\n\n    return Promise.resolve(true);\n  }\n\n  try {\n    var promises = Object.keys(field.validations).map(function (rule) {\n      var result = this$1._test(\n        name,\n        value,\n        { name: rule, params: field.validations[rule] },\n        scope\n      );\n\n      if (isCallable(result.then)) {\n        return result;\n      }\n\n      // Early exit.\n      if (! result) {\n        if (field.events && isCallable(field.events.after)) {\n          field.events.after({ valid: false });\n        }\n        throw new ValidatorException('Validation Aborted.');\n      }\n\n      if (field.events && isCallable(field.events.after)) {\n        field.events.after({ valid: true });\n      }\n      return Promise.resolve(result);\n    });\n\n    return Promise.all(promises).then(function (values) {\n      var valid = values.every(function (t) { return t; });\n      this$1._setAriaValidAttribute(field, valid);\n\n      if (! valid && throws) {\n        if (field.events && isCallable(field.events.after)) {\n          field.events.after({ valid: false });\n        }\n        throw new ValidatorException('Failed Validation');\n      }\n      return valid;\n    });\n  } catch (error) {\n    if (error.msg === '[vee-validate]: Validation Aborted.') {\n      if (field.events && isCallable(field.events.after)) {\n        field.events.after({ valid: false });\n      }\n      return Promise.resolve(false);\n    }\n\n    throw error;\n  }\n};\n\n/**\n * Sets the aria-invalid attribute on the element.\n */\nValidator.prototype._setAriaValidAttribute = function _setAriaValidAttribute (field, valid) {\n  if (! field.el || field.listeners.component) {\n    return;\n  }\n\n  field.el.setAttribute('aria-invalid', !valid);\n};\n\n/**\n * Sets the aria-required attribute on the element.\n */\nValidator.prototype._setAriaRequiredAttribute = function _setAriaRequiredAttribute (field) {\n  if (! field.el || field.listeners.component) {\n    return;\n  }\n\n  field.el.setAttribute('aria-required', !! field.required);\n};\n\n/**\n * Pauses the validator.\n *\n * @return {Validator}\n */\nValidator.prototype.pause = function pause () {\n  this.paused = true;\n\n  return this;\n};\n\n/**\n * Resumes the validator.\n *\n * @return {Validator}\n */\nValidator.prototype.resume = function resume () {\n  this.paused = false;\n\n  return this;\n};\n\n/**\n * Validates each value against the corresponding field validations.\n * @param{object} values The values to be validated.\n * @param{String} scope The scope to be applied on validation.\n * @return {Promise} Returns a promise with the validation result.\n */\nValidator.prototype.validateAll = function validateAll (values, scope) {\n    var this$1 = this;\n    if ( scope === void 0 ) scope = '__global__';\n\n  if (this.paused) { return Promise.resolve(true); }\n\n  var normalizedValues;\n  if (! values || typeof values === 'string') {\n    this.errorBag.clear(values);\n    normalizedValues = this._resolveValuesFromGetters(values);\n  } else {\n    normalizedValues = {};\n    Object.keys(values).forEach(function (key) {\n      normalizedValues[key] = {\n        value: values[key],\n        scope: scope\n      };\n    });\n  }\n  var promises = Object.keys(normalizedValues).map(function (property) { return this$1.validate(\n    property,\n    normalizedValues[property].value,\n    normalizedValues[property].scope,\n    false // do not throw\n  ); });\n\n  return Promise.all(promises).then(function (results) {\n    var valid = results.every(function (t) { return t; });\n    if (! valid) {\n      throw new ValidatorException('Validation Failed');\n    }\n\n    return valid;\n  });\n};\n\n/**\n * Validates all scopes.\n * @returns {Promise} All promises resulted from each scope.\n */\nValidator.prototype.validateScopes = function validateScopes () {\n    var this$1 = this;\n\n  if (this.paused) { return Promise.resolve(true); }\n\n  return Promise.all(\n    Object.keys(this.$scopes).map(function (scope) { return this$1.validateAll(scope); })\n  );\n};\n\nObject.defineProperties( Validator.prototype, prototypeAccessors );\n\nvar validatorRequested = function (injections) {\n  if (! injections) {\n    return false;\n  }\n\n  if (Array.isArray(injections) && ~injections.indexOf('$validator')) {\n    return true;\n  }\n\n  if (isObject(injections) && injections.$validator) {\n    return true;\n  }\n\n  return false;\n};\n\nvar makeMixin = function (Vue, options) {\n  var mixin = {};\n  mixin.provide = function providesValidator() {\n    if (this.$validator) {\n      return {\n        $validator: this.$validator\n      };\n    }\n\n    return {};\n  };\n\n  mixin.beforeCreate = function beforeCreate() {\n    // if its a root instance, inject anyways, or if it requested a new instance.\n    if (this.$options.$validates || !this.$parent) {\n      this.$validator = new Validator(null, { init: false, vm: this });\n    }\n\n    var requested = validatorRequested(this.$options.inject);\n\n    // if automatic injection is enabled and no instance was requested.\n    if (! this.$validator && options.inject && !requested) {\n      this.$validator = new Validator(null, { init: false, vm: this });\n    }\n\n    // don't inject errors or fieldBag as no validator was resolved.\n    if (! requested && ! this.$validator) {\n      return;\n    }\n\n    // There is a validator but it isn't injected, mark as reactive.\n    if (! requested && this.$validator) {\n      Vue.util.defineReactive(this.$validator, 'errorBag', this.$validator.errorBag);\n      Vue.util.defineReactive(this.$validator, 'fieldBag', this.$validator.fieldBag);\n    }\n\n    if (! this.$options.computed) {\n      this.$options.computed = {};\n    }\n\n    this.$options.computed[options.errorBagName] = function errorBagGetter() {\n      return this.$validator.errorBag;\n    };\n    this.$options.computed[options.fieldsBagName] = function fieldBagGetter() {\n      return this.$validator.fieldBag;\n    };\n  };\n\n  mixin.mounted = function mounted() {\n    if (this.$validator) {\n      this.$validator.init();\n    }\n  };\n\n  return mixin;\n};\n\nvar DEFAULT_CLASS_NAMES = {\n  touched: 'touched', // the control has been blurred\n  untouched: 'untouched', // the control hasn't been blurred\n  valid: 'valid', // model is valid\n  invalid: 'invalid', // model is invalid\n  pristine: 'pristine', // control has not been interacted with\n  dirty: 'dirty' // control has been interacted with\n};\n\nvar ClassListener = function ClassListener(el, validator, options) {\n  if ( options === void 0 ) options = {};\n\n  this.el = el;\n  this.validator = validator;\n  this.enabled = options.enableAutoClasses;\n  this.classNames = assign({}, DEFAULT_CLASS_NAMES, options.classNames || {});\n  this.component = options.component;\n  this.listeners = {};\n};\n\n/**\n * Resets the classes state.\n */\nClassListener.prototype.reset = function reset () {\n  // detach all listeners.\n  this.detach();\n\n  // remove classes\n  this.remove(this.classNames.dirty);\n  this.remove(this.classNames.touched);\n  this.remove(this.classNames.valid);\n  this.remove(this.classNames.invalid);\n\n  // listen again.\n  this.attach(this.field);\n};\n\n/**\n * Syncs the automatic classes.\n */\nClassListener.prototype.sync = function sync () {\n  this.addInteractionListeners();\n\n  if (! this.enabled) { return; }\n\n  this.toggle(this.classNames.dirty, this.field.flags.dirty);\n  this.toggle(this.classNames.pristine, this.field.flags.pristine);\n  this.toggle(this.classNames.valid, this.field.flags.valid);\n  this.toggle(this.classNames.invalid, this.field.flags.invalid);\n  this.toggle(this.classNames.touched, this.field.flags.touched);\n  this.toggle(this.classNames.untouched, this.field.flags.untouched);\n};\n\nClassListener.prototype.addFocusListener = function addFocusListener () {\n    var this$1 = this;\n\n  // listen for focus event.\n  this.listeners.focus = function () {\n    this$1.remove(this$1.classNames.untouched);\n    this$1.add(this$1.classNames.touched);\n    this$1.field.flags.touched = true;\n    this$1.field.flags.untouched = false;\n\n    if (this$1.component) { return; }\n\n    // only needed once.\n    this$1.el.removeEventListener('focus', this$1.listeners.focus);\n    this$1.listeners.focus = null;\n  };\n\n  if (this.component) {\n    this.component.$once('focus', this.listeners.focus);\n  } else {\n    this.el.addEventListener('focus', this.listeners.focus);\n  }\n};\n\nClassListener.prototype.addInputListener = function addInputListener () {\n    var this$1 = this;\n\n  // listen for input.\n  this.listeners.input = function () {\n    this$1.remove(this$1.classNames.pristine);\n    this$1.add(this$1.classNames.dirty);\n    this$1.field.flags.dirty = true;\n    this$1.field.flags.pristine = false;\n\n    if (this$1.component) { return; }\n\n    // only needed once.\n    this$1.el.removeEventListener('input', this$1.listeners.input);\n    this$1.listeners.input = null;\n  };\n\n  if (this.component) {\n    this.component.$once('input', this.listeners.input);\n  } else {\n    this.el.addEventListener('input', this.listeners.input);\n  }\n};\n\nClassListener.prototype.addInteractionListeners = function addInteractionListeners () {\n  if (! this.listeners.focus) {\n    this.addFocusListener();\n  }\n\n  if (! this.listeners.input) {\n    this.addInputListener();\n  }\n};\n\n/**\n * Attach field with its listeners.\n * @param {*} field\n */\nClassListener.prototype.attach = function attach (field) {\n    var this$1 = this;\n\n  this.field = field;\n  this.add(this.classNames.pristine);\n  this.add(this.classNames.untouched);\n\n  this.addInteractionListeners();\n\n  this.listeners.after = function (e) {\n    this$1.remove(e.valid ? this$1.classNames.invalid : this$1.classNames.valid);\n    this$1.add(e.valid ? this$1.classNames.valid : this$1.classNames.invalid);\n    this$1.field.flags.valid = e.valid;\n    this$1.field.flags.invalid = ! e.valid;\n    this$1.field.flags.pending = false;\n  };\n\n  this.validator.on('after', this.field.name, this.field.scope, this.listeners.after);\n};\n\n/**\n * Detach all listeners.\n */\nClassListener.prototype.detach = function detach () {\n  // TODO: Why could the field be undefined?\n  if (! this.field) { return; }\n\n  if (this.component) {\n    this.component.$off('input', this.listeners.input);\n    this.component.$off('focus', this.listeners.focus);\n  } else {\n    this.el.removeEventListener('focus', this.listeners.focus);\n    this.el.removeEventListener('input', this.listeners.input);\n  }\n  this.validator.off('after', this.field.name, this.field.scope);\n};\n\n/**\n * Add a class.\n * @param {*} className\n */\nClassListener.prototype.add = function add (className) {\n  if (! this.enabled) { return; }\n\n  addClass(this.el, className);\n};\n\n/**\n * Remove a class.\n * @param {*} className\n */\nClassListener.prototype.remove = function remove (className) {\n  if (! this.enabled) { return; }\n\n  removeClass(this.el, className);\n};\n\n/**\n * Toggles the class name.\n *\n * @param {String} className\n * @param {Boolean} status\n */\nClassListener.prototype.toggle = function toggle (className, status) {\n  if (status) {\n    this.add(className);\n    return;\n  }\n\n  this.remove(className);\n};\n\nvar config = {\n  locale: 'en',\n  delay: 0,\n  errorBagName: 'errors',\n  dictionary: null,\n  strict: true,\n  fieldsBagName: 'fields',\n  enableAutoClasses: false,\n  classNames: {},\n  events: 'input|blur',\n  inject: true\n};\n\nvar ListenerGenerator = function ListenerGenerator(el, binding, vnode, options) {\n  this.unwatch = undefined;\n  this.callbacks = [];\n  this.el = el;\n  this.scope = isObject(binding.value) ? binding.value.scope : getScope(el);\n  this.binding = binding;\n  this.vm = vnode.context;\n  this.component = vnode.child;\n  this.options = assign({}, config, options);\n  this.fieldName = this._resolveFieldName();\n  this.model = this._resolveModel(vnode.data.directives);\n  this.classes = new ClassListener(el, this.vm.$validator, {\n    component: this.component,\n    enableAutoClasses: options.enableAutoClasses,\n    classNames: options.classNames\n  });\n};\n\n/**\n * Checks if the node directives contains a v-model.\n */\nListenerGenerator.prototype._resolveModel = function _resolveModel (directives) {\n  var expRegex = /^[a-z_]+[0-9]*(\\w*\\.[a-z_]\\w*)*$/i;\n  var model = find(directives, function (d) { return d.name === 'model' && expRegex.test(d.expression); });\n\n  return model && this._isExistingPath(model.expression) && model.expression;\n};\n\n/**\n * @param {String} path\n */\nListenerGenerator.prototype._isExistingPath = function _isExistingPath (path) {\n  var obj = this.vm;\n  return path.split('.').every(function (prop) {\n    if (! Object.prototype.hasOwnProperty.call(obj, prop)) {\n      return false;\n    }\n\n    obj = obj[prop];\n\n    return true;\n  });\n};\n\n  /**\n   * Resolves the field name to trigger validations.\n   * @return {String} The field name.\n   */\nListenerGenerator.prototype._resolveFieldName = function _resolveFieldName () {\n  if (this.component) {\n    return getDataAttribute(this.el, 'name') || this.component.name;\n  }\n\n  return getDataAttribute(this.el, 'name') || this.el.name;\n};\n\n  /**\n   * Determines if the validation rule requires additional listeners on target fields.\n   */\nListenerGenerator.prototype._hasFieldDependency = function _hasFieldDependency (rules) {\n    var this$1 = this;\n\n  var fieldName = false;\n  if (! rules) {\n    return false;\n  }\n\n  if (isObject(rules)) {\n    Object.keys(rules).forEach(function (r) { // eslint-disable-line\n      if (/confirmed|after|before/.test(r)) {\n        fieldName = rules[r];\n\n        return false;\n      }\n    });\n\n    return fieldName;\n  }\n\n  rules.split('|').every(function (r) {\n    if (/\\b(confirmed|after|before):/.test(r)) {\n      fieldName = r.split(':')[1];\n      return false;\n    }\n\n    if (/\\b(confirmed)/.test(r)) {\n      fieldName = (this$1.fieldName) + \"_confirmation\";\n      return false;\n    }\n\n    return true;\n  });\n\n  return fieldName;\n};\n\n  /**\n   * Validates input value, triggered by 'input' event.\n   */\nListenerGenerator.prototype._inputListener = function _inputListener () {\n  return this._validate(this.el.value);\n};\n\n  /**\n   * Validates files, triggered by 'change' event.\n   */\nListenerGenerator.prototype._fileListener = function _fileListener () {\n    var this$1 = this;\n\n  return this._validate(toArray(this.el.files)).then(function (isValid) {\n    if (! isValid && this$1.binding.modifiers.reject) {\n      this$1.el.value = '';\n    }\n  });\n};\n\n  /**\n   * Validates radio buttons, triggered by 'change' event.\n   */\nListenerGenerator.prototype._radioListener = function _radioListener () {\n  var checked = document.querySelector((\"input[name=\\\"\" + (this.el.name) + \"\\\"]:checked\"));\n  return this._validate(checked ? checked.value : null);\n};\n\n  /**\n   * Validates checkboxes, triggered by change event.\n   */\nListenerGenerator.prototype._checkboxListener = function _checkboxListener () {\n    var this$1 = this;\n\n  var checkedBoxes = document.querySelectorAll((\"input[name=\\\"\" + (this.el.name) + \"\\\"]:checked\"));\n  if (! checkedBoxes || ! checkedBoxes.length) {\n    this._validate(null);\n    return;\n  }\n\n  toArray(checkedBoxes).forEach(function (box) {\n    this$1._validate(box.value);\n  });\n};\n\n  /**\n   * Trigger the validation for a specific value.\n   */\nListenerGenerator.prototype._validate = function _validate (value) {\n  return this.vm.$validator.validate(\n    this.fieldName, value, this.scope || getScope(this.el)\n    ).catch(function (result) { return result; });\n};\n\n  /**\n   * Returns a scoped callback, only runs if the el scope is the same as the recieved scope\n   * From the event.\n   */\nListenerGenerator.prototype._getScopedListener = function _getScopedListener (callback) {\n    var this$1 = this;\n\n  return function (scope) {\n    if (! scope || scope === this$1.scope || scope instanceof window.Event) {\n      callback();\n    }\n  };\n};\n\n  /**\n   * Attaches validator event-triggered validation.\n   */\nListenerGenerator.prototype._attachValidatorEvent = function _attachValidatorEvent () {\n    var this$1 = this;\n\n  var listener = this._getScopedListener(this._getSuitableListener().listener.bind(this));\n  var fieldName = this._hasFieldDependency(\n      getRules(this.binding.expression, this.binding.value, this.el)\n    );\n  if (fieldName) {\n          // Wait for the validator ready triggered when vm is mounted because maybe\n          // the element isn't mounted yet.\n    this.vm.$nextTick(function () {\n      var target = document.querySelector((\"input[name='\" + fieldName + \"']\"));\n      if (! target) {\n        warn('Cannot find target field, no additional listeners were attached.');\n        return;\n      }\n\n      var events = getDataAttribute(this$1.el, 'validate-on') || this$1.options.events;\n      events.split('|').forEach(function (e) {\n        target.addEventListener(e, listener, false);\n        this$1.callbacks.push({ name: e, listener: listener, el: target });\n      });\n    });\n  }\n};\n\n  /**\n   * Determines a suitable listener for the element.\n   */\nListenerGenerator.prototype._getSuitableListener = function _getSuitableListener () {\n  var listener;\n  var overrides = {\n    input: 'input',\n    blur: 'blur'\n  };\n\n  if (this.el.tagName === 'SELECT') {\n    overrides.input = 'change';\n    listener = {\n      names: ['change', 'blur'],\n      listener: this._inputListener\n    };\n  } else {\n    // determine the suitable listener and events to handle\n    switch (this.el.type) {\n    case 'file':\n      overrides.input = 'change';\n      overrides.blur = null;\n      listener = {\n        names: ['change'],\n        listener: this._fileListener\n      };\n      break;\n\n    case 'radio':\n      overrides.input = 'change';\n      overrides.blur = null;\n      listener = {\n        names: ['change'],\n        listener: this._radioListener\n      };\n      break;\n\n    case 'checkbox':\n      overrides.input = 'change';\n      overrides.blur = null;\n      listener = {\n        names: ['change'],\n        listener: this._checkboxListener\n      };\n      break;\n\n    default:\n      listener = {\n        names: ['input', 'blur'],\n        listener: this._inputListener\n      };\n      break;\n    }\n  }\n  // users are able to specify which events they want to validate on\n  var events = getDataAttribute(this.el, 'validate-on') || this.options.events;\n  listener.names = events.split('|')\n                         .filter(function (e) { return overrides[e] !== null; })\n                         .map(function (e) { return overrides[e] || e; });\n\n  return listener;\n};\n\n/**\n * Attaches neccessary validation events for the component.\n */\nListenerGenerator.prototype._attachComponentListeners = function _attachComponentListeners () {\n    var this$1 = this;\n\n  this.componentListener = debounce(function (value) {\n    this$1._validate(value);\n  }, getDataAttribute(this.el, 'delay') || this.options.delay);\n\n  this.component.$on('input', this.componentListener);\n  this.componentPropUnwatch = this.component.$watch('value', this.componentListener);\n};\n\n/**\n * Attachs a suitable listener for the input.\n */\nListenerGenerator.prototype._attachFieldListeners = function _attachFieldListeners () {\n    var this$1 = this;\n\n  // If it is a component, use vue events instead.\n  if (this.component) {\n    this._attachComponentListeners();\n\n    return;\n  }\n\n  var handler = this._getSuitableListener();\n  var listener = debounce(\n    handler.listener.bind(this),\n    getDataAttribute(this.el, 'delay') || this.options.delay\n  );\n\n  if (~['radio', 'checkbox'].indexOf(this.el.type)) {\n    this.vm.$nextTick(function () {\n      var elms = document.querySelectorAll((\"input[name=\\\"\" + (this$1.el.name) + \"\\\"]\"));\n      toArray(elms).forEach(function (input) {\n        handler.names.forEach(function (handlerName) {\n          input.addEventListener(handlerName, listener, false);\n          this$1.callbacks.push({ name: handlerName, listener: listener, el: input });\n        });\n      });\n    });\n\n    return;\n  }\n\n  handler.names.forEach(function (handlerName) {\n    this$1.el.addEventListener(handlerName, listener, false);\n    this$1.callbacks.push({ name: handlerName, listener: listener, el: this$1.el });\n  });\n};\n\n/**\n * Returns a context, getter factory pairs for each input type.\n */\nListenerGenerator.prototype._resolveValueGetter = function _resolveValueGetter () {\n    var this$1 = this;\n\n  if (this.component) {\n    return {\n      context: function () { return this$1.component; },\n      getter: function getter(context) {\n        return context.value;\n      }\n    };\n  }\n\n  switch (this.el.type) {\n  case 'checkbox': return {\n    context: function () { return document.querySelectorAll((\"input[name=\\\"\" + (this$1.el.name) + \"\\\"]:checked\")); },\n    getter: function getter(context) {\n      if (! context || ! context.length) {\n        return null;\n      }\n\n      return toArray(context).map(function (checkbox) { return checkbox.value; });\n    }\n  };\n  case 'radio': return {\n    context: function () { return document.querySelector((\"input[name=\\\"\" + (this$1.el.name) + \"\\\"]:checked\")); },\n    getter: function getter(context) {\n      return context && context.value;\n    }\n  };\n  case 'file': return {\n    context: function () { return this$1.el; },\n    getter: function getter(context) {\n      return toArray(context.files);\n    }\n  };\n\n  default: return {\n    context: function () { return this$1.el; },\n    getter: function getter(context) {\n      return context.value;\n    }\n  };\n  }\n};\n\n/*\n* Gets the arg string value, either from the directive or the expression value.\n*/\nListenerGenerator.prototype._getArg = function _getArg () {\n  // Get it from the directive arg.\n  if (this.binding.arg) {\n    return this.binding.arg;\n  }\n\n  // Get it from v-model.\n  if (this.model) {\n    return this.model;\n  }\n\n  return isObject(this.binding.value) ? this.binding.value.arg : null;\n};\n\n/**\n * Attaches model watchers and extra listeners.\n */\nListenerGenerator.prototype._attachModelWatcher = function _attachModelWatcher (arg) {\n    var this$1 = this;\n\n  var events = getDataAttribute(this.el, 'validate-on') || this.options.events;\n  var listener = debounce(\n    this._getSuitableListener().listener.bind(this),\n    getDataAttribute(this.el, 'delay') || this.options.delay\n  );\n  events.split('|').forEach(function (name) {\n    if (~['input', 'change'].indexOf(name)) {\n      var debounced = debounce(function (value) {\n        this$1.vm.$validator.validate(\n          this$1.fieldName, value, this$1.scope || getScope(this$1.el)\n        ).catch(function (result) { return result; });\n      }, getDataAttribute(this$1.el, 'delay') || this$1.options.delay);\n      this$1.unwatch = this$1.vm.$watch(arg, debounced, { deep: true });\n      // No need to attach it on element as it will use the vue watcher.\n      return;\n    }\n\n    this$1.el.addEventListener(name, listener, false);\n    this$1.callbacks.push({ name: name, listener: listener, el: this$1.el });\n  });\n};\n\n/**\n * Attaches the Event Listeners.\n */\nListenerGenerator.prototype.attach = function attach () {\n    var this$1 = this;\n\n  var ref = this._resolveValueGetter();\n    var context = ref.context;\n    var getter = ref.getter;\n  this.vm.$validator.attach(\n    this.fieldName,\n    getRules(this.binding.expression, this.binding.value, this.el), {\n      // eslint-disable-next-line\n      scope: function () {\n        return this$1.scope || getScope(this$1.el);\n      },\n      prettyName: getDataAttribute(this.el, 'as') || this.el.title,\n      context: context,\n      getter: getter,\n      listeners: this,\n      initial: this.binding.modifiers.initial\n    }\n  );\n\n  if (this.binding.modifiers.disable) {\n    return;\n  }\n\n  this._attachValidatorEvent();\n  var arg = this._getArg();\n  if (arg) {\n    this._attachModelWatcher(arg);\n    return;\n  }\n\n  this._attachFieldListeners();\n};\n\n  /**\n   * Removes all attached event listeners.\n   */\nListenerGenerator.prototype.detach = function detach () {\n  if (this.component) {\n    this.component.$off('input', this.componentListener);\n\n    if (isCallable(this.componentPropUnwatch)) {\n      this.componentPropUnwatch();\n    }\n  }\n\n  if (this.unwatch) {\n    this.unwatch();\n  }\n\n  this.classes.detach();\n\n  this.callbacks.forEach(function (h) {\n    h.el.removeEventListener(h.name, h.listener);\n  });\n  this.callbacks = [];\n};\n\nvar listenersInstances = [];\n\nvar makeDirective = function (options) { return ({\n  inserted: function inserted(el, binding, vnode) {\n    if (! vnode.context.$validator) {\n      var name = vnode.context.$options._componentTag;\n      // eslint-disable-next-line\n      warn((\"No validator instance is present on \" + (name ?'component \"' +  name + '\"' : 'un-named component') + \", did you forget to inject '$validator'?\"));\n\n      return;\n    }\n    var listener = new ListenerGenerator(el, binding, vnode, options);\n    listener.attach();\n    listenersInstances.push({ vm: vnode.context, el: el, instance: listener });\n  },\n  update: function update(el, ref, ref$1) {\n    var expression = ref.expression;\n    var value = ref.value;\n    var context = ref$1.context;\n\n    var ref$2 = find(listenersInstances, function (l) { return l.vm === context && l.el === el; });\n    var instance = ref$2.instance;\n    // make sure we don't do uneccessary work if no expression was passed\n    // nor if the expression did not change.\n    if (! expression || (instance.cachedExp === JSON.stringify(value))) { return; }\n\n    instance.cachedExp = JSON.stringify(value);\n    var scope = isObject(value) ? (value.scope || getScope(el)) : getScope(el);\n    context.$validator.updateField(\n      instance.fieldName,\n      getRules(expression, value, el),\n      { scope: scope || '__global__' }\n    );\n  },\n  unbind: function unbind(el, ref, ref$1) {\n    var value = ref.value;\n    var context = ref$1.context;\n\n    var holder = find(listenersInstances, function (l) { return l.vm === context && l.el === el; });\n    if (typeof holder === 'undefined') {\n      return;\n    }\n\n    var scope = isObject(value) ? value.scope : (getScope(el) || '__global__');\n    context.$validator.detach(holder.instance.fieldName, scope);\n    listenersInstances.splice(listenersInstances.indexOf(holder), 1);\n  }\n}); };\n\nvar normalize = function (fields) {\n  if (Array.isArray(fields)) {\n    return fields.reduce(function (prev, curr) {\n      if (~curr.indexOf('.')) {\n        prev[curr.split('.')[1]] = curr;\n      } else {\n        prev[curr] = curr;\n      }\n\n      return prev;\n    }, {});\n  }\n\n  return fields;\n};\n\n/**\n * Maps fields to computed functions.\n *\n * @param {Array|Object} fields\n */\nvar mapFields = function (fields) {\n  var normalized = normalize(fields);\n  return Object.keys(normalized).reduce(function (prev, curr) {\n    var field = normalized[curr];\n    prev[curr] = function mappedField() {\n      if (this.$validator.fieldBag[field]) {\n        return this.$validator.fieldBag[field];\n      }\n\n      var index = field.indexOf('.');\n      if (index <= 0) {\n        return {};\n      }\n      var ref = field.split('.');\n      var scope = ref[0];\n      var name = ref[1];\n\n      return getPath((\"$\" + scope + \".\" + name), this.$validator.fieldBag, {});\n    };\n\n    return prev;\n  }, {});\n};\n\n// eslint-disable-next-line\nvar install = function (Vue, options) {\n  var config$$1 = assign({}, config, options);\n  if (config$$1.dictionary) {\n    Validator.updateDictionary(config$$1.dictionary);\n  }\n\n  Validator.setLocale(config$$1.locale);\n  Validator.setStrictMode(config$$1.strict);\n\n  Vue.mixin(makeMixin(Vue, config$$1));\n  Vue.directive('validate', makeDirective(config$$1));\n};\n\nvar index = {\n  install: install,\n  mapFields: mapFields,\n  Validator: Validator,\n  ErrorBag: ErrorBag,\n  Rules: Rules,\n  version: '2.0.0-rc.5'\n};\n\nreturn index;\n\n})));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(43),\n  /* template */\n  __webpack_require__(78),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/MainApp.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] MainApp.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-65e6d440\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-65e6d440\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvTWFpbkFwcC52dWU/OTE0YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXVIO0FBQ3ZIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usc0RBQXNELElBQUk7QUFDekksbUNBQW1DOztBQUVuQztBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRpc3Bvc2VkID0gZmFsc2VcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL01haW5BcHAudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi02NWU2ZDQ0MFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9NYWluQXBwLnZ1ZVwiKSxcbiAgLyogc3R5bGVzICovXG4gIG51bGwsXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiL0FwcGxpY2F0aW9ucy9NQU1QL2h0ZG9jcy93cC1jb250ZW50L3BsdWdpbnMvbWFlc3Ryby1nYW1lLWJ1aWxkZXIvc3JjL2pzL01haW5BcHAudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkuc3Vic3RyKDAsIDIpICE9PSBcIl9fXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBNYWluQXBwLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi02NWU2ZDQ0MFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTY1ZTZkNDQwXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvTWFpbkFwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(44),\n  /* template */\n  __webpack_require__(76),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/GameSingle.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] GameSingle.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-5af61e1d\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-5af61e1d\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvR2FtZVNpbmdsZS52dWU/Y2M0MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQTBIO0FBQzFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usc0RBQXNELElBQUk7QUFDekksbUNBQW1DOztBQUVuQztBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRpc3Bvc2VkID0gZmFsc2VcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0dhbWVTaW5nbGUudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi01YWY2MWUxZFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2V9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9HYW1lU2luZ2xlLnZ1ZVwiKSxcbiAgLyogc3R5bGVzICovXG4gIG51bGwsXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiL0FwcGxpY2F0aW9ucy9NQU1QL2h0ZG9jcy93cC1jb250ZW50L3BsdWdpbnMvbWFlc3Ryby1nYW1lLWJ1aWxkZXIvc3JjL2pzL3BhZ2VzL0dhbWVTaW5nbGUudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkuc3Vic3RyKDAsIDIpICE9PSBcIl9fXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBHYW1lU2luZ2xlLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi01YWY2MWUxZFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTVhZjYxZTFkXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvcGFnZXMvR2FtZVNpbmdsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(45),\n  /* template */\n  __webpack_require__(70),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/Home.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] Home.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-32a465e2\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-32a465e2\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvSG9tZS52dWU/OTg0ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQTBIO0FBQzFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usc0RBQXNELElBQUk7QUFDekksbUNBQW1DOztBQUVuQztBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRpc3Bvc2VkID0gZmFsc2VcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0hvbWUudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0zMmE0NjVlMlxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2V9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Ib21lLnZ1ZVwiKSxcbiAgLyogc3R5bGVzICovXG4gIG51bGwsXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiL0FwcGxpY2F0aW9ucy9NQU1QL2h0ZG9jcy93cC1jb250ZW50L3BsdWdpbnMvbWFlc3Ryby1nYW1lLWJ1aWxkZXIvc3JjL2pzL3BhZ2VzL0hvbWUudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkuc3Vic3RyKDAsIDIpICE9PSBcIl9fXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBIb21lLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi0zMmE0NjVlMlwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTMyYTQ2NWUyXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvcGFnZXMvSG9tZS52dWVcbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(46),\n  /* template */\n  __webpack_require__(74),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/MinigameSingle.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] MinigameSingle.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-473890b4\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-473890b4\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvTWluaWdhbWVTaW5nbGUudnVlP2U1NTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUEwSDtBQUMxSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLHNEQUFzRCxJQUFJO0FBQ3pJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9NaW5pZ2FtZVNpbmdsZS52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTQ3Mzg5MGI0XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZX0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL01pbmlnYW1lU2luZ2xlLnZ1ZVwiKSxcbiAgLyogc3R5bGVzICovXG4gIG51bGwsXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiL0FwcGxpY2F0aW9ucy9NQU1QL2h0ZG9jcy93cC1jb250ZW50L3BsdWdpbnMvbWFlc3Ryby1nYW1lLWJ1aWxkZXIvc3JjL2pzL3BhZ2VzL01pbmlnYW1lU2luZ2xlLnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gTWluaWdhbWVTaW5nbGUudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTQ3Mzg5MGI0XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNDczODkwYjRcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy9wYWdlcy9NaW5pZ2FtZVNpbmdsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(47),\n  /* template */\n  __webpack_require__(72),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/components/CodeBox.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] CodeBox.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-3ab92128\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-3ab92128\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9Db2RlQm94LnZ1ZT9jNTM4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBNkg7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSxzREFBc0QsSUFBSTtBQUN6SSxtQ0FBbUM7O0FBRW5DO0FBQ0EsWUFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQ29kZUJveC52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTNhYjkyMTI4XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0NvZGVCb3gudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgbnVsbCxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwLWNvbnRlbnQvcGx1Z2lucy9tYWVzdHJvLWdhbWUtYnVpbGRlci9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9Db2RlQm94LnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gQ29kZUJveC52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRlbXBsYXRlcywgdGhleSBzaG91bGQgdXNlIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtM2FiOTIxMjhcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi0zYWI5MjEyOFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL3BhZ2VzL2NvbXBvbmVudHMvQ29kZUJveC52dWVcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(48),\n  /* template */\n  __webpack_require__(69),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/components/CropBox.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] CropBox.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-2599b1b6\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-2599b1b6\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9Dcm9wQm94LnZ1ZT9kM2JmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBNkg7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSxzREFBc0QsSUFBSTtBQUN6SSxtQ0FBbUM7O0FBRW5DO0FBQ0EsWUFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQ3JvcEJveC52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTI1OTliMWI2XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0Nyb3BCb3gudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgbnVsbCxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwLWNvbnRlbnQvcGx1Z2lucy9tYWVzdHJvLWdhbWUtYnVpbGRlci9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9Dcm9wQm94LnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gQ3JvcEJveC52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRlbXBsYXRlcywgdGhleSBzaG91bGQgdXNlIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtMjU5OWIxYjZcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi0yNTk5YjFiNlwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL3BhZ2VzL2NvbXBvbmVudHMvQ3JvcEJveC52dWVcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(49),\n  /* template */\n  __webpack_require__(71),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/components/DialogBox.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] DialogBox.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-37f770ed\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-37f770ed\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9EaWFsb2dCb3gudnVlPzI3ZmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUE2SDtBQUM3SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLHNEQUFzRCxJQUFJO0FBQ3pJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9EaWFsb2dCb3gudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0zN2Y3NzBlZFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2V9IS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9EaWFsb2dCb3gudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgbnVsbCxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwLWNvbnRlbnQvcGx1Z2lucy9tYWVzdHJvLWdhbWUtYnVpbGRlci9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9EaWFsb2dCb3gudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkuc3Vic3RyKDAsIDIpICE9PSBcIl9fXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBEaWFsb2dCb3gudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTM3Zjc3MGVkXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtMzdmNzcwZWRcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy9wYWdlcy9jb21wb25lbnRzL0RpYWxvZ0JveC52dWVcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(50),\n  /* template */\n  __webpack_require__(68),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/components/InfoBox.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] InfoBox.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-09bf0172\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-09bf0172\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9JbmZvQm94LnZ1ZT9mYjA0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBNkg7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSxzREFBc0QsSUFBSTtBQUN6SSxtQ0FBbUM7O0FBRW5DO0FBQ0EsWUFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vSW5mb0JveC52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTA5YmYwMTcyXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0luZm9Cb3gudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgbnVsbCxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwLWNvbnRlbnQvcGx1Z2lucy9tYWVzdHJvLWdhbWUtYnVpbGRlci9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9JbmZvQm94LnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gSW5mb0JveC52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRlbXBsYXRlcywgdGhleSBzaG91bGQgdXNlIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtMDliZjAxNzJcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi0wOWJmMDE3MlwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL3BhZ2VzL2NvbXBvbmVudHMvSW5mb0JveC52dWVcbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(52),\n  /* template */\n  __webpack_require__(80),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/components/WP-WYSIWYG.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] WP-WYSIWYG.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-d9e73a82\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-d9e73a82\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9XUC1XWVNJV1lHLnZ1ZT8yZGViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBNkg7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSxzREFBc0QsSUFBSTtBQUN6SSxtQ0FBbUM7O0FBRW5DO0FBQ0EsWUFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vV1AtV1lTSVdZRy52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LWQ5ZTczYTgyXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1dQLVdZU0lXWUcudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgbnVsbCxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwLWNvbnRlbnQvcGx1Z2lucy9tYWVzdHJvLWdhbWUtYnVpbGRlci9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9XUC1XWVNJV1lHLnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gV1AtV1lTSVdZRy52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRlbXBsYXRlcywgdGhleSBzaG91bGQgdXNlIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtZDllNzNhODJcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi1kOWU3M2E4MlwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL3BhZ2VzL2NvbXBvbmVudHMvV1AtV1lTSVdZRy52dWVcbi8vIG1vZHVsZSBpZCA9IDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {/**\n  * vue-router v2.5.3\n  * (c) 2017 Evan You\n  * @license MIT\n  */\n/*  */\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error((\"[vue-router] \" + message))\n  }\n}\n\nfunction warn (condition, message) {\n  if (process.env.NODE_ENV !== 'production' && !condition) {\n    typeof console !== 'undefined' && console.warn((\"[vue-router] \" + message));\n  }\n}\n\nvar View = {\n  name: 'router-view',\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  render: function render (_, ref) {\n    var props = ref.props;\n    var children = ref.children;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    data.routerView = true;\n\n    // directly use parent context's createElement() function\n    // so that components rendered by router-view can resolve named slots\n    var h = parent.$createElement;\n    var name = props.name;\n    var route = parent.$route;\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\n\n    // determine current view depth, also check to see if the tree\n    // has been toggled inactive but kept-alive.\n    var depth = 0;\n    var inactive = false;\n    while (parent) {\n      if (parent.$vnode && parent.$vnode.data.routerView) {\n        depth++;\n      }\n      if (parent._inactive) {\n        inactive = true;\n      }\n      parent = parent.$parent;\n    }\n    data.routerViewDepth = depth;\n\n    // render previous view if the tree is inactive and kept-alive\n    if (inactive) {\n      return h(cache[name], data, children)\n    }\n\n    var matched = route.matched[depth];\n    // render empty node if no matched route\n    if (!matched) {\n      cache[name] = null;\n      return h()\n    }\n\n    var component = cache[name] = matched.components[name];\n\n    // attach instance registration hook\n    // this will be called in the instance's injected lifecycle hooks\n    data.registerRouteInstance = function (vm, val) {\n      // val could be undefined for unregistration\n      var current = matched.instances[name];\n      if (\n        (val && current !== vm) ||\n        (!val && current === vm)\n      ) {\n        matched.instances[name] = val;\n      }\n    }\n\n    // also regiseter instance in prepatch hook\n    // in case the same component instance is reused across different routes\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\n      matched.instances[name] = vnode.componentInstance;\n    };\n\n    // resolve props\n    data.props = resolveProps(route, matched.props && matched.props[name]);\n\n    return h(component, data, children)\n  }\n};\n\nfunction resolveProps (route, config) {\n  switch (typeof config) {\n    case 'undefined':\n      return\n    case 'object':\n      return config\n    case 'function':\n      return config(route)\n    case 'boolean':\n      return config ? route.params : undefined\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false,\n          \"props in \\\"\" + (route.path) + \"\\\" is a \" + (typeof config) + \", \" +\n          \"expecting an object, function or boolean.\"\n        );\n      }\n  }\n}\n\n/*  */\n\nvar encodeReserveRE = /[!'()*]/g;\nvar encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };\nvar commaRE = /%2C/g;\n\n// fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\nvar encode = function (str) { return encodeURIComponent(str)\n  .replace(encodeReserveRE, encodeReserveReplacer)\n  .replace(commaRE, ','); };\n\nvar decode = decodeURIComponent;\n\nfunction resolveQuery (\n  query,\n  extraQuery,\n  _parseQuery\n) {\n  if ( extraQuery === void 0 ) extraQuery = {};\n\n  var parse = _parseQuery || parseQuery;\n  var parsedQuery;\n  try {\n    parsedQuery = parse(query || '');\n  } catch (e) {\n    process.env.NODE_ENV !== 'production' && warn(false, e.message);\n    parsedQuery = {};\n  }\n  for (var key in extraQuery) {\n    var val = extraQuery[key];\n    parsedQuery[key] = Array.isArray(val) ? val.slice() : val;\n  }\n  return parsedQuery\n}\n\nfunction parseQuery (query) {\n  var res = {};\n\n  query = query.trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return res\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0\n      ? decode(parts.join('='))\n      : null;\n\n    if (res[key] === undefined) {\n      res[key] = val;\n    } else if (Array.isArray(res[key])) {\n      res[key].push(val);\n    } else {\n      res[key] = [res[key], val];\n    }\n  });\n\n  return res\n}\n\nfunction stringifyQuery (obj) {\n  var res = obj ? Object.keys(obj).map(function (key) {\n    var val = obj[key];\n\n    if (val === undefined) {\n      return ''\n    }\n\n    if (val === null) {\n      return encode(key)\n    }\n\n    if (Array.isArray(val)) {\n      var result = [];\n      val.slice().forEach(function (val2) {\n        if (val2 === undefined) {\n          return\n        }\n        if (val2 === null) {\n          result.push(encode(key));\n        } else {\n          result.push(encode(key) + '=' + encode(val2));\n        }\n      });\n      return result.join('&')\n    }\n\n    return encode(key) + '=' + encode(val)\n  }).filter(function (x) { return x.length > 0; }).join('&') : null;\n  return res ? (\"?\" + res) : ''\n}\n\n/*  */\n\n\nvar trailingSlashRE = /\\/?$/;\n\nfunction createRoute (\n  record,\n  location,\n  redirectedFrom,\n  router\n) {\n  var stringifyQuery$$1 = router && router.options.stringifyQuery;\n  var route = {\n    name: location.name || (record && record.name),\n    meta: (record && record.meta) || {},\n    path: location.path || '/',\n    hash: location.hash || '',\n    query: location.query || {},\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery$$1),\n    matched: record ? formatMatch(record) : []\n  };\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);\n  }\n  return Object.freeze(route)\n}\n\n// the starting route that represents the initial state\nvar START = createRoute(null, {\n  path: '/'\n});\n\nfunction formatMatch (record) {\n  var res = [];\n  while (record) {\n    res.unshift(record);\n    record = record.parent;\n  }\n  return res\n}\n\nfunction getFullPath (\n  ref,\n  _stringifyQuery\n) {\n  var path = ref.path;\n  var query = ref.query; if ( query === void 0 ) query = {};\n  var hash = ref.hash; if ( hash === void 0 ) hash = '';\n\n  var stringify = _stringifyQuery || stringifyQuery;\n  return (path || '/') + stringify(query) + hash\n}\n\nfunction isSameRoute (a, b) {\n  if (b === START) {\n    return a === b\n  } else if (!b) {\n    return false\n  } else if (a.path && b.path) {\n    return (\n      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query)\n    )\n  } else if (a.name && b.name) {\n    return (\n      a.name === b.name &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query) &&\n      isObjectEqual(a.params, b.params)\n    )\n  } else {\n    return false\n  }\n}\n\nfunction isObjectEqual (a, b) {\n  if ( a === void 0 ) a = {};\n  if ( b === void 0 ) b = {};\n\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) {\n    return false\n  }\n  return aKeys.every(function (key) { return String(a[key]) === String(b[key]); })\n}\n\nfunction isIncludedRoute (current, target) {\n  return (\n    current.path.replace(trailingSlashRE, '/').indexOf(\n      target.path.replace(trailingSlashRE, '/')\n    ) === 0 &&\n    (!target.hash || current.hash === target.hash) &&\n    queryIncludes(current.query, target.query)\n  )\n}\n\nfunction queryIncludes (current, target) {\n  for (var key in target) {\n    if (!(key in current)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*  */\n\n// work around weird flow bug\nvar toTypes = [String, Object];\nvar eventTypes = [String, Array];\n\nvar Link = {\n  name: 'router-link',\n  props: {\n    to: {\n      type: toTypes,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'a'\n    },\n    exact: Boolean,\n    append: Boolean,\n    replace: Boolean,\n    activeClass: String,\n    exactActiveClass: String,\n    event: {\n      type: eventTypes,\n      default: 'click'\n    }\n  },\n  render: function render (h) {\n    var this$1 = this;\n\n    var router = this.$router;\n    var current = this.$route;\n    var ref = router.resolve(this.to, current, this.append);\n    var location = ref.location;\n    var route = ref.route;\n    var href = ref.href;\n\n    var classes = {};\n    var globalActiveClass = router.options.linkActiveClass;\n    var globalExactActiveClass = router.options.linkExactActiveClass;\n    // Support global empty active class\n    var activeClassFallback = globalActiveClass == null\n            ? 'router-link-active'\n            : globalActiveClass;\n    var exactActiveClassFallback = globalExactActiveClass == null\n            ? 'router-link-exact-active'\n            : globalExactActiveClass;\n    var activeClass = this.activeClass == null\n            ? activeClassFallback\n            : this.activeClass;\n    var exactActiveClass = this.exactActiveClass == null\n            ? exactActiveClassFallback\n            : this.exactActiveClass;\n    var compareTarget = location.path\n      ? createRoute(null, location, null, router)\n      : route;\n\n    classes[exactActiveClass] = isSameRoute(current, compareTarget);\n    classes[activeClass] = this.exact\n      ? classes[exactActiveClass]\n      : isIncludedRoute(current, compareTarget);\n\n    var handler = function (e) {\n      if (guardEvent(e)) {\n        if (this$1.replace) {\n          router.replace(location);\n        } else {\n          router.push(location);\n        }\n      }\n    };\n\n    var on = { click: guardEvent };\n    if (Array.isArray(this.event)) {\n      this.event.forEach(function (e) { on[e] = handler; });\n    } else {\n      on[this.event] = handler;\n    }\n\n    var data = {\n      class: classes\n    };\n\n    if (this.tag === 'a') {\n      data.on = on;\n      data.attrs = { href: href };\n    } else {\n      // find the first <a> child and apply listener and href\n      var a = findAnchor(this.$slots.default);\n      if (a) {\n        // in case the <a> is a static node\n        a.isStatic = false;\n        var extend = _Vue.util.extend;\n        var aData = a.data = extend({}, a.data);\n        aData.on = on;\n        var aAttrs = a.data.attrs = extend({}, a.data.attrs);\n        aAttrs.href = href;\n      } else {\n        // doesn't have <a> child, apply listener to self\n        data.on = on;\n      }\n    }\n\n    return h(this.tag, data, this.$slots.default)\n  }\n};\n\nfunction guardEvent (e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.ctrlKey || e.shiftKey) { return }\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) { return }\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) { return }\n  // don't redirect if `target=\"_blank\"`\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    var target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) { return }\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  return true\n}\n\nfunction findAnchor (children) {\n  if (children) {\n    var child;\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      if (child.tag === 'a') {\n        return child\n      }\n      if (child.children && (child = findAnchor(child.children))) {\n        return child\n      }\n    }\n  }\n}\n\nvar _Vue;\n\nfunction install (Vue) {\n  if (install.installed) { return }\n  install.installed = true;\n\n  _Vue = Vue;\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get: function get () { return this.$root._router }\n  });\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get: function get () { return this.$root._route }\n  });\n\n  var isDef = function (v) { return v !== undefined; };\n\n  var registerInstance = function (vm, callVal) {\n    var i = vm.$options._parentVnode;\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal);\n    }\n  };\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, '_route', this._router.history.current);\n      }\n      registerInstance(this, this);\n    },\n    destroyed: function destroyed () {\n      registerInstance(this);\n    }\n  });\n\n  Vue.component('router-view', View);\n  Vue.component('router-link', Link);\n\n  var strats = Vue.config.optionMergeStrategies;\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.created;\n}\n\n/*  */\n\nvar inBrowser = typeof window !== 'undefined';\n\n/*  */\n\nfunction resolvePath (\n  relative,\n  base,\n  append\n) {\n  var firstChar = relative.charAt(0);\n  if (firstChar === '/') {\n    return relative\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative\n  }\n\n  var stack = base.split('/');\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/')\n}\n\nfunction parsePath (path) {\n  var hash = '';\n  var query = '';\n\n  var hashIndex = path.indexOf('#');\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex);\n    path = path.slice(0, hashIndex);\n  }\n\n  var queryIndex = path.indexOf('?');\n  if (queryIndex >= 0) {\n    query = path.slice(queryIndex + 1);\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction cleanPath (path) {\n  return path.replace(/\\/\\//g, '/')\n}\n\nvar index$1 = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar index = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      continue\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7];\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    });\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index);\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n\n        continue\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (index$1(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (index$1(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\nindex.parse = parse_1;\nindex.compile = compile_1;\nindex.tokensToFunction = tokensToFunction_1;\nindex.tokensToRegExp = tokensToRegExp_1;\n\n/*  */\n\nvar regexpCompileCache = Object.create(null);\n\nfunction fillParams (\n  path,\n  params,\n  routeMsg\n) {\n  try {\n    var filler =\n      regexpCompileCache[path] ||\n      (regexpCompileCache[path] = index.compile(path));\n    return filler(params || {}, { pretty: true })\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(false, (\"missing param for \" + routeMsg + \": \" + (e.message)));\n    }\n    return ''\n  }\n}\n\n/*  */\n\nfunction createRouteMap (\n  routes,\n  oldPathList,\n  oldPathMap,\n  oldNameMap\n) {\n  // the path list is used to control path matching priority\n  var pathList = oldPathList || [];\n  var pathMap = oldPathMap || Object.create(null);\n  var nameMap = oldNameMap || Object.create(null);\n\n  routes.forEach(function (route) {\n    addRouteRecord(pathList, pathMap, nameMap, route);\n  });\n\n  // ensure wildcard routes are always at the end\n  for (var i = 0, l = pathList.length; i < l; i++) {\n    if (pathList[i] === '*') {\n      pathList.push(pathList.splice(i, 1)[0]);\n      l--;\n      i--;\n    }\n  }\n\n  return {\n    pathList: pathList,\n    pathMap: pathMap,\n    nameMap: nameMap\n  }\n}\n\nfunction addRouteRecord (\n  pathList,\n  pathMap,\n  nameMap,\n  route,\n  parent,\n  matchAs\n) {\n  var path = route.path;\n  var name = route.name;\n  if (process.env.NODE_ENV !== 'production') {\n    assert(path != null, \"\\\"path\\\" is required in a route configuration.\");\n    assert(\n      typeof route.component !== 'string',\n      \"route config \\\"component\\\" for path: \" + (String(path || name)) + \" cannot be a \" +\n      \"string id. Use an actual component instead.\"\n    );\n  }\n\n  var normalizedPath = normalizePath(path, parent);\n  var record = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath),\n    components: route.components || { default: route.component },\n    instances: {},\n    name: name,\n    parent: parent,\n    matchAs: matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props: route.props == null\n      ? {}\n      : route.components\n        ? route.props\n        : { default: route.props }\n  };\n\n  if (route.children) {\n    // Warn if route is named and has a default child route.\n    // If users navigate to this route by name, the default child will\n    // not be rendered (GH Issue #629)\n    if (process.env.NODE_ENV !== 'production') {\n      if (route.name && route.children.some(function (child) { return /^\\/?$/.test(child.path); })) {\n        warn(\n          false,\n          \"Named Route '\" + (route.name) + \"' has a default child route. \" +\n          \"When navigating to this named route (:to=\\\"{name: '\" + (route.name) + \"'\\\"), \" +\n          \"the default child route will not be rendered. Remove the name from \" +\n          \"this route and use the name of the default child route for named \" +\n          \"links instead.\"\n        );\n      }\n    }\n    route.children.forEach(function (child) {\n      var childMatchAs = matchAs\n        ? cleanPath((matchAs + \"/\" + (child.path)))\n        : undefined;\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\n    });\n  }\n\n  if (route.alias !== undefined) {\n    if (Array.isArray(route.alias)) {\n      route.alias.forEach(function (alias) {\n        var aliasRoute = {\n          path: alias,\n          children: route.children\n        };\n        addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path);\n      });\n    } else {\n      var aliasRoute = {\n        path: route.alias,\n        children: route.children\n      };\n      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path);\n    }\n  }\n\n  if (!pathMap[record.path]) {\n    pathList.push(record.path);\n    pathMap[record.path] = record;\n  }\n\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record;\n    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {\n      warn(\n        false,\n        \"Duplicate named routes definition: \" +\n        \"{ name: \\\"\" + name + \"\\\", path: \\\"\" + (record.path) + \"\\\" }\"\n      );\n    }\n  }\n}\n\nfunction compileRouteRegex (path) {\n  var regex = index(path);\n  if (process.env.NODE_ENV !== 'production') {\n    var keys = {};\n    regex.keys.forEach(function (key) {\n      warn(!keys[key.name], (\"Duplicate param keys in route with path: \\\"\" + path + \"\\\"\"));\n      keys[key.name] = true;\n    });\n  }\n  return regex\n}\n\nfunction normalizePath (path, parent) {\n  path = path.replace(/\\/$/, '');\n  if (path[0] === '/') { return path }\n  if (parent == null) { return path }\n  return cleanPath(((parent.path) + \"/\" + path))\n}\n\n/*  */\n\n\nfunction normalizeLocation (\n  raw,\n  current,\n  append,\n  router\n) {\n  var next = typeof raw === 'string' ? { path: raw } : raw;\n  // named target\n  if (next.name || next._normalized) {\n    return next\n  }\n\n  // relative params\n  if (!next.path && next.params && current) {\n    next = assign({}, next);\n    next._normalized = true;\n    var params = assign(assign({}, current.params), next.params);\n    if (current.name) {\n      next.name = current.name;\n      next.params = params;\n    } else if (current.matched) {\n      var rawPath = current.matched[current.matched.length - 1].path;\n      next.path = fillParams(rawPath, params, (\"path \" + (current.path)));\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn(false, \"relative params navigation requires a current route.\");\n    }\n    return next\n  }\n\n  var parsedPath = parsePath(next.path || '');\n  var basePath = (current && current.path) || '/';\n  var path = parsedPath.path\n    ? resolvePath(parsedPath.path, basePath, append || next.append)\n    : basePath;\n\n  var query = resolveQuery(\n    parsedPath.query,\n    next.query,\n    router && router.options.parseQuery\n  );\n\n  var hash = next.hash || parsedPath.hash;\n  if (hash && hash.charAt(0) !== '#') {\n    hash = \"#\" + hash;\n  }\n\n  return {\n    _normalized: true,\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction assign (a, b) {\n  for (var key in b) {\n    a[key] = b[key];\n  }\n  return a\n}\n\n/*  */\n\n\nfunction createMatcher (\n  routes,\n  router\n) {\n  var ref = createRouteMap(routes);\n  var pathList = ref.pathList;\n  var pathMap = ref.pathMap;\n  var nameMap = ref.nameMap;\n\n  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap);\n  }\n\n  function match (\n    raw,\n    currentRoute,\n    redirectedFrom\n  ) {\n    var location = normalizeLocation(raw, currentRoute, false, router);\n    var name = location.name;\n\n    if (name) {\n      var record = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        warn(record, (\"Route with name '\" + name + \"' does not exist\"));\n      }\n      var paramNames = record.regex.keys\n        .filter(function (key) { return !key.optional; })\n        .map(function (key) { return key.name; });\n\n      if (typeof location.params !== 'object') {\n        location.params = {};\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (var key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key];\n          }\n        }\n      }\n\n      if (record) {\n        location.path = fillParams(record.path, location.params, (\"named route \\\"\" + name + \"\\\"\"));\n        return _createRoute(record, location, redirectedFrom)\n      }\n    } else if (location.path) {\n      location.params = {};\n      for (var i = 0; i < pathList.length; i++) {\n        var path = pathList[i];\n        var record$1 = pathMap[path];\n        if (matchRoute(record$1.regex, location.path, location.params)) {\n          return _createRoute(record$1, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n  }\n\n  function redirect (\n    record,\n    location\n  ) {\n    var originalRedirect = record.redirect;\n    var redirect = typeof originalRedirect === 'function'\n        ? originalRedirect(createRoute(record, location, null, router))\n        : originalRedirect;\n\n    if (typeof redirect === 'string') {\n      redirect = { path: redirect };\n    }\n\n    if (!redirect || typeof redirect !== 'object') {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false, (\"invalid redirect option: \" + (JSON.stringify(redirect)))\n        );\n      }\n      return _createRoute(null, location)\n    }\n\n    var re = redirect;\n    var name = re.name;\n    var path = re.path;\n    var query = location.query;\n    var hash = location.hash;\n    var params = location.params;\n    query = re.hasOwnProperty('query') ? re.query : query;\n    hash = re.hasOwnProperty('hash') ? re.hash : hash;\n    params = re.hasOwnProperty('params') ? re.params : params;\n\n    if (name) {\n      // resolved named direct\n      var targetRecord = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        assert(targetRecord, (\"redirect failed: named route \\\"\" + name + \"\\\" not found.\"));\n      }\n      return match({\n        _normalized: true,\n        name: name,\n        query: query,\n        hash: hash,\n        params: params\n      }, undefined, location)\n    } else if (path) {\n      // 1. resolve relative redirect\n      var rawPath = resolveRecordPath(path, record);\n      // 2. resolve params\n      var resolvedPath = fillParams(rawPath, params, (\"redirect route with path \\\"\" + rawPath + \"\\\"\"));\n      // 3. rematch with existing query and hash\n      return match({\n        _normalized: true,\n        path: resolvedPath,\n        query: query,\n        hash: hash\n      }, undefined, location)\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(false, (\"invalid redirect option: \" + (JSON.stringify(redirect))));\n      }\n      return _createRoute(null, location)\n    }\n  }\n\n  function alias (\n    record,\n    location,\n    matchAs\n  ) {\n    var aliasedPath = fillParams(matchAs, location.params, (\"aliased route with path \\\"\" + matchAs + \"\\\"\"));\n    var aliasedMatch = match({\n      _normalized: true,\n      path: aliasedPath\n    });\n    if (aliasedMatch) {\n      var matched = aliasedMatch.matched;\n      var aliasedRecord = matched[matched.length - 1];\n      location.params = aliasedMatch.params;\n      return _createRoute(aliasedRecord, location)\n    }\n    return _createRoute(null, location)\n  }\n\n  function _createRoute (\n    record,\n    location,\n    redirectedFrom\n  ) {\n    if (record && record.redirect) {\n      return redirect(record, redirectedFrom || location)\n    }\n    if (record && record.matchAs) {\n      return alias(record, location, record.matchAs)\n    }\n    return createRoute(record, location, redirectedFrom, router)\n  }\n\n  return {\n    match: match,\n    addRoutes: addRoutes\n  }\n}\n\nfunction matchRoute (\n  regex,\n  path,\n  params\n) {\n  var m = path.match(regex);\n\n  if (!m) {\n    return false\n  } else if (!params) {\n    return true\n  }\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = regex.keys[i - 1];\n    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];\n    if (key) {\n      params[key.name] = val;\n    }\n  }\n\n  return true\n}\n\nfunction resolveRecordPath (path, record) {\n  return resolvePath(path, record.parent ? record.parent.path : '/', true)\n}\n\n/*  */\n\n\nvar positionStore = Object.create(null);\n\nfunction setupScroll () {\n  window.addEventListener('popstate', function (e) {\n    saveScrollPosition();\n    if (e.state && e.state.key) {\n      setStateKey(e.state.key);\n    }\n  });\n}\n\nfunction handleScroll (\n  router,\n  to,\n  from,\n  isPop\n) {\n  if (!router.app) {\n    return\n  }\n\n  var behavior = router.options.scrollBehavior;\n  if (!behavior) {\n    return\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(typeof behavior === 'function', \"scrollBehavior must be a function\");\n  }\n\n  // wait until re-render finishes before scrolling\n  router.app.$nextTick(function () {\n    var position = getScrollPosition();\n    var shouldScroll = behavior(to, from, isPop ? position : null);\n    if (!shouldScroll) {\n      return\n    }\n    var isObject = typeof shouldScroll === 'object';\n    if (isObject && typeof shouldScroll.selector === 'string') {\n      var el = document.querySelector(shouldScroll.selector);\n      if (el) {\n        position = getElementPosition(el);\n      } else if (isValidPosition(shouldScroll)) {\n        position = normalizePosition(shouldScroll);\n      }\n    } else if (isObject && isValidPosition(shouldScroll)) {\n      position = normalizePosition(shouldScroll);\n    }\n\n    if (position) {\n      window.scrollTo(position.x, position.y);\n    }\n  });\n}\n\nfunction saveScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    positionStore[key] = {\n      x: window.pageXOffset,\n      y: window.pageYOffset\n    };\n  }\n}\n\nfunction getScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    return positionStore[key]\n  }\n}\n\nfunction getElementPosition (el) {\n  var docEl = document.documentElement;\n  var docRect = docEl.getBoundingClientRect();\n  var elRect = el.getBoundingClientRect();\n  return {\n    x: elRect.left - docRect.left,\n    y: elRect.top - docRect.top\n  }\n}\n\nfunction isValidPosition (obj) {\n  return isNumber(obj.x) || isNumber(obj.y)\n}\n\nfunction normalizePosition (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\n  }\n}\n\nfunction isNumber (v) {\n  return typeof v === 'number'\n}\n\n/*  */\n\nvar supportsPushState = inBrowser && (function () {\n  var ua = window.navigator.userAgent;\n\n  if (\n    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&\n    ua.indexOf('Mobile Safari') !== -1 &&\n    ua.indexOf('Chrome') === -1 &&\n    ua.indexOf('Windows Phone') === -1\n  ) {\n    return false\n  }\n\n  return window.history && 'pushState' in window.history\n})();\n\n// use User Timing api (if present) for more accurate key precision\nvar Time = inBrowser && window.performance && window.performance.now\n  ? window.performance\n  : Date;\n\nvar _key = genKey();\n\nfunction genKey () {\n  return Time.now().toFixed(3)\n}\n\nfunction getStateKey () {\n  return _key\n}\n\nfunction setStateKey (key) {\n  _key = key;\n}\n\nfunction pushState (url, replace) {\n  saveScrollPosition();\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  var history = window.history;\n  try {\n    if (replace) {\n      history.replaceState({ key: _key }, '', url);\n    } else {\n      _key = genKey();\n      history.pushState({ key: _key }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\n\nfunction replaceState (url) {\n  pushState(url, true);\n}\n\n/*  */\n\nfunction runQueue (queue, fn, cb) {\n  var step = function (index) {\n    if (index >= queue.length) {\n      cb();\n    } else {\n      if (queue[index]) {\n        fn(queue[index], function () {\n          step(index + 1);\n        });\n      } else {\n        step(index + 1);\n      }\n    }\n  };\n  step(0);\n}\n\n/*  */\n\nvar History = function History (router, base) {\n  this.router = router;\n  this.base = normalizeBase(base);\n  // start with a route object that stands for \"nowhere\"\n  this.current = START;\n  this.pending = null;\n  this.ready = false;\n  this.readyCbs = [];\n  this.readyErrorCbs = [];\n  this.errorCbs = [];\n};\n\nHistory.prototype.listen = function listen (cb) {\n  this.cb = cb;\n};\n\nHistory.prototype.onReady = function onReady (cb, errorCb) {\n  if (this.ready) {\n    cb();\n  } else {\n    this.readyCbs.push(cb);\n    if (errorCb) {\n      this.readyErrorCbs.push(errorCb);\n    }\n  }\n};\n\nHistory.prototype.onError = function onError (errorCb) {\n  this.errorCbs.push(errorCb);\n};\n\nHistory.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {\n    var this$1 = this;\n\n  var route = this.router.match(location, this.current);\n  this.confirmTransition(route, function () {\n    this$1.updateRoute(route);\n    onComplete && onComplete(route);\n    this$1.ensureURL();\n\n    // fire ready cbs once\n    if (!this$1.ready) {\n      this$1.ready = true;\n      this$1.readyCbs.forEach(function (cb) { cb(route); });\n    }\n  }, function (err) {\n    if (onAbort) {\n      onAbort(err);\n    }\n    if (err && !this$1.ready) {\n      this$1.ready = true;\n      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });\n    }\n  });\n};\n\nHistory.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {\n    var this$1 = this;\n\n  var current = this.current;\n  var abort = function (err) {\n    if (isError(err)) {\n      if (this$1.errorCbs.length) {\n        this$1.errorCbs.forEach(function (cb) { cb(err); });\n      } else {\n        warn(false, 'uncaught error during route navigation:');\n        console.error(err);\n      }\n    }\n    onAbort && onAbort(err);\n  };\n  if (\n    isSameRoute(route, current) &&\n    // in the case the route map has been dynamically appended to\n    route.matched.length === current.matched.length\n  ) {\n    this.ensureURL();\n    return abort()\n  }\n\n  var ref = resolveQueue(this.current.matched, route.matched);\n    var updated = ref.updated;\n    var deactivated = ref.deactivated;\n    var activated = ref.activated;\n\n  var queue = [].concat(\n    // in-component leave guards\n    extractLeaveGuards(deactivated),\n    // global before hooks\n    this.router.beforeHooks,\n    // in-component update hooks\n    extractUpdateHooks(updated),\n    // in-config enter guards\n    activated.map(function (m) { return m.beforeEnter; }),\n    // async components\n    resolveAsyncComponents(activated)\n  );\n\n  this.pending = route;\n  var iterator = function (hook, next) {\n    if (this$1.pending !== route) {\n      return abort()\n    }\n    try {\n      hook(route, current, function (to) {\n        if (to === false || isError(to)) {\n          // next(false) -> abort navigation, ensure current URL\n          this$1.ensureURL(true);\n          abort(to);\n        } else if (\n          typeof to === 'string' ||\n          (typeof to === 'object' && (\n            typeof to.path === 'string' ||\n            typeof to.name === 'string'\n          ))\n        ) {\n          // next('/') or next({ path: '/' }) -> redirect\n          abort();\n          if (typeof to === 'object' && to.replace) {\n            this$1.replace(to);\n          } else {\n            this$1.push(to);\n          }\n        } else {\n          // confirm transition and pass on the value\n          next(to);\n        }\n      });\n    } catch (e) {\n      abort(e);\n    }\n  };\n\n  runQueue(queue, iterator, function () {\n    var postEnterCbs = [];\n    var isValid = function () { return this$1.current === route; };\n    // wait until async components are resolved before\n    // extracting in-component enter guards\n    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);\n    var queue = enterGuards.concat(this$1.router.resolveHooks);\n    runQueue(queue, iterator, function () {\n      if (this$1.pending !== route) {\n        return abort()\n      }\n      this$1.pending = null;\n      onComplete(route);\n      if (this$1.router.app) {\n        this$1.router.app.$nextTick(function () {\n          postEnterCbs.forEach(function (cb) { cb(); });\n        });\n      }\n    });\n  });\n};\n\nHistory.prototype.updateRoute = function updateRoute (route) {\n  var prev = this.current;\n  this.current = route;\n  this.cb && this.cb(route);\n  this.router.afterHooks.forEach(function (hook) {\n    hook && hook(route, prev);\n  });\n};\n\nfunction normalizeBase (base) {\n  if (!base) {\n    if (inBrowser) {\n      // respect <base> tag\n      var baseEl = document.querySelector('base');\n      base = (baseEl && baseEl.getAttribute('href')) || '/';\n    } else {\n      base = '/';\n    }\n  }\n  // make sure there's the starting slash\n  if (base.charAt(0) !== '/') {\n    base = '/' + base;\n  }\n  // remove trailing slash\n  return base.replace(/\\/$/, '')\n}\n\nfunction resolveQueue (\n  current,\n  next\n) {\n  var i;\n  var max = Math.max(current.length, next.length);\n  for (i = 0; i < max; i++) {\n    if (current[i] !== next[i]) {\n      break\n    }\n  }\n  return {\n    updated: next.slice(0, i),\n    activated: next.slice(i),\n    deactivated: current.slice(i)\n  }\n}\n\nfunction extractGuards (\n  records,\n  name,\n  bind,\n  reverse\n) {\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\n    var guard = extractGuard(def, name);\n    if (guard) {\n      return Array.isArray(guard)\n        ? guard.map(function (guard) { return bind(guard, instance, match, key); })\n        : bind(guard, instance, match, key)\n    }\n  });\n  return flatten(reverse ? guards.reverse() : guards)\n}\n\nfunction extractGuard (\n  def,\n  key\n) {\n  if (typeof def !== 'function') {\n    // extend now so that global mixins are applied.\n    def = _Vue.extend(def);\n  }\n  return def.options[key]\n}\n\nfunction extractLeaveGuards (deactivated) {\n  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)\n}\n\nfunction extractUpdateHooks (updated) {\n  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)\n}\n\nfunction bindGuard (guard, instance) {\n  if (instance) {\n    return function boundRouteGuard () {\n      return guard.apply(instance, arguments)\n    }\n  }\n}\n\nfunction extractEnterGuards (\n  activated,\n  cbs,\n  isValid\n) {\n  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {\n    return bindEnterGuard(guard, match, key, cbs, isValid)\n  })\n}\n\nfunction bindEnterGuard (\n  guard,\n  match,\n  key,\n  cbs,\n  isValid\n) {\n  return function routeEnterGuard (to, from, next) {\n    return guard(to, from, function (cb) {\n      next(cb);\n      if (typeof cb === 'function') {\n        cbs.push(function () {\n          // #750\n          // if a router-view is wrapped with an out-in transition,\n          // the instance may not have been registered at this time.\n          // we will need to poll for registration until current route\n          // is no longer valid.\n          poll(cb, match.instances, key, isValid);\n        });\n      }\n    })\n  }\n}\n\nfunction poll (\n  cb, // somehow flow cannot infer this is a function\n  instances,\n  key,\n  isValid\n) {\n  if (instances[key]) {\n    cb(instances[key]);\n  } else if (isValid()) {\n    setTimeout(function () {\n      poll(cb, instances, key, isValid);\n    }, 16);\n  }\n}\n\nfunction resolveAsyncComponents (matched) {\n  return function (to, from, next) {\n    var hasAsync = false;\n    var pending = 0;\n    var error = null;\n\n    flatMapComponents(matched, function (def, _, match, key) {\n      // if it's a function and doesn't have cid attached,\n      // assume it's an async component resolve function.\n      // we are not using Vue's default async resolving mechanism because\n      // we want to halt the navigation until the incoming component has been\n      // resolved.\n      if (typeof def === 'function' && def.cid === undefined) {\n        hasAsync = true;\n        pending++;\n\n        var resolve = once(function (resolvedDef) {\n          // save resolved on async factory in case it's used elsewhere\n          def.resolved = typeof resolvedDef === 'function'\n            ? resolvedDef\n            : _Vue.extend(resolvedDef);\n          match.components[key] = resolvedDef;\n          pending--;\n          if (pending <= 0) {\n            next();\n          }\n        });\n\n        var reject = once(function (reason) {\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\n          process.env.NODE_ENV !== 'production' && warn(false, msg);\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg);\n            next(error);\n          }\n        });\n\n        var res;\n        try {\n          res = def(resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n        if (res) {\n          if (typeof res.then === 'function') {\n            res.then(resolve, reject);\n          } else {\n            // new syntax in Vue 2.3\n            var comp = res.component;\n            if (comp && typeof comp.then === 'function') {\n              comp.then(resolve, reject);\n            }\n          }\n        }\n      }\n    });\n\n    if (!hasAsync) { next(); }\n  }\n}\n\nfunction flatMapComponents (\n  matched,\n  fn\n) {\n  return flatten(matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) { return fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ); })\n  }))\n}\n\nfunction flatten (arr) {\n  return Array.prototype.concat.apply([], arr)\n}\n\n// in Webpack 2, require.ensure now also returns a Promise\n// so the resolve/reject functions may get called an extra time\n// if the user uses an arrow function shorthand that happens to\n// return that Promise.\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (called) { return }\n    called = true;\n    return fn.apply(this, arguments)\n  }\n}\n\nfunction isError (err) {\n  return Object.prototype.toString.call(err).indexOf('Error') > -1\n}\n\n/*  */\n\n\nvar HTML5History = (function (History$$1) {\n  function HTML5History (router, base) {\n    var this$1 = this;\n\n    History$$1.call(this, router, base);\n\n    var expectScroll = router.options.scrollBehavior;\n\n    if (expectScroll) {\n      setupScroll();\n    }\n\n    window.addEventListener('popstate', function (e) {\n      this$1.transitionTo(getLocation(this$1.base), function (route) {\n        if (expectScroll) {\n          handleScroll(router, route, this$1.current, true);\n        }\n      });\n    });\n  }\n\n  if ( History$$1 ) HTML5History.__proto__ = History$$1;\n  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );\n  HTML5History.prototype.constructor = HTML5History;\n\n  HTML5History.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HTML5History.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.ensureURL = function ensureURL (push) {\n    if (getLocation(this.base) !== this.current.fullPath) {\n      var current = cleanPath(this.base + this.current.fullPath);\n      push ? pushState(current) : replaceState(current);\n    }\n  };\n\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getLocation(this.base)\n  };\n\n  return HTML5History;\n}(History));\n\nfunction getLocation (base) {\n  var path = window.location.pathname;\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length);\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n/*  */\n\n\nvar HashHistory = (function (History$$1) {\n  function HashHistory (router, base, fallback) {\n    History$$1.call(this, router, base);\n    // check history fallback deeplinking\n    if (fallback && checkFallback(this.base)) {\n      return\n    }\n    ensureSlash();\n  }\n\n  if ( History$$1 ) HashHistory.__proto__ = History$$1;\n  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  HashHistory.prototype.constructor = HashHistory;\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  HashHistory.prototype.setupListeners = function setupListeners () {\n    var this$1 = this;\n\n    window.addEventListener('hashchange', function () {\n      if (!ensureSlash()) {\n        return\n      }\n      this$1.transitionTo(getHash(), function (route) {\n        replaceHash(route.fullPath);\n      });\n    });\n  };\n\n  HashHistory.prototype.push = function push (location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      pushHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      replaceHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HashHistory.prototype.ensureURL = function ensureURL (push) {\n    var current = this.current.fullPath;\n    if (getHash() !== current) {\n      push ? pushHash(current) : replaceHash(current);\n    }\n  };\n\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getHash()\n  };\n\n  return HashHistory;\n}(History));\n\nfunction checkFallback (base) {\n  var location = getLocation(base);\n  if (!/^\\/#/.test(location)) {\n    window.location.replace(\n      cleanPath(base + '/#' + location)\n    );\n    return true\n  }\n}\n\nfunction ensureSlash () {\n  var path = getHash();\n  if (path.charAt(0) === '/') {\n    return true\n  }\n  replaceHash('/' + path);\n  return false\n}\n\nfunction getHash () {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var index = href.indexOf('#');\n  return index === -1 ? '' : href.slice(index + 1)\n}\n\nfunction pushHash (path) {\n  window.location.hash = path;\n}\n\nfunction replaceHash (path) {\n  var i = window.location.href.indexOf('#');\n  window.location.replace(\n    window.location.href.slice(0, i >= 0 ? i : 0) + '#' + path\n  );\n}\n\n/*  */\n\n\nvar AbstractHistory = (function (History$$1) {\n  function AbstractHistory (router, base) {\n    History$$1.call(this, router, base);\n    this.stack = [];\n    this.index = -1;\n  }\n\n  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;\n  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  AbstractHistory.prototype.constructor = AbstractHistory;\n\n  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);\n      this$1.index++;\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.go = function go (n) {\n    var this$1 = this;\n\n    var targetIndex = this.index + n;\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\n      return\n    }\n    var route = this.stack[targetIndex];\n    this.confirmTransition(route, function () {\n      this$1.index = targetIndex;\n      this$1.updateRoute(route);\n    });\n  };\n\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    var current = this.stack[this.stack.length - 1];\n    return current ? current.fullPath : '/'\n  };\n\n  AbstractHistory.prototype.ensureURL = function ensureURL () {\n    // noop\n  };\n\n  return AbstractHistory;\n}(History));\n\n/*  */\n\nvar VueRouter = function VueRouter (options) {\n  if ( options === void 0 ) options = {};\n\n  this.app = null;\n  this.apps = [];\n  this.options = options;\n  this.beforeHooks = [];\n  this.resolveHooks = [];\n  this.afterHooks = [];\n  this.matcher = createMatcher(options.routes || [], this);\n\n  var mode = options.mode || 'hash';\n  this.fallback = mode === 'history' && !supportsPushState;\n  if (this.fallback) {\n    mode = 'hash';\n  }\n  if (!inBrowser) {\n    mode = 'abstract';\n  }\n  this.mode = mode;\n\n  switch (mode) {\n    case 'history':\n      this.history = new HTML5History(this, options.base);\n      break\n    case 'hash':\n      this.history = new HashHistory(this, options.base, this.fallback);\n      break\n    case 'abstract':\n      this.history = new AbstractHistory(this, options.base);\n      break\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        assert(false, (\"invalid mode: \" + mode));\n      }\n  }\n};\n\nvar prototypeAccessors = { currentRoute: {} };\n\nVueRouter.prototype.match = function match (\n  raw,\n  current,\n  redirectedFrom\n) {\n  return this.matcher.match(raw, current, redirectedFrom)\n};\n\nprototypeAccessors.currentRoute.get = function () {\n  return this.history && this.history.current\n};\n\nVueRouter.prototype.init = function init (app /* Vue component instance */) {\n    var this$1 = this;\n\n  process.env.NODE_ENV !== 'production' && assert(\n    install.installed,\n    \"not installed. Make sure to call `Vue.use(VueRouter)` \" +\n    \"before creating root instance.\"\n  );\n\n  this.apps.push(app);\n\n  // main app already initialized.\n  if (this.app) {\n    return\n  }\n\n  this.app = app;\n\n  var history = this.history;\n\n  if (history instanceof HTML5History) {\n    history.transitionTo(history.getCurrentLocation());\n  } else if (history instanceof HashHistory) {\n    var setupHashListener = function () {\n      history.setupListeners();\n    };\n    history.transitionTo(\n      history.getCurrentLocation(),\n      setupHashListener,\n      setupHashListener\n    );\n  }\n\n  history.listen(function (route) {\n    this$1.apps.forEach(function (app) {\n      app._route = route;\n    });\n  });\n};\n\nVueRouter.prototype.beforeEach = function beforeEach (fn) {\n  return registerHook(this.beforeHooks, fn)\n};\n\nVueRouter.prototype.beforeResolve = function beforeResolve (fn) {\n  return registerHook(this.resolveHooks, fn)\n};\n\nVueRouter.prototype.afterEach = function afterEach (fn) {\n  return registerHook(this.afterHooks, fn)\n};\n\nVueRouter.prototype.onReady = function onReady (cb, errorCb) {\n  this.history.onReady(cb, errorCb);\n};\n\nVueRouter.prototype.onError = function onError (errorCb) {\n  this.history.onError(errorCb);\n};\n\nVueRouter.prototype.push = function push (location, onComplete, onAbort) {\n  this.history.push(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.replace = function replace (location, onComplete, onAbort) {\n  this.history.replace(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.go = function go (n) {\n  this.history.go(n);\n};\n\nVueRouter.prototype.back = function back () {\n  this.go(-1);\n};\n\nVueRouter.prototype.forward = function forward () {\n  this.go(1);\n};\n\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {\n  var route = to\n    ? to.matched\n      ? to\n      : this.resolve(to).route\n    : this.currentRoute;\n  if (!route) {\n    return []\n  }\n  return [].concat.apply([], route.matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) {\n      return m.components[key]\n    })\n  }))\n};\n\nVueRouter.prototype.resolve = function resolve (\n  to,\n  current,\n  append\n) {\n  var location = normalizeLocation(\n    to,\n    current || this.history.current,\n    append,\n    this\n  );\n  var route = this.match(location, current);\n  var fullPath = route.redirectedFrom || route.fullPath;\n  var base = this.history.base;\n  var href = createHref(base, fullPath, this.mode);\n  return {\n    location: location,\n    route: route,\n    href: href,\n    // for backwards compat\n    normalizedTo: location,\n    resolved: route\n  }\n};\n\nVueRouter.prototype.addRoutes = function addRoutes (routes) {\n  this.matcher.addRoutes(routes);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nObject.defineProperties( VueRouter.prototype, prototypeAccessors );\n\nfunction registerHook (list, fn) {\n  list.push(fn);\n  return function () {\n    var i = list.indexOf(fn);\n    if (i > -1) { list.splice(i, 1); }\n  }\n}\n\nfunction createHref (base, fullPath, mode) {\n  var path = mode === 'hash' ? '#' + fullPath : fullPath;\n  return base ? cleanPath(base + '/' + path) : path\n}\n\nVueRouter.install = install;\nVueRouter.version = '2.5.3';\n\nif (inBrowser && window.Vue) {\n  window.Vue.use(VueRouter);\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (VueRouter);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(4)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(1);\nvar bind = __webpack_require__(9);\nvar Axios = __webpack_require__(28);\nvar defaults = __webpack_require__(3);\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(utils.merge(defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(6);\naxios.CancelToken = __webpack_require__(27);\naxios.isCancel = __webpack_require__(7);\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(42);\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9heGlvcy5qcz8wNjFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2F4aW9zLmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Cancel = __webpack_require__(6);\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanM/NDc2NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar defaults = __webpack_require__(3);\nvar utils = __webpack_require__(1);\nvar InterceptorManager = __webpack_require__(29);\nvar dispatchRequest = __webpack_require__(30);\nvar isAbsoluteURL = __webpack_require__(38);\nvar combineURLs = __webpack_require__(36);\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0]\n    }, arguments[1]);\n  }\n\n  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);\n  config.method = config.method.toLowerCase();\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzPzQ4M2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQSxpREFBaUQsZ0JBQWdCO0FBQ2pFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHRoaXMuZGVmYXVsdHMsIHsgbWV0aG9kOiAnZ2V0JyB9LCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcbiAgaWYgKGNvbmZpZy5iYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKGNvbmZpZy51cmwpKSB7XG4gICAgY29uZmlnLnVybCA9IGNvbWJpbmVVUkxzKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzXG4vLyBtb2R1bGUgaWQgPSAyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(1);\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcz81ODkyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(1);\nvar transformData = __webpack_require__(33);\nvar isCancel = __webpack_require__(7);\nvar defaults = __webpack_require__(3);\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcz85MWJjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtCQUErQjtBQUMvQix1Q0FBdUM7QUFDdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0giLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n  error.request = request;\n  error.response = response;\n  return error;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcz8yODhjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar createError = __webpack_require__(8);\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  // Note: status is not exposed by XDomainRequest\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcz8xOTlmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(1);\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanM/MGVhNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekIsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsZUFBZTtBQUMxQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction E() {\n  this.message = 'String contains an invalid character';\n}\nE.prototype = new Error;\nE.prototype.code = 5;\nE.prototype.name = 'InvalidCharacterError';\n\nfunction btoa(input) {\n  var str = String(input);\n  var output = '';\n  for (\n    // initialize result and counter\n    var block, charCode, idx = 0, map = chars;\n    // if the next str index does not exist:\n    //   change the mapping table to \"=\"\n    //   check if d has no fractional digits\n    str.charAt(idx | 0) || (map = '=', idx % 1);\n    // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n    output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n  ) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n    block = block << 8 | charCode;\n  }\n  return output;\n}\n\nmodule.exports = btoa;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanM/N2Q0NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjM0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBidG9hIHBvbHlmaWxsIGZvciBJRTwxMCBjb3VydGVzeSBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcblxudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuZnVuY3Rpb24gRSgpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ1N0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3Rlcic7XG59XG5FLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbkUucHJvdG90eXBlLmNvZGUgPSA1O1xuRS5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG5mdW5jdGlvbiBidG9hKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIGZvciAoXG4gICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcbiAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICApIHtcbiAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzIC8gNCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgdGhyb3cgbmV3IEUoKTtcbiAgICB9XG4gICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidG9hO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanNcbi8vIG1vZHVsZSBpZCA9IDM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(1);\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      }\n\n      if (!utils.isArray(val)) {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzPzlhNmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH1cblxuICAgICAgaWYgKCF1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzXG4vLyBtb2R1bGUgaWQgPSAzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzPzdlYjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(1);\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        var cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })()\n);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanM/MDQ1MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDO0FBQ3hDLE9BQU87O0FBRVA7QUFDQSwwREFBMEQsd0JBQXdCO0FBQ2xGO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLDZCQUE2QixhQUFhLEVBQUU7QUFDNUM7QUFDQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiIzNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qc1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanM/MzgwOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(1);\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    var msie = /(msie|trident)/i.test(navigator.userAgent);\n    var urlParsingNode = document.createElement('a');\n    var originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      var href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n                  urlParsingNode.pathname :\n                  '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })()\n);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcz8xNDJkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6IjM5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(1);\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanM/NDBiMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qc1xuLy8gbW9kdWxlIGlkID0gNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(1);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcz8xNWNhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLGVBQWU7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsImZpbGUiOiI0MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanNcbi8vIG1vZHVsZSBpZCA9IDQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcz8zYzQxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qc1xuLy8gbW9kdWxlIGlkID0gNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\t\t\t\tdata() {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\tloading: false\n\t\t\t\t\t\t\t\t};\n\t\t\t\t}\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vTWFpbkFwcC52dWU/ZmJiMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQTtBQUNBO1dBRUE7O3FCQUdBO0FBRkE7QUFHQTtBQUxBIiwiZmlsZSI6IjQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuXHQ8ZGl2IGlkPVwibWFlc3Ryby1hcHBcIj5cblx0XHQ8dGVtcGxhdGUgdi1pZj1cIiFsb2FkaW5nXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29udGFpbmVyLWZsdWlkXCI+XG5cdFx0XHQgIFx0PGRpdiBjbGFzcz1cInJvd1wiPlxuXHRcdFx0ICBcdFx0PGRpdiBjbGFzcz1cImNvbC1zbS0xMlwiPlxuXHRcdFx0ICBcdFx0XHQ8ZGl2IGNsYXNzPVwiY29udGFpbmVyLWZsdWlkXCI+XG5cdFx0XHQgIFx0XHRcdFx0PGRpdiBjbGFzcz1cInJvdy1mbHVpZCBtYWluXCI+XG5cdFx0XHRcdFx0XHQgIFx0XHQ8cm91dGVyLXZpZXc+PC9yb3V0ZXItdmlldz5cblx0XHRcdCAgXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdCAgXHRcdFx0PC9kaXY+XG5cdFx0XHQgIFx0XHQ8L2Rpdj5cblx0XHRcdCAgXHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdDwvdGVtcGxhdGU+XG5cdFx0PHRlbXBsYXRlIHYtZWxzZT5cblx0XHRcdDxsb2FkaW5nLXNwaW5uZXI+PC9sb2FkaW5nLXNwaW5uZXI+XG5cdFx0PC90ZW1wbGF0ZT5cblx0PC9kaXY+XG48L3RlbXBsYXRlPlxuXG5cbjxzY3JpcHQ+XG5pbXBvcnQgQXhpb3MgZnJvbSAnYXhpb3MnXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSAoKSB7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgXHRsb2FkaW5nOiBmYWxzZVxuXHQgICAgfVxuXHR9XG59XG48L3NjcmlwdD5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gTWFpbkFwcC52dWU/YTIwNjA3NzIiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuedraggable__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuedraggable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vuedraggable__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  components: {\n    draggable: __WEBPACK_IMPORTED_MODULE_1_vuedraggable___default.a\n  },\n  data() {\n    return {\n      title: 'PlaySearch',\n      webLink: null,\n      gameStatus: 'draft',\n      loading: false,\n      error: null,\n      gameType: 'minigame',\n      minigameList: [],\n      minigameOptions: [],\n      unusedMinigameList: [],\n      imageData: {\n        menuButton: {\n          name: 'menuButton',\n          layer: 5,\n          activeUrl: null,\n          rawUrl: null,\n          dataUrl: null,\n          height: 216,\n          width: 216,\n          tile: false,\n          alpha: true\n        }\n      },\n      cropImageKey: null,\n      multiKey: -1,\n      drag: false,\n      formSubmitted: false,\n      saveText: 'Save Game',\n      createMinigame: false,\n      isDirty: false,\n      deleteTitle: '',\n      deleteID: null,\n      deleteArrayKey: null,\n      deleteArray: null,\n      selectedMinigame: false,\n      saveBeforeEditingPrompt: false,\n      hasTitleScreen: false\n    };\n  },\n  computed: {\n    filteredTitle() {\n      return this.title != '' ? this.title : '(untitled)';\n    },\n    dragOptions() {\n      return {\n        animation: 0,\n        group: 'description',\n        disabled: !this.editable,\n        ghostClass: 'ghost'\n      };\n    },\n    dialogMessage() {\n      return \"Are you sure you want to delete \" + this.deleteTitle + \"?\";\n    },\n    saveDialogMessage() {\n      return \"Save changes to \" + this.title + \" before editing the minigame?\";\n    }\n  },\n  watch: {\n    isDragging(newValue) {\n      if (newValue) {\n        this.delayedDragging = true;\n        return;\n      }\n      this.$nextTick(() => {\n        this.delayedDragging = false;\n      });\n    }\n  },\n  mounted() {\n    var self = this;\n    this.$nextTick(function () {\n      window.addEventListener(\"beforeunload\", self.checkChanges);\n    });\n  },\n  beforeDestroy() {\n    var self = this;\n    window.removeEventListener('beforeunload', self.checkChanges);\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    getImage(key, multiKey) {\n      var multiKey = typeof multiKey !== 'undefined' ? multiKey : -1;\n      var dataSource;\n      if (multiKey > -1) {\n        dataSource = this.imageData[key]['group'][multiKey];\n      } else {\n        dataSource = this.imageData[key];\n      }\n      if (dataSource.activeUrl) {\n        /* Token prevents browser caching on changed images. */\n        return dataSource.activeUrl + '?token=' + Math.floor(Math.random() * 2000);\n      } else if (dataSource.dataUrl) {\n        return dataSource.dataUrl;\n      }\n      return false;\n    },\n    mediaUploader(component, multiKey) {\n      var multiKey = typeof multiKey !== 'undefined' ? multiKey : -1;\n      var self = this;\n      this.cropperTag = component;\n      // wp.media.model.settings.post.id = self.$route.params.mid;\n      var media_uploader = wp.media({\n        title: 'Select Artwork',\n        button: {\n          text: 'Use This Artwork'\n        },\n        library: {\n          type: 'image'\n          //HERE IS THE MAGIC. Set your own post ID var\n          //         uploadedTo : wp.media.model.settings.post.id\n        },\n        frame: \"post\",\n        state: \"insert\",\n        multiple: false\n      });\n      media_uploader.on(\"insert\", function () {\n        var json = media_uploader.state().get(\"selection\").first().toJSON();\n\n        self.imageData[component].rawUrl = json.url;\n        if (multiKey > -1) {\n          self.multiKey = multiKey;\n        }\n        self.cropImageKey = component;\n      });\n\n      media_uploader.open();\n    },\n    removeImage(key, multiKey) {\n      var multiKey = typeof multiKey !== 'undefined' ? multiKey : -1;\n      if (multiKey > -1) {\n        if (this.imageData[key]['group'].length < 2) {\n          this.imageData[key]['group'] = [];\n        } else {\n          this.imageData[key]['group'].splice(multiKey, 1);\n        }\n      } else {\n        this.imageData[key].dataUrl = null;\n        this.imageData[key].activeUrl = null;\n      }\n    },\n    checkChanges(e) {\n      if (this.formSubmitted || !this.isDirty) {\n        return undefined;\n      }\n\n      var confirmationMessage = 'It looks like you have been editing something. ' + 'If you leave before saving, your changes will be lost.';\n\n      (e || window.event).returnValue = confirmationMessage; //Gecko + IE\n      return confirmationMessage; //Gecko + Webkit, Safari, Chrome etc.\n    },\n    addMinigame(data) {\n      console.log(data);\n      this.createMinigame = false;\n      this.unusedMinigameList.push(data);\n    },\n    editMinigame() {\n      if (this.isDirty) {\n        console.log('wait');\n        this.saveBeforeEditingPrompt = true;\n        return;\n      }\n      this.$router.push({ name: 'single-minigame', params: { id: this.$route.params.id, mid: this.selectedMinigame } });\n    },\n    deleteMinigame() {\n      var self = this;\n      //self.loading = true;\n      /* This dismisses the dialog box. */\n      self.deleteTitle = null;\n      __WEBPACK_IMPORTED_MODULE_0_axios___default.a.post('/wp-json/maestro-game-builder/v1/game/' + this.$route.params.id + '/minigame/' + self.deleteID + '/delete').then(function (response) {\n        console.log(response);\n        if (response.data.deleted === true) {\n          /* Refresh the game list. */\n          if (self.deleteArray == 'used') {\n            self.minigameList.splice(self.deleteArrayKey, 1);\n          } else {\n            self.unusedMinigameList.splice(self.deleteArrayKey, 1);\n          }\n          self.deleteID = null;\n          self.deleteArrayKey = null;\n          self.deleteArray = null;\n          // self.loading = false;\n        } else {\n            // self.loading = false;\n          }\n      }).catch(function (error) {\n        //self.loading = false;\n        console.log(error);\n      });\n    },\n    validateBeforeSubmit() {\n      var self = this;\n      self.error = null;\n      // Validate All returns a promise and provides the validation result.\n      this.$validator.validateAll().then(success => {\n        if (!success) {\n          // handle error\n          if (self.saveBeforeEditingPrompt) {\n            self.saveBeforeEditingPrompt = false;\n          }\n          return;\n        }\n        self.formSubmitted = true;\n        __WEBPACK_IMPORTED_MODULE_0_axios___default.a.post('/wp-json/maestro-game-builder/v1/game/save/' + this.$route.params.id, {\n          title: document.getElementById('gametitle').value,\n          type: document.getElementById('gametype').value,\n          status: document.getElementById('gamestatus').value,\n          minigame_order: self.minigameList,\n          imageData: self.imageData\n        }).then(function (response) {\n          console.log(response);\n          if (response.data.saved === true) {\n            if (typeof response.data.link !== 'undefined') {\n              self.webLink = response.data.link;\n            }\n            if (self.selectedMinigame) {\n              self.isDirty = false;\n              self.editMinigame();\n            }\n            // self.$router.push({ name: 'single-game', params: { id: response.data.id }});\n          }\n          self.saveText = 'Saved!';\n          setTimeout(function () {\n            self.saveText = 'Save Game';\n          }, 2000);\n\n          self.formSubmitted = false;\n          self.isDirty = false;\n        }).catch(function (error) {\n          self.formSubmitted = false;\n          console.log(error);\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    fetchData() {\n      var self = this;\n      self.loading = true;\n      __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get('/wp-json/maestro-game-builder/v1/games/' + this.$route.params.id).then(function (response) {\n        /* What we know. */\n        self.title = response.data.post_title;\n        self.webLink = response.data.guid;\n        self.gameStatus = response.data.post_status;\n        if (typeof response.data.custom.type !== 'undefined') {\n          self.gameType = response.data.custom.type;\n        }\n        if (typeof response.data.minigames !== 'undefined') {\n          /* Should always be defined if there is a minigame order. */\n          self.unusedMinigameList = [];\n          response.data.minigames.forEach(function (createdMinigame) {\n            var active = false;\n            if (typeof response.data.custom.minigame_order !== 'undefined') {\n              for (var i = 0; i < response.data.custom.minigame_order.length; i++) {\n                if (createdMinigame.id == response.data.custom.minigame_order[i].id) {\n                  active = true;\n                  /* Update the minigame title just in case. */\n                  response.data.custom.minigame_order[i].title = createdMinigame.title;\n                  response.data.custom.minigame_order[i].type = createdMinigame.type;\n                }\n                if (response.data.minigameIDs.indexOf(response.data.custom.minigame_order[i].id) < 0) {\n                  /* Game was deleted. Remove from array. */\n                  response.data.custom.minigame_order.splice(i, 1);\n                }\n              }\n            }\n            if (!active) {\n              self.unusedMinigameList.push(createdMinigame);\n            }\n          });\n        }\n        /* ordering */\n        if (typeof response.data.custom.minigame_order !== 'undefined') {\n          self.minigameList = response.data.custom.minigame_order;\n        } else {\n          self.minigameList = [];\n        }\n        /* A list of all current available minigames. */\n        if (typeof response.data.minigameOptions !== 'undefined') {\n          self.minigameOptions = response.data.minigameOptions;\n        }\n        console.log(response.data);\n        /* Menu Button */\n        if (typeof response.data.custom.game_data !== 'undefined' && typeof response.data.custom.game_data.imageData !== 'undefined') {\n          for (var p in response.data.custom.game_data.imageData) {\n            if (response.data.custom.game_data.imageData.hasOwnProperty(p)) {\n              self.imageData[p].activeUrl = response.data.custom.game_data.imageData[p].url;\n            }\n          }\n        }\n\n        self.loading = false;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data() {\n    return {\n      title: 'Main',\n      loading: false,\n      error: null,\n      hasGames: false,\n      games: [],\n      newGameTitle: null,\n      formSubmitted: false,\n      deleteID: null,\n      deleteTitle: null,\n      create: false\n    };\n  },\n  computed: {\n    dialogMessage() {\n      return \"Are you sure you want to delete \" + this.deleteTitle + \"?\";\n    }\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    fetchData() {\n      var self = this;\n      self.games = [];\n      self.hasGames = false;\n      self.loading = true;\n      __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get('/wp-json/maestro-game-builder/v1/init').then(function (response) {\n        console.log(response);\n        if (response.data.games.length > 0) {\n          self.hasGames = true;\n          self.games = response.data.games;\n        } else {\n          setTimeout(function () {\n            document.getElementById(\"title\").focus();\n          }, 20);\n        }\n        self.loading = false;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    validateBeforeSubmit() {\n      var self = this;\n      self.error = null;\n      // Validate All returns a promise and provides the validation result.\n      this.$validator.validateAll().then(success => {\n        if (!success) {\n          // handle error\n          return;\n        }\n        self.formSubmitted = true;\n        __WEBPACK_IMPORTED_MODULE_0_axios___default.a.post('/wp-json/maestro-game-builder/v1/game/create', {\n          title: document.getElementById('title').value\n        }).then(function (response) {\n          console.log(response);\n          if (response.data.created === true) {\n            self.$router.push({ name: 'single-game', params: { id: response.data.id } });\n          }\n          self.formSubmitted = false;\n        }).catch(function (error) {\n          self.formSubmitted = false;\n          console.log(error);\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    copyGame(id) {\n      var self = this;\n      self.loading = true;\n      __WEBPACK_IMPORTED_MODULE_0_axios___default.a.post('/wp-json/maestro-game-builder/v1/game/copy/' + id).then(function (response) {\n        console.log(response);\n        if (response.data.successful === true) {\n          /* Refresh the game list. */\n          self.fetchData();\n        } else {\n          self.loading = false;\n        }\n      }).catch(function (error) {\n        self.loading = false;\n        console.log(error);\n      });\n    },\n    deleteGame() {\n      var self = this;\n      self.loading = true;\n      /* This dismisses the dialog box. */\n      self.deleteTitle = null;\n      __WEBPACK_IMPORTED_MODULE_0_axios___default.a.post('/wp-json/maestro-game-builder/v1/game/delete/' + self.deleteID).then(function (response) {\n        console.log(response);\n        if (response.data.deleted === true) {\n          /* Refresh the game list. */\n          self.deleteID = null;\n          self.fetchData();\n        } else {\n          self.loading = false;\n        }\n      }).catch(function (error) {\n        self.loading = false;\n        console.log(error);\n      });\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_MinigameSettings_vue__ = __webpack_require__(62);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_MinigameSettings_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__components_MinigameSettings_vue__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  components: {\n    MinigameSettings: __WEBPACK_IMPORTED_MODULE_1__components_MinigameSettings_vue___default.a\n  },\n  data() {\n    return {\n      title: 'PlaySearch',\n      loading: false,\n      error: null,\n      gameType: '',\n      isDirty: false,\n      drag: false,\n      formSubmitted: false,\n      saveText: 'Save Game',\n      minigameOptions: [],\n      minigameData: {\n        textData: {},\n        imageData: {}\n      }\n    };\n  },\n  computed: {\n    filteredTitle() {\n      return this.title != '' ? this.title : '(untitled)';\n    },\n    dragOptions() {\n      return {\n        animation: 0,\n        group: 'description',\n        disabled: !this.editable,\n        ghostClass: 'ghost'\n      };\n    }\n  },\n  watch: {\n    isDragging(newValue) {\n      if (newValue) {\n        this.delayedDragging = true;\n        return;\n      }\n      this.$nextTick(() => {\n        this.delayedDragging = false;\n      });\n    }\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    validateBeforeSubmit() {\n      //console.log(this.minigameData);\n      // var self = this;\n      // self.error = null;\n      // // Validate All returns a promise and provides the validation result.\n      // this.$validator.validateAll().then(success => {\n      //     if (! success) {\n      //         // handle error\n      //         return;\n      //     }\n      //     self.formSubmitted = true;\n      //     Axios.post('/wp-json/maestro-game-builder/v1/game/save/'+this.$route.params.id,{\n      //       title: document.getElementById('gametitle').value,\n      //       type: document.getElementById('gametype').value,\n      //       minigame_order: self.minigameList\n      //     })\n      //     .then(function (response) {\n      //       console.log(response);\n      //       if(response.data.saved === true){\n      //        // self.$router.push({ name: 'single-game', params: { id: response.data.id }});\n      //       }\n      //       self.saveText = 'Saved!';\n      //       setTimeout(function(){\n      //         self.saveText = 'Save Game';\n      //       },2000);\n\n      //       self.formSubmitted = false;\n      //     }).catch(function(error) {\n      //       self.formSubmitted = false;\n      //       console.log(error);\n      //     });\n      // }).catch(error => {\n      //   console.log(error);\n      // });\n    },\n    fetchData() {\n      var self = this;\n      self.loading = true;\n      __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get('/wp-json/maestro-game-builder/v1/games/' + this.$route.params.id + '/minigames/' + this.$route.params.mid).then(function (response) {\n        /* What we know. */\n        self.title = response.data.post_title;\n        if (typeof response.data.custom.type !== 'undefined') {\n          self.gameType = response.data.custom.type;\n        }\n        if (typeof response.data.minigameOptions !== 'undefined') {\n          self.minigameOptions = response.data.minigameOptions;\n        }\n        console.log(response.data);\n        if (typeof response.data.custom.minigame_data !== 'undefined') {\n          self.minigameData = response.data.custom.minigame_data;\n        }\n        self.loading = false;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    saveMinigame() {\n      var self = this;\n      self.formSubmitted = true;\n      /* Data components must be specific in the data object, to strip out problematic Vue components. */\n      __WEBPACK_IMPORTED_MODULE_0_axios___default.a.post('/wp-json/maestro-game-builder/v1/games/' + this.$route.params.id + '/minigame/' + this.$route.params.mid + '/save', {\n        title: document.getElementById('gametitle').value,\n        type: document.getElementById('gametype').value,\n        data: self.minigameData\n      }).then(function (response) {\n        console.log(response);\n        if (response.data.saved === true) {\n          console.log('saved!');\n          self.isDirty = false;\n          self.formSubmitted = false;\n          // self.$router.push({ name: 'single-game', params: { id: response.data.id }});\n        }\n      }).catch(function (error) {\n        self.formSubmitted = false;\n        console.log(error);\n      });\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_prismjs__ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_prismjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prismjs__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prismjs_plugins_line_numbers_prism_line_numbers_js__ = __webpack_require__(59);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prismjs_plugins_line_numbers_prism_line_numbers_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prismjs_plugins_line_numbers_prism_line_numbers_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_axios__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: ['codeComponents', 'file'],\n  data() {\n    return {\n      fileData: null,\n      fileLines: [],\n      loading: false,\n      commentCache: false,\n      highlightCache: false,\n      filterActive: false\n    };\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    showAll() {\n      var lines = document.querySelectorAll('.sp-line');\n      for (var i = 0; i < lines.length; i++) {\n        lines[i].style.display = 'initial';\n      }\n      this.filterActive = false;\n    },\n    showOnlyHighlights() {\n      var lines = document.querySelectorAll('.sp-line');\n      for (var i = 0; i < lines.length; i++) {\n        lines[i].style.display = 'none';\n      }\n      var highlights = document.querySelectorAll('.sp-line-highlight');\n      for (var i = 0; i < highlights.length; i++) {\n        highlights[i].style.display = 'inherit';\n      }\n      this.filterActive = true;\n    },\n    fixHTML(html) {\n      var div = document.createElement('div');\n      var formattedHTML = html;\n      if (this.commentCache) {\n        formattedHTML = '<span class=\"token comment\">' + html;\n      }\n      if (html.indexOf('token comment') > -1) {\n        this.commentCache = true;\n      }\n      /* To preserve comment formatting. Either the end of the comment or it was a single-line. */\n      if (html.indexOf('*/') > -1 || html.indexOf('//') > -1) {\n        this.commentCache = false;\n      }\n      div.innerHTML = formattedHTML;\n      return div.innerHTML;\n    },\n    fetchData() {\n      var self = this;\n      self.loading = true;\n      var now = Math.floor(Date.now() / 1000);\n      __WEBPACK_IMPORTED_MODULE_2_axios___default.a.get(MaestroPluginBase + '/maestro-game-builder/minigames/views/' + this.file + '?refresh=' + now).then(function (response) {\n        var tempData = __WEBPACK_IMPORTED_MODULE_0_prismjs___default.a.highlight(response.data, __WEBPACK_IMPORTED_MODULE_0_prismjs___default.a.languages.javascript);\n        self.fileLines = tempData.split(/\\n/);\n        self.fileData = '';\n        var highlight = '';\n        for (var i = 0; i < self.fileLines.length; i++) {\n          /* Toggles Highligting */\n          if (self.fileLines[i].indexOf('/** End ' + self.codeComponents.lineKey + ' **/') > -1) {\n            self.highlightCache = false;\n          }\n          if (self.highlightCache && highlight != ' sp-line-highlight') {\n            highlight = ' sp-line-highlight';\n            self.fileData += '<span class=\"sp-highlight-group\">';\n          } else if (!self.highlightCache && highlight != '') {\n            highlight = '';\n            self.fileData += '</span>';\n          }\n          self.fileData += '<span class=\"sp-line sp-line-' + (i + 1) + highlight + '\"><span class=\"line-number\">' + (i + 1) + '</span>' + self.fixHTML(self.fileLines[i]) + '</span>';\n          if (self.fileLines[i].indexOf('/** ' + self.codeComponents.lineKey + ' **/') > -1) {\n            self.highlightCache = true;\n          }\n        }\n        //self.showOnlyHighlights();\n        self.loading = false;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQ29kZUJveC52dWU/NzFkOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7QUFDQTtBQUNBO0FBQ0E7NEJBRUE7U0FDQTs7Z0JBRUE7aUJBQ0E7ZUFDQTtvQkFDQTtzQkFDQTtvQkFFQTtBQVBBO0FBUUE7WUFDQTtTQUNBO0FBQ0E7O2NBRUE7NENBQ0E7NkNBQ0E7aUNBQ0E7QUFDQTswQkFDQTtBQUNBO3lCQUNBOzRDQUNBOzZDQUNBO2lDQUNBO0FBQ0E7aURBQ0E7a0RBQ0E7c0NBQ0E7QUFDQTswQkFDQTtBQUNBO2tCQUNBO3VDQUNBOzBCQUNBOzZCQUNBO3lEQUNBO0FBQ0E7OENBQ0E7NEJBQ0E7QUFDQTtBQUNBOzhEQUNBOzRCQUNBO0FBQ0E7c0JBQ0E7aUJBQ0E7QUFDQTtnQkFDQTtpQkFDQTtxQkFDQTt3Q0FDQTtpSkFDQSw4QkFDQTswSkFDQTt3Q0FDQTt3QkFDQTt3QkFDQTt3REFDQTtBQUNBO2lHQUNBO2tDQUNBO0FBQ0E7d0VBQ0E7d0JBQ0E7NkJBQ0E7OERBQ0E7d0JBQ0E7NkJBQ0E7QUFDQTs0S0FDQTs2RkFDQTtrQ0FDQTtBQUNBO0FBQ0E7QUFDQTt1QkFDQTtBQUNBLGdDQUNBO29CQUNBO0FBQ0E7QUFFQTtBQXJFQTtBQWZBIiwiZmlsZSI6IjQ3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwic3AtZGlhbG9nLXBvcHVwLW91dGVyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCIgaWQ9XCJzcC1kaWFsb2ctcG9wdXAtaW5uZXJcIj5cbiAgICAgICAgICA8aDQgY2xhc3M9XCJzcC1tb2RhbC10aXRsZVwiPnt7IGNvZGVDb21wb25lbnRzLmxpbmVLZXkgfX08L2g0PlxuICAgICAgICAgIDxwIGNsYXNzPVwic3AtbW9kYWwtdGl0bGUtZGVzY3JpcHRpb24gc3AtY29kZS1kZXNjcmlwdGlvblwiPnt7IGNvZGVDb21wb25lbnRzLmRlc2NyaXB0aW9uIH19PC9wPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcC1jb2RlLWJveC1jb250cm9sc1wiPlxuICAgICAgICAgICAgPGJ1dHRvbiB2LW9uOmNsaWNrPVwic2hvd09ubHlIaWdobGlnaHRzXCIgY2xhc3M9XCJtYWVzdHJvLXZpZXctc291cmNlIG1hZXN0cm8tc291cmNlLXRvZ2dsZVwiIHYtYmluZDpjbGFzcz1cInsgJ2FjdGl2ZSc6IGZpbHRlckFjdGl2ZSB9XCI+U2hvdyBXaGVyZSBcInt7IGNvZGVDb21wb25lbnRzLmxpbmVLZXkgfX1cIiBJcyBVc2VkPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIHYtb246Y2xpY2s9XCJzaG93QWxsXCIgY2xhc3M9XCJtYWVzdHJvLXZpZXctc291cmNlIG1hZXN0cm8tc291cmNlLXRvZ2dsZVwiIHYtYmluZDpjbGFzcz1cInsgJ2FjdGl2ZSc6ICFmaWx0ZXJBY3RpdmUgfVwiPlNob3cgQWxsPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPHByZSBjbGFzcz1cImxhbmd1YWdlLWphdmFzY3JpcHQgc3AtY29kZS1ib3hcIiB2LWJpbmQ6Y2xhc3M9XCJ7ICdzcC1maWx0ZXItYWN0aXZlJzogZmlsdGVyQWN0aXZlIH1cIj48Y29kZSBjbGFzcz1cImxhbmd1YWdlLWphdmFzY3JpcHRcIiB2LWh0bWw9XCJmaWxlRGF0YVwiPjwvY29kZT48L3ByZT5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwibWFlc3Ryby1ib3gtY2xvc2VcIiB2LW9uOmNsaWNrPVwiJGVtaXQoJ2Nsb3NlJylcIj48aSBjbGFzcz1cImZhIGZhLWNsb3NlXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgUHJpc20gZnJvbSAncHJpc21qcydcbmltcG9ydCAncHJpc21qcy9wbHVnaW5zL2xpbmUtbnVtYmVycy9wcmlzbS1saW5lLW51bWJlcnMuanMnXG5pbXBvcnQgQXhpb3MgZnJvbSAnYXhpb3MnXG5leHBvcnQgZGVmYXVsdCB7XG4gIHByb3BzOiBbJ2NvZGVDb21wb25lbnRzJywnZmlsZSddLFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmlsZURhdGE6IG51bGwsXG4gICAgICBmaWxlTGluZXM6IFtdLFxuICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICBjb21tZW50Q2FjaGU6IGZhbHNlLFxuICAgICAgaGlnaGxpZ2h0Q2FjaGU6IGZhbHNlLFxuICAgICAgZmlsdGVyQWN0aXZlOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlZCAoKSB7XG4gICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHNob3dBbGwgKCkge1xuICAgICAgdmFyIGxpbmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNwLWxpbmUnKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGluZXNbaV0uc3R5bGUuZGlzcGxheSA9ICdpbml0aWFsJztcbiAgICAgIH1cbiAgICAgIHRoaXMuZmlsdGVyQWN0aXZlID0gZmFsc2U7XG4gICAgfSxcbiAgICBzaG93T25seUhpZ2hsaWdodHMgKCkge1xuICAgICAgdmFyIGxpbmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNwLWxpbmUnKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGluZXNbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIH1cbiAgICAgIHZhciBoaWdobGlnaHRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNwLWxpbmUtaGlnaGxpZ2h0Jyk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhpZ2hsaWdodHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaGlnaGxpZ2h0c1tpXS5zdHlsZS5kaXNwbGF5ID0gJ2luaGVyaXQnO1xuICAgICAgfVxuICAgICAgdGhpcy5maWx0ZXJBY3RpdmUgPSB0cnVlOyAgICAgIFxuICAgIH0sXG4gICAgZml4SFRNTCAoaHRtbCl7XG4gICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgZm9ybWF0dGVkSFRNTCA9IGh0bWw7XG4gICAgICBpZih0aGlzLmNvbW1lbnRDYWNoZSl7XG4gICAgICAgIGZvcm1hdHRlZEhUTUwgPSAnPHNwYW4gY2xhc3M9XCJ0b2tlbiBjb21tZW50XCI+JyArIGh0bWw7XG4gICAgICB9XG4gICAgICBpZihodG1sLmluZGV4T2YoJ3Rva2VuIGNvbW1lbnQnKT4tMSl7XG4gICAgICAgIHRoaXMuY29tbWVudENhY2hlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8qIFRvIHByZXNlcnZlIGNvbW1lbnQgZm9ybWF0dGluZy4gRWl0aGVyIHRoZSBlbmQgb2YgdGhlIGNvbW1lbnQgb3IgaXQgd2FzIGEgc2luZ2xlLWxpbmUuICovXG4gICAgICBpZihodG1sLmluZGV4T2YoJyovJyk+LTF8fGh0bWwuaW5kZXhPZignLy8nKT4tMSl7XG4gICAgICAgIHRoaXMuY29tbWVudENhY2hlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBkaXYuaW5uZXJIVE1MPWZvcm1hdHRlZEhUTUw7XG4gICAgICByZXR1cm4gKGRpdi5pbm5lckhUTUwpO1xuICAgIH0sXG4gICAgZmV0Y2hEYXRhICgpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHNlbGYubG9hZGluZyA9IHRydWU7XG4gICAgICB2YXIgbm93ID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgICBBeGlvcy5nZXQoTWFlc3Ryb1BsdWdpbkJhc2UrJy9tYWVzdHJvLWdhbWUtYnVpbGRlci9taW5pZ2FtZXMvdmlld3MvJyt0aGlzLmZpbGUrJz9yZWZyZXNoPScrbm93KVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHZhciB0ZW1wRGF0YSA9IFByaXNtLmhpZ2hsaWdodChyZXNwb25zZS5kYXRhLCBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCk7XG4gICAgICAgIHNlbGYuZmlsZUxpbmVzID0gdGVtcERhdGEuc3BsaXQoL1xcbi8pO1xuICAgICAgICBzZWxmLmZpbGVEYXRhID0gJyc7XG4gICAgICAgIHZhciBoaWdobGlnaHQgPSAnJztcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHNlbGYuZmlsZUxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgLyogVG9nZ2xlcyBIaWdobGlndGluZyAqL1xuICAgICAgICAgIGlmKHNlbGYuZmlsZUxpbmVzW2ldLmluZGV4T2YoJy8qKiBFbmQgJytzZWxmLmNvZGVDb21wb25lbnRzLmxpbmVLZXkrJyAqKi8nKT4tMSl7XG4gICAgICAgICAgICBzZWxmLmhpZ2hsaWdodENhY2hlID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHNlbGYuaGlnaGxpZ2h0Q2FjaGUmJmhpZ2hsaWdodCE9JyBzcC1saW5lLWhpZ2hsaWdodCcpe1xuICAgICAgICAgICAgaGlnaGxpZ2h0ID0gJyBzcC1saW5lLWhpZ2hsaWdodCc7XG4gICAgICAgICAgICBzZWxmLmZpbGVEYXRhICs9ICc8c3BhbiBjbGFzcz1cInNwLWhpZ2hsaWdodC1ncm91cFwiPic7XG4gICAgICAgICAgfWVsc2UgaWYoIXNlbGYuaGlnaGxpZ2h0Q2FjaGUmJmhpZ2hsaWdodCE9Jycpe1xuICAgICAgICAgICAgaGlnaGxpZ2h0ID0gJyc7XG4gICAgICAgICAgICBzZWxmLmZpbGVEYXRhICs9ICc8L3NwYW4+JztcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi5maWxlRGF0YSArPSAnPHNwYW4gY2xhc3M9XCJzcC1saW5lIHNwLWxpbmUtJysoaSsxKStoaWdobGlnaHQrJ1wiPjxzcGFuIGNsYXNzPVwibGluZS1udW1iZXJcIj4nKyhpKzEpKyc8L3NwYW4+JytzZWxmLmZpeEhUTUwoc2VsZi5maWxlTGluZXNbaV0pKyc8L3NwYW4+JztcbiAgICAgICAgICBpZihzZWxmLmZpbGVMaW5lc1tpXS5pbmRleE9mKCcvKiogJytzZWxmLmNvZGVDb21wb25lbnRzLmxpbmVLZXkrJyAqKi8nKT4tMSl7XG4gICAgICAgICAgICBzZWxmLmhpZ2hsaWdodENhY2hlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy9zZWxmLnNob3dPbmx5SGlnaGxpZ2h0cygpO1xuICAgICAgICBzZWxmLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIENvZGVCb3gudnVlPzYzMWMwY2Q3Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_cropperjs__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_cropperjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_cropperjs__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_slider_component__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_slider_component___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_vue_slider_component__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* boxType controls which component appears here. */\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  components: {\n    vueSlider: __WEBPACK_IMPORTED_MODULE_2_vue_slider_component___default.a\n  },\n  props: ['game', 'minigameOptions', 'imageKey', 'imageData', 'multiKey'],\n  data() {\n    return {\n      saveText: 'Save',\n      formSubmitted: false,\n      cropper: null,\n      cropData: null,\n      saveActive: false,\n      selectColor: false,\n      alphaActive: false,\n      tolerance: 30,\n      filterColor: {\n        r: 255,\n        g: 255,\n        b: 255\n      },\n      customFilter: false\n    };\n  },\n  mounted() {\n    /* Better PNG compression for assets. */\n    console.log(this.multiKey);\n    var self = this;\n    var image = document.getElementById('crop-image');\n    this.cropper = new __WEBPACK_IMPORTED_MODULE_1_cropperjs___default.a(image, {\n      aspectRatio: self.imageData[self.imageKey].width / self.imageData[self.imageKey].height,\n      cropend: function (e) {\n        self.manualCrop();\n      }\n    });\n  },\n  computed: {\n    rawImage() {\n      return this.imageData[this.imageKey].rawUrl;\n    },\n    canvasWidth() {\n      return this.imageData[this.imageKey].width;\n    },\n    canvasHeight() {\n      if (typeof this.imageData[this.imageKey].floorSprite !== 'undefined' && this.imageData[this.imageKey].floorSprite == true) {\n        return this.imageData[this.imageKey].height + 20;\n      }\n      return this.imageData[this.imageKey].height;\n    }\n  },\n  directives: {\n    insertImage: function (canvasElement, binding, vnode) {\n      if (binding.value) {\n        /* Data is inserted now so we can save */\n        vnode.context.saveActive = true;\n        /* Find the element we need and the ratio. */\n        var ctx = canvasElement.getContext(\"2d\");\n        // Clear the canvas\n        var originalHeight = vnode.context.imageData[vnode.context.imageKey].height;\n        var height = vnode.context.imageData[vnode.context.imageKey].height;\n        var width = vnode.context.imageData[vnode.context.imageKey].width;\n        /* If this is a floor sprite we add one for reference, but just for alignment purposes. */\n        if (typeof vnode.context.imageData[vnode.context.imageKey].floorSprite !== 'undefined' && vnode.context.imageData[vnode.context.imageKey].floorSprite == true) {\n          height = height + 20;\n        }\n        ctx.clearRect(0, 0, width, height);\n        // Insert stuff into canvas\n        // ctx.fillStyle = \"black\";\n        // ctx.font = \"20px Georgia\";\n        /* This needs customized based on tile or not. */\n        //var pat=ctx.createPattern(binding.value,\"repeat\");\n        //ctx.rect(0,300-100,600,100);\n        //ctx.fillStyle=pat;\n        //ctx.fill();\n        /* TODO adjust this to options pulled from vnode.context */\n        ctx.drawImage(binding.value, 0, 0, width, originalHeight);\n        /* for Floor */\n        if (typeof vnode.context.imageData[vnode.context.imageKey].floorSprite !== 'undefined' && vnode.context.imageData[vnode.context.imageKey].floorSprite == true) {\n          ctx.fillStyle = \"black\";\n          ctx.rect(0, height - 20, width, 20);\n          ctx.fill();\n        }\n        /* Remove White (fuzzy) */\n        if (typeof vnode.context.imageData[vnode.context.imageKey].alpha !== 'undefined' && vnode.context.imageData[vnode.context.imageKey].alpha == true) {\n\n          var imgd = ctx.getImageData(0, 0, width, height),\n              pix = imgd.data,\n              newColor = { r: 0, g: 0, b: 0, a: 0 };\n          /* Alpha is Active. */\n          // if(typeof vnode.context.imageData[vnode.context.imageKey].alphaOption !== 'undefined' && vnode.context.alphaActive == true ) {\n          console.log(vnode.context.alphaActive);\n          /* So we can toggle on alpha-optional images. */\n          for (var i = 0, n = pix.length; i < n; i += 4) {\n            var r = pix[i],\n                g = pix[i + 1],\n                b = pix[i + 2];\n\n            if (!vnode.context.customFilter) {\n              // If its white then change it\n              if (r >= 255 - vnode.context.tolerance && g >= 255 - vnode.context.tolerance && b >= 255 - vnode.context.tolerance) {\n                // Change the white to whatever.\n                pix[i] = newColor.r;\n                pix[i + 1] = newColor.g;\n                pix[i + 2] = newColor.b;\n                pix[i + 3] = newColor.a;\n              }\n            } else {\n              // If its x color then change it\n              if (Math.abs(r - vnode.context.filterColor.r) < vnode.context.tolerance && Math.abs(g - vnode.context.filterColor.g) < vnode.context.tolerance && Math.abs(b - vnode.context.filterColor.b) < vnode.context.tolerance) {\n                // Change the white to whatever.\n                pix[i] = newColor.r;\n                pix[i + 1] = newColor.g;\n                pix[i + 2] = newColor.b;\n                pix[i + 3] = newColor.a;\n              }\n            }\n          }\n          //    }\n          ctx.putImageData(imgd, 0, 0);\n        }\n      }\n    }\n  },\n  methods: {\n    saveImage() {\n      var canvasElement = document.getElementById('crop-canvas');\n      /* If Floor Sprite we must remove the floor */\n      if (typeof this.imageData[this.imageKey].floorSprite !== 'undefined' && this.imageData[this.imageKey].floorSprite == true) {\n        var ctx = canvasElement.getContext(\"2d\");\n        var data = ctx.getImageData(0, 0, this.imageData[this.imageKey].width, this.imageData[this.imageKey].height);\n        ctx.clearRect(0, 0, this.imageData[this.imageKey].width, this.imageData[this.imageKey].height + 20);\n        ctx.canvas.height = this.imageData[this.imageKey].height;\n        ctx.putImageData(data, 0, 0);\n      }\n      CanvasPngCompression.replaceToDataURL();\n      var dataUrl = canvasElement.toDataURL('image/png', 0.1);\n      if (this.multiKey > -1) {\n        var multiData = {\n          dataUrl: dataUrl,\n          rawUrl: null,\n          activeUrl: null\n        };\n        this.imageData[this.imageKey]['group'].push(multiData);\n      } else {\n        this.imageData[this.imageKey].dataUrl = dataUrl;\n      }\n\n      this.$emit('save');\n    },\n    getEventLocation(event) {\n      var rect = event.target.getBoundingClientRect();\n      return {\n        x: Math.round((event.clientX - rect.left) / (rect.right - rect.left) * event.target.width),\n        y: Math.round((event.clientY - rect.top) / (rect.bottom - rect.top) * event.target.height)\n      };\n    },\n    getPixelColor(event) {\n      if (this.selectColor) {\n        // Get the coordinates of the click\n        var eventLocation = this.getEventLocation(event);\n        // Get the data of the pixel according to the location generate by the getEventLocation function\n        var context = event.target.getContext('2d');\n        var pixelData = context.getImageData(eventLocation.x, eventLocation.y, 1, 1).data;\n        if (pixelData[3] > 10) {\n          /* This is an opaque selection. Update our canvas. */\n          this.filterColor = {\n            r: pixelData[0],\n            g: pixelData[1],\n            b: pixelData[2]\n          };\n          this.manualCrop();\n          this.selectColor = false;\n          document.getElementById(\"alpha-checkbox\").checked = false;\n          this.customFilter = true;\n          this.alphaActive = true;\n        }\n      }\n    },\n    rotationDragEnd(slider) {\n      this.cropper.rotateTo(slider.currentIndex);\n      this.manualCrop();\n    },\n    manualCrop() {\n      this.cropData = this.cropper.getCroppedCanvas({\n        width: this.imageData[this.imageKey].width,\n        height: this.imageData[this.imageKey].height\n      });\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: ['message', 'cancelButton'],\n  data() {\n    return {};\n  },\n  methods: {\n    yes(e) {\n      e.preventDefault();\n      this.$emit('yes');\n      return false;\n    },\n    no(e) {\n      e.preventDefault();\n      this.$emit('no');\n      return false;\n    },\n    cancel(e) {\n      e.preventDefault();\n      this.$emit('close');\n      return false;\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRGlhbG9nQm94LnZ1ZT9mMDJjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBO3FCQUVBO1NBQ0E7V0FDQTtBQUNBOztXQUVBO1FBQ0E7aUJBQ0E7YUFDQTtBQUNBO1VBQ0E7UUFDQTtpQkFDQTthQUNBO0FBQ0E7Y0FDQTtRQUNBO2lCQUNBO2FBQ0E7QUFFQTtBQWhCQTtBQUxBIiwiZmlsZSI6IjQ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwic3AtZGlhbG9nLXBvcHVwLW91dGVyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTYgY29sLXNtLW9mZnNldC0zXCIgaWQ9XCJzcC1kaWFsb2ctcG9wdXAtaW5uZXJcIj5cbiAgICAgICAgICA8cD57eyBtZXNzYWdlIH19PC9wPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidXR0b24gYnV0dG9uLWNvbmZpcm1cIiB2LW9uOmNsaWNrPVwieWVzXCI+WWVzPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ1dHRvbiBidXR0b24tY2FuY2VsXCIgdi1vbjpjbGljaz1cIm5vXCI+Tm88L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbi1jYW5jZWxcIiB2LW9uOmNsaWNrPVwiY2FuY2VsXCIgdi1pZj1cImNhbmNlbEJ1dHRvblwiPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIHByb3BzOiBbJ21lc3NhZ2UnLCdjYW5jZWxCdXR0b24nXSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICB5ZXMgKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuJGVtaXQoJ3llcycpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgbm8gKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuJGVtaXQoJ25vJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBjYW5jZWwgKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuJGVtaXQoJ2Nsb3NlJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG48L3NjcmlwdD5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gRGlhbG9nQm94LnZ1ZT8yMGVkZWE5MiJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_cropperjs__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_cropperjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_cropperjs__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* boxType controls which component appears here. */\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: ['boxType', 'game', 'minigameOptions'],\n  data() {\n    return {\n      saveText: 'Save',\n      newGameTitle: null,\n      formSubmitted: false,\n      minigameType: '',\n      newMinigameTitle: null\n    };\n  },\n  methods: {\n    createGame() {\n      var self = this;\n      self.error = null;\n      // Validate All returns a promise and provides the validation result.\n      this.$validator.validateAll().then(success => {\n        if (!success) {\n          // handle error\n          return;\n        }\n        self.formSubmitted = true;\n        __WEBPACK_IMPORTED_MODULE_0_axios___default.a.post('/wp-json/maestro-game-builder/v1/game/create', {\n          title: document.getElementById('title').value\n        }).then(function (response) {\n          console.log(response);\n          if (response.data.created === true) {\n            self.$router.push({ name: 'single-game', params: { id: response.data.id } });\n          }\n          self.formSubmitted = false;\n        }).catch(function (error) {\n          self.formSubmitted = false;\n          console.log(error);\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    createMinigame() {\n      var self = this;\n      self.error = null;\n      // Validate All returns a promise and provides the validation result.\n      this.$validator.validateAll().then(success => {\n        if (!success) {\n          // handle error\n          return;\n        }\n        self.formSubmitted = true;\n        __WEBPACK_IMPORTED_MODULE_0_axios___default.a.post('/wp-json/maestro-game-builder/v1/games/' + self.game + '/minigame/create', {\n          title: document.getElementById('title').value,\n          type: self.minigameType\n        }).then(function (response) {\n          console.log(response);\n          if (response.data.created === true) {\n            //self.$router.push({ name: 'single-minigame', params: { id: self.game, mid: response.data.id }});\n            /* Return user to list and push array. */\n            self.$emit('minigame', response.data.minigame);\n          }\n          self.formSubmitted = false;\n        }).catch(function (error) {\n          self.formSubmitted = false;\n          console.log(error);\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__minigame_settings_BridgeRunner_vue__ = __webpack_require__(63);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__minigame_settings_BridgeRunner_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__minigame_settings_BridgeRunner_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__minigame_settings_SimonSays_vue__ = __webpack_require__(65);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__minigame_settings_SimonSays_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__minigame_settings_SimonSays_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__minigame_settings_GatewayCode_vue__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__minigame_settings_GatewayCode_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__minigame_settings_GatewayCode_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__minigame_settings_TopRunner_vue__ = __webpack_require__(66);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__minigame_settings_TopRunner_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__minigame_settings_TopRunner_vue__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: ['gameType', 'minigameData', 'formSubmitted', 'isDirty', 'title'],\n  components: {\n    BridgeRunner: __WEBPACK_IMPORTED_MODULE_0__minigame_settings_BridgeRunner_vue___default.a,\n    SimonSays: __WEBPACK_IMPORTED_MODULE_1__minigame_settings_SimonSays_vue___default.a,\n    GatewayCode: __WEBPACK_IMPORTED_MODULE_2__minigame_settings_GatewayCode_vue___default.a,\n    TopRunner: __WEBPACK_IMPORTED_MODULE_3__minigame_settings_TopRunner_vue___default.a\n  },\n  data() {\n    return {};\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vTWluaWdhbWVTZXR0aW5ncy52dWU/YmRiYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7K0RBQ0E7a0VBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFMQTtTQU1BO1dBQ0E7QUFDQTtBQVZBIiwiZmlsZSI6IjUxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8dGFibGUgY2xhc3M9XCJmb3JtLXRhYmxlXCI+XG4gICAgPGJyaWRnZS1ydW5uZXIgdi1pZj1cImdhbWVUeXBlPT0nYnJpZGdlcnVubmVyJ1wiIHYtYmluZDptaW5pZ2FtZS1kYXRhPVwibWluaWdhbWVEYXRhXCIgdi1vbjpzYXZlPVwiJGVtaXQoJ3NhdmUnKVwiIHYtYmluZDpmb3JtLXN1Ym1pdHRlZD1cImZvcm1TdWJtaXR0ZWRcIiB2LWJpbmQ6aXMtZGlydHk9XCJpc0RpcnR5XCIgdi1vbjpkaXJ0eT1cIiRlbWl0KCdkaXJ0eScpXCIgdi1iaW5kOnRpdGxlPVwidGl0bGVcIj48L2JyaWRnZS1ydW5uZXI+XG4gICAgPHNpbW9uLXNheXMgdi1pZj1cImdhbWVUeXBlPT0nc2ltb24nXCIgdi1iaW5kOm1pbmlnYW1lLWRhdGE9XCJtaW5pZ2FtZURhdGFcIj48L3NpbW9uLXNheXM+XG4gICAgPHRvcC1ydW5uZXIgdi1pZj1cImdhbWVUeXBlPT0ndG9wcnVubmVyJ1wiIHYtYmluZDptaW5pZ2FtZS1kYXRhPVwibWluaWdhbWVEYXRhXCI+PC90b3AtcnVubmVyPlxuICAgIDxnYXRld2F5LWNvZGUgdi1pZj1cImdhbWVUeXBlPT0nZ2F0ZXdheSdcIiB2LWJpbmQ6bWluaWdhbWUtZGF0YT1cIm1pbmlnYW1lRGF0YVwiPjwvZ2F0ZXdheS1jb2RlPlxuICA8L3RhYmxlPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBCcmlkZ2VSdW5uZXIgZnJvbSAnLi9taW5pZ2FtZS1zZXR0aW5ncy9CcmlkZ2VSdW5uZXIudnVlJztcbmltcG9ydCBTaW1vblNheXMgZnJvbSAnLi9taW5pZ2FtZS1zZXR0aW5ncy9TaW1vblNheXMudnVlJztcbmltcG9ydCBHYXRld2F5Q29kZSBmcm9tICcuL21pbmlnYW1lLXNldHRpbmdzL0dhdGV3YXlDb2RlLnZ1ZSc7XG5pbXBvcnQgVG9wUnVubmVyIGZyb20gJy4vbWluaWdhbWUtc2V0dGluZ3MvVG9wUnVubmVyLnZ1ZSc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHByb3BzOiBbJ2dhbWVUeXBlJywnbWluaWdhbWVEYXRhJywnZm9ybVN1Ym1pdHRlZCcsJ2lzRGlydHknLCd0aXRsZSddLFxuICBjb21wb25lbnRzOiB7XG4gICAgQnJpZGdlUnVubmVyLFxuICAgIFNpbW9uU2F5cyxcbiAgICBHYXRld2F5Q29kZSxcbiAgICBUb3BSdW5uZXJcbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBNaW5pZ2FtZVNldHRpbmdzLnZ1ZT84NDMxMmMxMiJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* boxType controls which component appears here. */\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: ['id', 'content', 'field', 'isDirty'],\n  data() {\n    return {};\n  },\n  mounted() {\n    //this.textareaToTinymce('intro-text');\n    this.textareaToTinymce(this.field);\n  },\n  beforeDestroy() {\n    jQuery('#' + this.field + ' .mce-i-link').unbind('click');\n    tinyMCE.execCommand('mceRemoveEditor', false, this.field);\n  },\n  methods: {\n    textareaToTinymce(id) {\n      var self = this;\n      if (typeof tinyMCE == \"object\" && typeof tinyMCE.execCommand == \"function\") {\n        tinyMCE.execCommand(\"mceAddEditor\", false, id);\n        // tinyMCE.execCommand('mceAddControl', false, id);\n        /* Connect WP Link */\n        jQuery('#' + self.field + ' .mce-i-link').parent().click(function (e) {\n          wpActiveEditor = false;\n          wpLink.open(self.field);\n        });\n      }\n    }\n\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vV1AtV1lTSVdZRy52dWU/YTUzMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJBO0FBQ0E7b0NBRUE7U0FDQTtXQUNBO0FBQ0E7WUFDQTtBQUNBO2dDQUNBO0FBQ0E7a0JBQ0E7cURBQ0E7dURBQ0E7QUFDQTs7MEJBRUE7aUJBQ0E7a0ZBQ0E7bURBQ0E7QUFDQTtBQUNBOzhFQUNBOzJCQUNBOzJCQUNBO0FBQ0E7QUFDQTtBQUdBOztBQWRBO0FBYkEiLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJ3cC1jb3JlLXVpIHdwLWVkaXRvci13cmFwIHRtY2UtYWN0aXZlIGhhcy1kZndcIj5cbiAgICA8ZGl2IDppZD1cIid3cC1jb250ZW50LWVkaXRvci10b29scycrZmllbGRcIiBjbGFzcz1cIndwLWVkaXRvci10b29scyBoaWRlLWlmLW5vLWpzXCI+XG4gICAgICA8ZGl2IDppZD1cIid3cC1jb250ZW50LW1lZGlhLWJ1dHRvbnMtJytmaWVsZFwiIGNsYXNzPVwid3AtbWVkaWEtYnV0dG9uc1wiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cImluc2VydC1tZWRpYS1idXR0b25cIiBjbGFzcz1cImJ1dHRvbiBpbnNlcnQtbWVkaWEgYWRkX21lZGlhXCIgOmRhdGEtZWRpdG9yPVwiZmllbGRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIndwLW1lZGlhLWJ1dHRvbnMtaWNvblwiPjwvc3Bhbj4gQWRkIE1lZGlhXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8IS0tPGRpdiBjbGFzcz1cIndwLWVkaXRvci10YWJzXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIDppZD1cIidjb250ZW50LXRtY2UtJytmaWVsZFwiIGNsYXNzPVwid3Atc3dpdGNoLWVkaXRvciBzd2l0Y2gtdG1jZVwiIGRhdGEtd3AtZWRpdG9yLWlkPVwiY29udGVudFwiPlZpc3VhbDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA6aWQ9XCInY29udGVudC1odG1sLScrZmllbGRcIiBjbGFzcz1cIndwLXN3aXRjaC1lZGl0b3Igc3dpdGNoLWh0bWxcIiBkYXRhLXdwLWVkaXRvci1pZD1cImNvbnRlbnRcIj5UZXh0PC9idXR0b24+XG4gICAgICA8L2Rpdj4tLT5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGlkPVwid3AtY29udGVudC1lZGl0b3ItY29udGFpbmVyXCIgY2xhc3M9XCJ3cC1lZGl0b3ItY29udGFpbmVyXCI+XG4gICAgICA8ZGl2IGlkPVwiZWRfdG9vbGJhclwiIGNsYXNzPVwicXVpY2t0YWdzLXRvb2xiYXJcIj48L2Rpdj5cbiAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cIndwLWVkaXRvci1hcmVhXCIgc3R5bGU9XCJoZWlnaHQ6IDIwMHB4XCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgY29scz1cIjQwXCIgOm5hbWU9XCJmaWVsZFwiIDppZD1cImZpZWxkXCI+e3sgY29udGVudCB9fTwvdGV4dGFyZWE+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbi8qIGJveFR5cGUgY29udHJvbHMgd2hpY2ggY29tcG9uZW50IGFwcGVhcnMgaGVyZS4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IFsnaWQnLCdjb250ZW50JywnZmllbGQnLCdpc0RpcnR5J10sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7fVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICAvL3RoaXMudGV4dGFyZWFUb1RpbnltY2UoJ2ludHJvLXRleHQnKTtcbiAgICB0aGlzLnRleHRhcmVhVG9UaW55bWNlKHRoaXMuZmllbGQpO1xuICB9LFxuICBiZWZvcmVEZXN0cm95ICgpIHtcbiAgICBqUXVlcnkoJyMnK3RoaXMuZmllbGQrJyAubWNlLWktbGluaycpLnVuYmluZCgnY2xpY2snKTtcbiAgICB0aW55TUNFLmV4ZWNDb21tYW5kKCdtY2VSZW1vdmVFZGl0b3InLGZhbHNlLCB0aGlzLmZpZWxkKTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHRleHRhcmVhVG9UaW55bWNlIChpZCkge1xuICAgICAgdmFyIHNlbGYgPXRoaXM7XG4gICAgICBpZiAoIHR5cGVvZiggdGlueU1DRSApID09IFwib2JqZWN0XCIgJiYgdHlwZW9mKCB0aW55TUNFLmV4ZWNDb21tYW5kICkgPT0gXCJmdW5jdGlvblwiICkge1xuICAgICAgICAgIHRpbnlNQ0UuZXhlY0NvbW1hbmQoXCJtY2VBZGRFZGl0b3JcIiwgZmFsc2UsIGlkKTtcbiAgICAgICAgIC8vIHRpbnlNQ0UuZXhlY0NvbW1hbmQoJ21jZUFkZENvbnRyb2wnLCBmYWxzZSwgaWQpO1xuICAgICAgICAgIC8qIENvbm5lY3QgV1AgTGluayAqL1xuICAgICAgICAgIGpRdWVyeSgnIycrc2VsZi5maWVsZCsnIC5tY2UtaS1saW5rJykucGFyZW50KCkuY2xpY2soZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICB3cEFjdGl2ZUVkaXRvciA9IGZhbHNlO1xuICAgICAgICAgICAgd3BMaW5rLm9wZW4oc2VsZi5maWVsZCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cbn1cbjwvc2NyaXB0PlxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBXUC1XWVNJV1lHLnZ1ZT8zODg4M2E2ZSJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuedraggable__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuedraggable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vuedraggable__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: ['minigameData', 'formSubmitted', 'isDirty', 'title'],\n  components: {\n    draggable: __WEBPACK_IMPORTED_MODULE_1_vuedraggable___default.a\n  },\n  data() {\n    return {\n      codeBoxOpen: false,\n      codeFile: 'BridgeRunner.js',\n      codeData: {\n        help: {\n          lineKey: 'Help/Intro Text',\n          description: 'This content appears before the minigame begins.'\n        },\n        success: {\n          lineKey: 'Victory Text',\n          description: 'This content appears when the game is won.'\n        },\n        base: {\n          lineKey: 'Base Layer',\n          description: 'Background image for the level.'\n        },\n        sprite: {\n          lineKey: 'Sprite',\n          description: 'Four poses that animate running/jumping.'\n        },\n        obstacle1: {\n          lineKey: 'Obstacle',\n          description: 'Blocks that can be jumped on or over.'\n        },\n        collectibles: {\n          lineKey: 'Collectibles',\n          description: 'Objects the player can collect through contact.'\n        },\n        platforms: {\n          lineKey: 'Platforms',\n          description: 'Blocks that make up the ground.'\n        }\n      },\n      loading: false,\n      error: null,\n      gameType: '',\n      drag: false,\n      saveText: 'Save Minigame',\n      activeTab: 'content',\n      multiKey: -1,\n      imageData: {\n        baseLayer: {\n          name: 'baseLayer',\n          layer: 0,\n          activeUrl: null,\n          rawUrl: null,\n          dataUrl: null,\n          height: 600,\n          width: 5110,\n          tile: false,\n          alpha: false\n        },\n        avatar: {\n          name: 'avatar',\n          layer: 5,\n          activeUrl: null,\n          rawUrl: null,\n          dataUrl: null,\n          height: 514,\n          width: 1307,\n          tile: false,\n          alpha: true,\n          floorSprite: true\n        },\n        obstacle1: {\n          name: 'obstacle1',\n          layer: 5,\n          activeUrl: null,\n          rawUrl: null,\n          dataUrl: null,\n          height: 64,\n          width: 65,\n          tile: false,\n          alpha: false\n        },\n        collectibles: {\n          name: 'collectibles',\n          layer: 5,\n          height: 86,\n          width: 46,\n          group: [],\n          tile: false,\n          alpha: true\n        },\n        platforms: {\n          name: 'platforms',\n          layer: 5,\n          height: 140,\n          width: 259,\n          group: [],\n          tile: false,\n          alpha: true,\n          alphaOption: true\n        }\n      },\n      textData: {\n        help: {\n          title: '',\n          text: ''\n        },\n        success: {\n          title: '',\n          text: ''\n        }\n      },\n      cropImageKey: null\n    };\n  },\n  computed: {},\n  created() {\n    this.minigameData.activeGame = 'bridge-runner';\n    /* Reboot from a save. */\n    if (typeof this.minigameData.imageData !== 'undefined') {\n      var self = this;\n      /* We restore the URL from the active minigame. */\n      for (var p in this.minigameData.imageData) {\n\n        if (typeof self.minigameData.imageData[p].group !== 'undefined' && self.minigameData.imageData[p].group.length > 0) {\n          /* Group */\n          for (var p2 = 0; self.minigameData.imageData[p].group.length > p2; p2++) {\n            var multiData = {\n              dataUrl: null,\n              rawUrl: null,\n              activeUrl: self.minigameData.imageData[p].group[p2].url\n            };\n            self.imageData[p].group.push(multiData);\n          }\n        } else {\n          if (self.minigameData.imageData.hasOwnProperty(p)) {\n            self.imageData[p].activeUrl = self.minigameData.imageData[p].url;\n          }\n        }\n      }\n    }\n    if (typeof this.minigameData.textData.success !== 'undefined') {\n      /* success exists so the object has been saved before. */\n      this.textData = this.minigameData.textData;\n    }\n  },\n  beforeCreate() {},\n  beforeDestroy() {\n    /* Remove listeners. */\n  },\n  methods: {\n    getImage(key, multiKey) {\n      var multiKey = typeof multiKey !== 'undefined' ? multiKey : -1;\n      var dataSource;\n      if (multiKey > -1) {\n        dataSource = this.imageData[key]['group'][multiKey];\n      } else {\n        dataSource = this.imageData[key];\n      }\n      if (dataSource.activeUrl) {\n        /* Token prevents browser caching on changed images. */\n        return dataSource.activeUrl + '?token=' + Math.floor(Math.random() * 2000);\n      } else if (dataSource.dataUrl) {\n        return dataSource.dataUrl;\n      }\n      return false;\n    },\n    mediaUploader(component, multiKey) {\n      var multiKey = typeof multiKey !== 'undefined' ? multiKey : -1;\n      var self = this;\n      this.cropperTag = component;\n      // wp.media.model.settings.post.id = self.$route.params.mid;\n      var media_uploader = wp.media({\n        title: 'Select Artwork',\n        button: {\n          text: 'Use This Artwork'\n        },\n        library: {\n          type: 'image'\n          //HERE IS THE MAGIC. Set your own post ID var\n          //         uploadedTo : wp.media.model.settings.post.id\n        },\n        frame: \"post\",\n        state: \"insert\",\n        multiple: false\n      });\n      media_uploader.on(\"insert\", function () {\n        var json = media_uploader.state().get(\"selection\").first().toJSON();\n\n        self.imageData[component].rawUrl = json.url;\n        if (multiKey > -1) {\n          self.multiKey = multiKey;\n        }\n        self.cropImageKey = component;\n      });\n\n      media_uploader.open();\n    },\n    removeImage(key, multiKey) {\n      var multiKey = typeof multiKey !== 'undefined' ? multiKey : -1;\n      if (multiKey > -1) {\n        if (this.imageData[key]['group'].length < 2) {\n          this.imageData[key]['group'] = [];\n        } else {\n          this.imageData[key]['group'].splice(multiKey, 1);\n        }\n      } else {\n        this.imageData[key].dataUrl = null;\n        this.imageData[key].activeUrl = null;\n      }\n    },\n    saveMinigame() {\n      /* Format Data for Saving */\n      this.minigameData.imageData = this.imageData;\n      this.textData.help.text = tinyMCE.editors['intro-text'].getContent();\n      this.textData.success.text = tinyMCE.editors['victory-text'].getContent();\n      this.minigameData.textData = this.textData;\n      this.$emit('save');\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data() {\n    return {\n      title: 'PlaySearch',\n      loading: false,\n      error: null,\n      gameType: '',\n      drag: false,\n      formSubmitted: false,\n      saveText: 'Save Game',\n      minigameOptions: []\n    };\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vR2F0ZXdheUNvZGUudnVlPzdlZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJBO0FBQ0E7U0FFQTs7YUFFQTtlQUNBO2FBQ0E7Z0JBQ0E7WUFDQTtxQkFDQTtnQkFDQTt1QkFFQTtBQVRBO0FBVUE7QUFaQSIsImZpbGUiOiI1NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbjx0Ym9keT5cbiAgPHRyPlxuICAgIDx0aCBzY29wZT1cInJvd1wiPlxuICAgICAgPGxhYmVsIGZvcj1cIm1pbmlnYW1lX3NldHRpbmdzXCI+U2V0dGluZ3M8L2xhYmVsPlxuICAgIDwvdGg+ICAgICAgICAgICAgICAgICAgXG4gICAgPHRkPlxuICAgIEdhdGV3YXkgQ29kZSBzcGVjaWZpYyBzZXR0aW5ncyB3aWxsIGdvIGhlcmUuXG4gICAgPC90ZD5cbiAgPC90cj5cbiAgPHRyPlxuICAgIDx0aD48L3RoPlxuICAgIDx0ZCBjbGFzcz1cInNhdmVcIj5cbiAgICAgIDxsb2FkaW5nLXNwaW5uZXIgdi1pZj1cImZvcm1TdWJtaXR0ZWRcIj48L2xvYWRpbmctc3Bpbm5lcj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJidXR0b24gYnV0dG9uLXN1Ym1pdFwiIHR5cGU9XCJzdWJtaXRcIiA6ZGlzYWJsZWQ9XCJzYXZlVGV4dCE9J1NhdmUgR2FtZSdcIiB2LWVsc2U+e3sgc2F2ZVRleHQgfX08L2J1dHRvbj5cbiAgICA8L3RkPlxuICA8L3RyPlxuPC90Ym9keT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQXhpb3MgZnJvbSAnYXhpb3MnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0aXRsZTogJ1BsYXlTZWFyY2gnLFxuICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICBlcnJvcjogbnVsbCxcbiAgICAgIGdhbWVUeXBlOiAnJyxcbiAgICAgIGRyYWc6IGZhbHNlLFxuICAgICAgZm9ybVN1Ym1pdHRlZDogZmFsc2UsXG4gICAgICBzYXZlVGV4dDogJ1NhdmUgR2FtZScsXG4gICAgICBtaW5pZ2FtZU9wdGlvbnM6IFtdXG4gICAgfVxuICB9XG59XG48L3NjcmlwdD5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gR2F0ZXdheUNvZGUudnVlPzc2ZDkzNGFlIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n//import SimonSays from '../../../games/simon-says';\n//import PlaySearch from '../../../games/Utils';\n//import SimonSays from '../../../games/SimonSays';\n\n/*\nFor each image, check the ratio. If it works, skip the info box. If it doesn't, load the info box with cropper and create a placeholder canvas to demo the placement (must be tailored for each game).\n*/\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: ['minigameData'],\n  data() {\n    return {\n      gamePreview: null,\n      formSubmitted: false,\n      saveText: 'Save Minigame',\n      backgroundImg: null\n\n      // simon: [],\n      // pIHold: null,\n      // pIPos: 0,\n      // timeConstant: null,\n      // timer: 0,\n      // music: [],\n      // whiteUp: {},\n      // whiteI: null,\n      // redUp: {},\n      // redI: null,\n      // blueUp: {},\n      // blueI: null,\n      // button1: {},\n      // button2: {},\n      // button3: {},\n      // button4: {},\n      // button5: {},\n      // button6: {},\n      // buttonGrouper: null,\n      // startButton: null,\n      // simonButton: null,\n      // bkg: null,\n      // picture: null,\n      // sequenceLoop: null,\n      // fx: null,\n      // sequencePos: 0,\n      // listPos: 0,\n      // menuBox: [],\n      // violinIntro: null,\n      // pianoIntro: null,\n      // wrong: null,\n      // playerChoice: null,\n      // background: null,\n      // player: null,\n      // startButton: null,\n      // menuButton: null,\n      // menu_Home: null,\n      // menu_Resume: null\n    };\n  },\n  created() {\n    //window.PIXI = require('../../../../../node_modules/phaser/build/custom/pixi');\n    //window.p2 = require('../../../../../node_modules/phaser/build/custom/p2');\n    //window.Phaser = require('../../../../../node_modules/phaser/build/custom/phaser-split');\n    //var PlaySearch = require('../../../games/Utils');\n    //PlaySearch.SimonSays = require('../../../games/SimonSays');\n    //console.log(PlaySearch);\n    this.minigameData.activeGame = 'simon';\n  },\n  mounted() {\n    var self = this;\n    // this.gamePreview = new Phaser.Game(800, 600, Phaser.AUTO, 'gameDiv', { \n    //     preload: self.preload,\n    //     create: self.create,\n    //     update: self.update,\n    // });\n  },\n  methods: {\n    submitMinigame() {},\n    mediaUploader() {\n      var self = this;\n      var media_uploader = wp.media({\n        frame: \"post\",\n        state: \"insert\",\n        multiple: false\n      });\n\n      media_uploader.on(\"insert\", function () {\n        var json = media_uploader.state().get(\"selection\").first().toJSON();\n        console.log(json);\n        // var image_url = json.url;\n        // var image_caption = json.caption;\n        // var image_title = json.title;\n        self.backgroundImg = json.url;\n      });\n\n      media_uploader.open();\n    }\n    // preload () {\n    //   console.log(this.gamePreview);\n    //   this.gamePreview.load.spritesheet('buttons', '/games/simon/images/buttons_150x100.png', 150, 100); \n\n    //   //!--------MEMORY IMAGES --- TEACHER INPUT\n    //   this.gamePreview.load.image('mem0', '/games/simon/images/memory0.jpg');    \n    //   this.gamePreview.load.image('mem1', '/games/simon/images/memory1.jpg');\n\n    //   //!---------BACKGROUND AND AVATAR IMAGE\n    //   this.gamePreview.load.image('background', '/games/simon/images/clouds_generic.jpg');\n    //   this.gamePreview.load.image('player', '/games/simon/images/player_circle.png'); //placed on left hand side\n\n\n    //   this.gamePreview.load.spritesheet('menu', '/games/simon/images/menuButtons.png', 200,100);\n\n    //   //TOOT TOOT PRELOAD THE AUDIO HERE -- TEACHER INPUT?\n    //   this.gamePreview.load.audio('sfx', '/games/simon/sounds/efgabc.ogg');\n    //   this.gamePreview.load.audio('violinIntro', '/games/simon/sounds/kreutzer_violinIntro_loop.ogg');\n    //   this.gamePreview.load.audio('pianoIntro', '/games/simon/sounds/kreutzer_piano_intro.ogg');\n    //   this.gamePreview.load.audio('wrong', '/games/simon/sounds/wrong.ogg');\n    // },\n    // create () {\n\n    //   this.simon = [ //these lists set the pattern for simon. \n    //   //We'll need a way to add an arry of numbers\n    //     [1,2,4,2,1],\n\n    //     [4,1,1,2,5,1,6],\n\n    //     [0]\n\n    //   ];\n    //   this.timeConstant = Phaser.Timer.SECOND;\n\n\n    //   this.menuBox = [];\n\n\n    //   //this.createAudio();\n\n\n    //   //add the background\n\n    //   this.background = this.gamePreview.add.image(0,0, 'background');\n    //   this.background.scale.setTo(0.75,0.75);   \n\n    //   this.player = this.gamePreview.add.image(0, this.gamePreview.world.centerY, 'player');\n\n\n    //   //all 6 buttons\n    //   this.button1 = this.drawPlayerOptions((this.gamePreview.world.width/24), this.gamePreview.world.centerY+150, 'buttons', 0, 1);\n    //   this.button1.scale.setTo(0.75,0.75);\n    //   this.button1.val = 1;\n    //   //this.button1.sfx = this.gamePreview.add.audio('sfx');\n\n    //   this.button2 = this.drawPlayerOptions((this.gamePreview.world.width/24)+120, this.gamePreview.world.centerY+150, 'buttons', 2, 1);\n    //   this.button2.scale.setTo(0.75,0.75);\n    //   this.button2.val = 2;\n\n    //   this.button3 = this.drawPlayerOptions((this.gamePreview.world.width/24)+240, this.gamePreview.world.centerY+150, 'buttons', 4, 1);\n    //   this.button3.scale.setTo(0.75,0.75);\n    //   this.button3.val = 3;\n\n    //   this.button4 = this.drawPlayerOptions((this.gamePreview.world.width/24)+360, this.gamePreview.world.centerY+150, 'buttons', 6, 1);\n    //   this.button4.scale.setTo(0.75,0.75);\n    //   this.button4.val = 4;\n\n    //   this.button5 = this.drawPlayerOptions((this.gamePreview.world.width/24)+480, this.gamePreview.world.centerY+150, 'buttons', 8, 1);\n    //   this.button5.scale.setTo(0.75,0.75);\n    //   this.button5.val = 5;\n\n    //   this.button6 = this.drawPlayerOptions((this.gamePreview.world.width/24)+600, this.gamePreview.world.centerY+150, 'buttons', 10, 1);\n    //   this.button6.scale.setTo(0.75,0.75);\n    //   this.button6.val = 6;\n\n    //   this.buttonGrouper = [this.button1, this.button2, this.button3, this.button4, this.button5, this.button6]; //make it easier to access\n\n\n    //   this.startButton = this.gamePreview.add.button(this.gamePreview.width-10, 10, 'menu', this.LoopF, this,14,12,13);\n    //   this.startButton.anchor.setTo(1,0)\n    //   this.startButton.scale.setTo(0.5, 0.5);\n    //   this.menuButton = this.gamePreview.add.button(5,5,'menu', this.menuPress, this, 3,1,2); // hover, static, press\n    //   this.menuButton.scale.setTo(0.5, 0.5);\n\n\n    //   //this.menuBox = this.createRectangle(this.gamePreview.world.centerX-150, 100, 300,300, 0xb4b3b3, 0x000000);\n    //   this.menu_Home = this.gamePreview.add.button(this.menuBox.x+50, this.menuBox.y+35, 'menu', this.menuOptions, this, 5,4,6);\n    //   this.menu_Home.scale.setTo(1,1);\n    //   this.menu_Home.val = \"home\";\n    //   this.menu_Resume = this.gamePreview.add.button(this.menuBox.x+50, this.menuBox.y+145, 'menu', this.menuOptions, this, 9,8,10);\n    //   this.menu_Resume.scale.setTo(1,1);\n    //   this.menu_Resume.val = \"resume\";\n\n\n    //   this.menuBox.visible = false;\n    //   this.menu_Home.visible = false;\n    //   this.menu_Resume.visible = false;\n\n    //     /* Force resize to trigger */\n    //  // this.resize(this.gamePreview.width,this.gamePreview.height);\n    // },\n    // update () {\n\n    // },\n    // createAudio () {\n    //   this.fx = this.gamePreview.add.audio('sfx');\n    //   this.fx.allowMultiple = true;\n\n    //   this.fx.addMarker('1', 1, 2.0);    //e note\n    //   this.fx.addMarker('2', 4.2,2.0);   //f note\n    //   this.fx.addMarker('3', 7.5, 2.0);  //g note\n    //   this.fx.addMarker('4', 10.7, 2.0); //a note\n    //   this.fx.addMarker('5', 13.5, 1.5); //b note\n    //   this.fx.addMarker('6', 16, 1.7);   //c note\n\n\n    //   this.violinIntro = this.gamePreview.add.audio('violinIntro');    \n    //   this.pianoIntro = this.gamePreview.add.audio('pianoIntro');    \n    //   this.music = [this.violinIntro, this.pianoIntro];\n\n    //   this.wrong = this.game.add.audio('wrong');\n    //   this.wrong.volume = 0.5;   \n    // },\n    // drawPlayerOptions (x, y, sprite, key, scale) {\n    //   var obj = this.gamePreview.add.sprite(x, y, sprite);\n    //   obj.frame = key;\n    //   obj.scale.set(scale);\n    //   obj.inputEnabled = true;\n    //   //obj.events.onInputDown.add(this.playerChoice,this.gamePreview);\n    //   return obj;\n    // },\n    // LoopF () {\n    //         //if you're in the middle of clicking player buttons pressing start again will reset\n    //   this.pIPos = 0; //reset our player input position\n    //   this.listPos = 0; //reset our sequence list position      \n\n\n    //   if(this.picture != null){//for the start since we haven't defined our photo.\n    //       this.fadeOut(this.picture);\n    //   }\n\n    //   if(this.sequencePos < this.simon.length){\n    //       this.sequenceLoop = this.gamePreview.time.events.loop(Phaser.Timer.SECOND, this.updateSequence, this.gamePreview);\n    //   }\n    //   if(this.sequencePos === this.simon.length -1){\n    //       this.sequencePos = 0;\n    //   }\n    // },\n    // fadeOut (sprite) {\n    //   this.gamePreview.time.events.add(Phaser.Timer.SECOND * 1, function(){\n    //       this.gamePreview.add.tween(sprite).to( { alpha: 0 }, 800, Phaser.Easing.Linear.None, true);\n    //   }, this.gamePreview);\n    // }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vU2ltb25TYXlzLnZ1ZT84ZDgzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4QkE7QUFDQTtBQUNBOztBQUlBOzs7QUFDQTtVQUVBO1NBQ0E7O21CQUVBO3FCQUNBO2dCQUNBO3FCQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUE1Q0E7QUE2Q0E7WUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTttQ0FDQTtBQUNBO1lBQ0E7ZUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7cUJBR0EsQ0FDQTtvQkFDQTtpQkFDQTs7ZUFFQTtlQUNBO2tCQUdBO0FBTEE7OzhDQU1BO21FQUNBO29CQUNBO0FBQ0E7QUFDQTtBQUNBO2tDQUNBO0FBRUE7O3FCQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFHQTs7O0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUVBOztBQUVBOztBQUVBOztBQUNBO0FBR0E7OztBQUlBOzs7QUFHQTs7O0FBRUE7O0FBQ0E7QUFFQTs7QUFHQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFFQTs7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUVBOztBQUlBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTs7O0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTs7O0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTs7O0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQWxMQTtBQWxFQSIsImZpbGUiOiI1NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPHRib2R5PlxuICAgIDx0cj5cbiAgICAgIDx0aCBzY29wZT1cInJvd1wiPlxuICAgICAgICA8bGFiZWwgZm9yPVwibWluaWdhbWVfc2V0dGluZ3NcIj5TZXR0aW5nczwvbGFiZWw+XG4gICAgICA8L3RoPiAgICAgICAgICAgICAgICAgIFxuICAgICAgPHRkPlxuICAgICAgU2ltb24gc3BlY2lmaWMgc2V0dGluZ3Mgd2lsbCBnbyBoZXJlLlxuICAgICAgPGJ1dHRvbiB2LW9uOmNsaWNrPVwibWVkaWFVcGxvYWRlclwiPlVwbG9hZCBhbiBJbWFnZTwvYnV0dG9uPlxuICAgICAgPGltZyB2LWlmPVwiYmFja2dyb3VuZEltZ1wiIHYtYmluZDpzcmM9XCJiYWNrZ3JvdW5kSW1nXCIgLz5cbiAgICAgIDwvdGQ+XG4gICAgPC90cj5cbiAgICA8dHI+XG4gICAgICA8dGg+PC90aD5cbiAgICAgIDx0ZCBjbGFzcz1cInNhdmVcIj5cbiAgICAgICAgPGxvYWRpbmctc3Bpbm5lciB2LWlmPVwiZm9ybVN1Ym1pdHRlZFwiPjwvbG9hZGluZy1zcGlubmVyPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbi1zdWJtaXRcIiB0eXBlPVwic3VibWl0XCIgOmRpc2FibGVkPVwic2F2ZVRleHQhPSdTYXZlIE1pbmlnYW1lJ1wiIHYtb246Y2xpY2s9XCIkZW1pdCgnc2F2ZScpO1wiIHYtZWxzZT57eyBzYXZlVGV4dCB9fTwvYnV0dG9uPlxuICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICAgIDx0cj5cbiAgICA8dGQ+XG4gICAgICA8ZGl2IGlkPVwiZ2FtZURpdlwiPjwvZGl2PlxuICAgIDwvdGQ+XG4gICAgPC90cj5cbiAgICA8Y3JvcC1ib3ggdi1pZj1cImJhY2tncm91bmRJbWdcIiB2LWJpbmQ6Ym94LXR5cGU9XCInY3JvcEltYWdlJ1wiIHYtb246Y2xvc2U9XCJiYWNrZ3JvdW5kSW1nPW51bGw7XCIgdi1iaW5kOmdhbWU9XCIkcm91dGUucGFyYW1zLmlkXCIgdi1iaW5kOmltYWdlPVwiYmFja2dyb3VuZEltZ1wiPjwvY3JvcC1ib3g+XG4gIDwvdGJvZHk+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuXG4vL2ltcG9ydCBTaW1vblNheXMgZnJvbSAnLi4vLi4vLi4vZ2FtZXMvc2ltb24tc2F5cyc7XG4vL2ltcG9ydCBQbGF5U2VhcmNoIGZyb20gJy4uLy4uLy4uL2dhbWVzL1V0aWxzJztcbi8vaW1wb3J0IFNpbW9uU2F5cyBmcm9tICcuLi8uLi8uLi9nYW1lcy9TaW1vblNheXMnO1xuXG4vKlxuRm9yIGVhY2ggaW1hZ2UsIGNoZWNrIHRoZSByYXRpby4gSWYgaXQgd29ya3MsIHNraXAgdGhlIGluZm8gYm94LiBJZiBpdCBkb2Vzbid0LCBsb2FkIHRoZSBpbmZvIGJveCB3aXRoIGNyb3BwZXIgYW5kIGNyZWF0ZSBhIHBsYWNlaG9sZGVyIGNhbnZhcyB0byBkZW1vIHRoZSBwbGFjZW1lbnQgKG11c3QgYmUgdGFpbG9yZWQgZm9yIGVhY2ggZ2FtZSkuXG4qL1xuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczogWydtaW5pZ2FtZURhdGEnXSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdhbWVQcmV2aWV3OiBudWxsLFxuICAgICAgZm9ybVN1Ym1pdHRlZDogZmFsc2UsXG4gICAgICBzYXZlVGV4dDogJ1NhdmUgTWluaWdhbWUnLFxuICAgICAgYmFja2dyb3VuZEltZzogbnVsbCxcblxuICAgICAgLy8gc2ltb246IFtdLFxuICAgICAgLy8gcElIb2xkOiBudWxsLFxuICAgICAgLy8gcElQb3M6IDAsXG4gICAgICAvLyB0aW1lQ29uc3RhbnQ6IG51bGwsXG4gICAgICAvLyB0aW1lcjogMCxcbiAgICAgIC8vIG11c2ljOiBbXSxcbiAgICAgIC8vIHdoaXRlVXA6IHt9LFxuICAgICAgLy8gd2hpdGVJOiBudWxsLFxuICAgICAgLy8gcmVkVXA6IHt9LFxuICAgICAgLy8gcmVkSTogbnVsbCxcbiAgICAgIC8vIGJsdWVVcDoge30sXG4gICAgICAvLyBibHVlSTogbnVsbCxcbiAgICAgIC8vIGJ1dHRvbjE6IHt9LFxuICAgICAgLy8gYnV0dG9uMjoge30sXG4gICAgICAvLyBidXR0b24zOiB7fSxcbiAgICAgIC8vIGJ1dHRvbjQ6IHt9LFxuICAgICAgLy8gYnV0dG9uNToge30sXG4gICAgICAvLyBidXR0b242OiB7fSxcbiAgICAgIC8vIGJ1dHRvbkdyb3VwZXI6IG51bGwsXG4gICAgICAvLyBzdGFydEJ1dHRvbjogbnVsbCxcbiAgICAgIC8vIHNpbW9uQnV0dG9uOiBudWxsLFxuICAgICAgLy8gYmtnOiBudWxsLFxuICAgICAgLy8gcGljdHVyZTogbnVsbCxcbiAgICAgIC8vIHNlcXVlbmNlTG9vcDogbnVsbCxcbiAgICAgIC8vIGZ4OiBudWxsLFxuICAgICAgLy8gc2VxdWVuY2VQb3M6IDAsXG4gICAgICAvLyBsaXN0UG9zOiAwLFxuICAgICAgLy8gbWVudUJveDogW10sXG4gICAgICAvLyB2aW9saW5JbnRybzogbnVsbCxcbiAgICAgIC8vIHBpYW5vSW50cm86IG51bGwsXG4gICAgICAvLyB3cm9uZzogbnVsbCxcbiAgICAgIC8vIHBsYXllckNob2ljZTogbnVsbCxcbiAgICAgIC8vIGJhY2tncm91bmQ6IG51bGwsXG4gICAgICAvLyBwbGF5ZXI6IG51bGwsXG4gICAgICAvLyBzdGFydEJ1dHRvbjogbnVsbCxcbiAgICAgIC8vIG1lbnVCdXR0b246IG51bGwsXG4gICAgICAvLyBtZW51X0hvbWU6IG51bGwsXG4gICAgICAvLyBtZW51X1Jlc3VtZTogbnVsbFxuICAgIH1cbiAgfSxcbiAgY3JlYXRlZCAoKSB7XG4gICAgLy93aW5kb3cuUElYSSA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waGFzZXIvYnVpbGQvY3VzdG9tL3BpeGknKTtcbiAgICAvL3dpbmRvdy5wMiA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waGFzZXIvYnVpbGQvY3VzdG9tL3AyJyk7XG4gICAgLy93aW5kb3cuUGhhc2VyID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BoYXNlci9idWlsZC9jdXN0b20vcGhhc2VyLXNwbGl0Jyk7XG4gICAgLy92YXIgUGxheVNlYXJjaCA9IHJlcXVpcmUoJy4uLy4uLy4uL2dhbWVzL1V0aWxzJyk7XG4gICAgLy9QbGF5U2VhcmNoLlNpbW9uU2F5cyA9IHJlcXVpcmUoJy4uLy4uLy4uL2dhbWVzL1NpbW9uU2F5cycpO1xuICAgIC8vY29uc29sZS5sb2coUGxheVNlYXJjaCk7XG4gICAgdGhpcy5taW5pZ2FtZURhdGEuYWN0aXZlR2FtZSA9ICdzaW1vbic7XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAvLyB0aGlzLmdhbWVQcmV2aWV3ID0gbmV3IFBoYXNlci5HYW1lKDgwMCwgNjAwLCBQaGFzZXIuQVVUTywgJ2dhbWVEaXYnLCB7IFxuICAgIC8vICAgICBwcmVsb2FkOiBzZWxmLnByZWxvYWQsXG4gICAgLy8gICAgIGNyZWF0ZTogc2VsZi5jcmVhdGUsXG4gICAgLy8gICAgIHVwZGF0ZTogc2VsZi51cGRhdGUsXG4gICAgLy8gfSk7XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBzdWJtaXRNaW5pZ2FtZSgpIHtcblxuICAgIH0sXG4gICAgbWVkaWFVcGxvYWRlcigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBtZWRpYV91cGxvYWRlciA9IHdwLm1lZGlhKHtcbiAgICAgICAgICBmcmFtZTogICAgXCJwb3N0XCIsIFxuICAgICAgICAgIHN0YXRlOiAgICBcImluc2VydFwiLCBcbiAgICAgICAgICBtdWx0aXBsZTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICBtZWRpYV91cGxvYWRlci5vbihcImluc2VydFwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgIHZhciBqc29uID0gbWVkaWFfdXBsb2FkZXIuc3RhdGUoKS5nZXQoXCJzZWxlY3Rpb25cIikuZmlyc3QoKS50b0pTT04oKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhqc29uKTtcbiAgICAgICAgICAvLyB2YXIgaW1hZ2VfdXJsID0ganNvbi51cmw7XG4gICAgICAgICAgLy8gdmFyIGltYWdlX2NhcHRpb24gPSBqc29uLmNhcHRpb247XG4gICAgICAgICAgLy8gdmFyIGltYWdlX3RpdGxlID0ganNvbi50aXRsZTtcbiAgICAgICAgICBzZWxmLmJhY2tncm91bmRJbWcgPSBqc29uLnVybDtcbiAgICAgIH0pO1xuXG4gICAgICBtZWRpYV91cGxvYWRlci5vcGVuKCk7XG4gICAgfVxuICAgIC8vIHByZWxvYWQgKCkge1xuICAgIC8vICAgY29uc29sZS5sb2codGhpcy5nYW1lUHJldmlldyk7XG4gICAgLy8gICB0aGlzLmdhbWVQcmV2aWV3LmxvYWQuc3ByaXRlc2hlZXQoJ2J1dHRvbnMnLCAnL2dhbWVzL3NpbW9uL2ltYWdlcy9idXR0b25zXzE1MHgxMDAucG5nJywgMTUwLCAxMDApOyBcbiAgXG4gICAgLy8gICAvLyEtLS0tLS0tLU1FTU9SWSBJTUFHRVMgLS0tIFRFQUNIRVIgSU5QVVRcbiAgICAvLyAgIHRoaXMuZ2FtZVByZXZpZXcubG9hZC5pbWFnZSgnbWVtMCcsICcvZ2FtZXMvc2ltb24vaW1hZ2VzL21lbW9yeTAuanBnJyk7ICAgIFxuICAgIC8vICAgdGhpcy5nYW1lUHJldmlldy5sb2FkLmltYWdlKCdtZW0xJywgJy9nYW1lcy9zaW1vbi9pbWFnZXMvbWVtb3J5MS5qcGcnKTtcbiAgICAgIFxuICAgIC8vICAgLy8hLS0tLS0tLS0tQkFDS0dST1VORCBBTkQgQVZBVEFSIElNQUdFXG4gICAgLy8gICB0aGlzLmdhbWVQcmV2aWV3LmxvYWQuaW1hZ2UoJ2JhY2tncm91bmQnLCAnL2dhbWVzL3NpbW9uL2ltYWdlcy9jbG91ZHNfZ2VuZXJpYy5qcGcnKTtcbiAgICAvLyAgIHRoaXMuZ2FtZVByZXZpZXcubG9hZC5pbWFnZSgncGxheWVyJywgJy9nYW1lcy9zaW1vbi9pbWFnZXMvcGxheWVyX2NpcmNsZS5wbmcnKTsgLy9wbGFjZWQgb24gbGVmdCBoYW5kIHNpZGVcbiAgICAgIFxuICAgICAgXG4gICAgLy8gICB0aGlzLmdhbWVQcmV2aWV3LmxvYWQuc3ByaXRlc2hlZXQoJ21lbnUnLCAnL2dhbWVzL3NpbW9uL2ltYWdlcy9tZW51QnV0dG9ucy5wbmcnLCAyMDAsMTAwKTtcbiAgICAgIFxuICAgIC8vICAgLy9UT09UIFRPT1QgUFJFTE9BRCBUSEUgQVVESU8gSEVSRSAtLSBURUFDSEVSIElOUFVUP1xuICAgIC8vICAgdGhpcy5nYW1lUHJldmlldy5sb2FkLmF1ZGlvKCdzZngnLCAnL2dhbWVzL3NpbW9uL3NvdW5kcy9lZmdhYmMub2dnJyk7XG4gICAgLy8gICB0aGlzLmdhbWVQcmV2aWV3LmxvYWQuYXVkaW8oJ3Zpb2xpbkludHJvJywgJy9nYW1lcy9zaW1vbi9zb3VuZHMva3JldXR6ZXJfdmlvbGluSW50cm9fbG9vcC5vZ2cnKTtcbiAgICAvLyAgIHRoaXMuZ2FtZVByZXZpZXcubG9hZC5hdWRpbygncGlhbm9JbnRybycsICcvZ2FtZXMvc2ltb24vc291bmRzL2tyZXV0emVyX3BpYW5vX2ludHJvLm9nZycpO1xuICAgIC8vICAgdGhpcy5nYW1lUHJldmlldy5sb2FkLmF1ZGlvKCd3cm9uZycsICcvZ2FtZXMvc2ltb24vc291bmRzL3dyb25nLm9nZycpO1xuICAgIC8vIH0sXG4gICAgLy8gY3JlYXRlICgpIHtcblxuICAgIC8vICAgdGhpcy5zaW1vbiA9IFsgLy90aGVzZSBsaXN0cyBzZXQgdGhlIHBhdHRlcm4gZm9yIHNpbW9uLiBcbiAgICAvLyAgIC8vV2UnbGwgbmVlZCBhIHdheSB0byBhZGQgYW4gYXJyeSBvZiBudW1iZXJzXG4gICAgLy8gICAgIFsxLDIsNCwyLDFdLFxuICAgICAgICBcbiAgICAvLyAgICAgWzQsMSwxLDIsNSwxLDZdLFxuICAgICAgICBcbiAgICAvLyAgICAgWzBdXG5cbiAgICAvLyAgIF07XG4gICAgLy8gICB0aGlzLnRpbWVDb25zdGFudCA9IFBoYXNlci5UaW1lci5TRUNPTkQ7XG5cblxuICAgIC8vICAgdGhpcy5tZW51Qm94ID0gW107XG5cblxuICAgICAgXG4gICAgLy8gICAvL3RoaXMuY3JlYXRlQXVkaW8oKTtcbiAgICAgIFxuICAgICAgXG4gICAgLy8gICAvL2FkZCB0aGUgYmFja2dyb3VuZFxuICAgICAgXG4gICAgLy8gICB0aGlzLmJhY2tncm91bmQgPSB0aGlzLmdhbWVQcmV2aWV3LmFkZC5pbWFnZSgwLDAsICdiYWNrZ3JvdW5kJyk7XG4gICAgLy8gICB0aGlzLmJhY2tncm91bmQuc2NhbGUuc2V0VG8oMC43NSwwLjc1KTsgICBcbiAgICAgIFxuICAgIC8vICAgdGhpcy5wbGF5ZXIgPSB0aGlzLmdhbWVQcmV2aWV3LmFkZC5pbWFnZSgwLCB0aGlzLmdhbWVQcmV2aWV3LndvcmxkLmNlbnRlclksICdwbGF5ZXInKTtcbiAgICAgIFxuICAgICAgXG4gICAgLy8gICAvL2FsbCA2IGJ1dHRvbnNcbiAgICAvLyAgIHRoaXMuYnV0dG9uMSA9IHRoaXMuZHJhd1BsYXllck9wdGlvbnMoKHRoaXMuZ2FtZVByZXZpZXcud29ybGQud2lkdGgvMjQpLCB0aGlzLmdhbWVQcmV2aWV3LndvcmxkLmNlbnRlclkrMTUwLCAnYnV0dG9ucycsIDAsIDEpO1xuICAgIC8vICAgdGhpcy5idXR0b24xLnNjYWxlLnNldFRvKDAuNzUsMC43NSk7XG4gICAgLy8gICB0aGlzLmJ1dHRvbjEudmFsID0gMTtcbiAgICAvLyAgIC8vdGhpcy5idXR0b24xLnNmeCA9IHRoaXMuZ2FtZVByZXZpZXcuYWRkLmF1ZGlvKCdzZngnKTtcbiAgICAgIFxuICAgIC8vICAgdGhpcy5idXR0b24yID0gdGhpcy5kcmF3UGxheWVyT3B0aW9ucygodGhpcy5nYW1lUHJldmlldy53b3JsZC53aWR0aC8yNCkrMTIwLCB0aGlzLmdhbWVQcmV2aWV3LndvcmxkLmNlbnRlclkrMTUwLCAnYnV0dG9ucycsIDIsIDEpO1xuICAgIC8vICAgdGhpcy5idXR0b24yLnNjYWxlLnNldFRvKDAuNzUsMC43NSk7XG4gICAgLy8gICB0aGlzLmJ1dHRvbjIudmFsID0gMjtcbiAgICAgIFxuICAgIC8vICAgdGhpcy5idXR0b24zID0gdGhpcy5kcmF3UGxheWVyT3B0aW9ucygodGhpcy5nYW1lUHJldmlldy53b3JsZC53aWR0aC8yNCkrMjQwLCB0aGlzLmdhbWVQcmV2aWV3LndvcmxkLmNlbnRlclkrMTUwLCAnYnV0dG9ucycsIDQsIDEpO1xuICAgIC8vICAgdGhpcy5idXR0b24zLnNjYWxlLnNldFRvKDAuNzUsMC43NSk7XG4gICAgLy8gICB0aGlzLmJ1dHRvbjMudmFsID0gMztcbiAgICAgIFxuICAgIC8vICAgdGhpcy5idXR0b240ID0gdGhpcy5kcmF3UGxheWVyT3B0aW9ucygodGhpcy5nYW1lUHJldmlldy53b3JsZC53aWR0aC8yNCkrMzYwLCB0aGlzLmdhbWVQcmV2aWV3LndvcmxkLmNlbnRlclkrMTUwLCAnYnV0dG9ucycsIDYsIDEpO1xuICAgIC8vICAgdGhpcy5idXR0b240LnNjYWxlLnNldFRvKDAuNzUsMC43NSk7XG4gICAgLy8gICB0aGlzLmJ1dHRvbjQudmFsID0gNDtcbiAgICAgIFxuICAgIC8vICAgdGhpcy5idXR0b241ID0gdGhpcy5kcmF3UGxheWVyT3B0aW9ucygodGhpcy5nYW1lUHJldmlldy53b3JsZC53aWR0aC8yNCkrNDgwLCB0aGlzLmdhbWVQcmV2aWV3LndvcmxkLmNlbnRlclkrMTUwLCAnYnV0dG9ucycsIDgsIDEpO1xuICAgIC8vICAgdGhpcy5idXR0b241LnNjYWxlLnNldFRvKDAuNzUsMC43NSk7XG4gICAgLy8gICB0aGlzLmJ1dHRvbjUudmFsID0gNTtcbiAgICAgIFxuICAgIC8vICAgdGhpcy5idXR0b242ID0gdGhpcy5kcmF3UGxheWVyT3B0aW9ucygodGhpcy5nYW1lUHJldmlldy53b3JsZC53aWR0aC8yNCkrNjAwLCB0aGlzLmdhbWVQcmV2aWV3LndvcmxkLmNlbnRlclkrMTUwLCAnYnV0dG9ucycsIDEwLCAxKTtcbiAgICAvLyAgIHRoaXMuYnV0dG9uNi5zY2FsZS5zZXRUbygwLjc1LDAuNzUpO1xuICAgIC8vICAgdGhpcy5idXR0b242LnZhbCA9IDY7XG4gICAgICBcbiAgICAvLyAgIHRoaXMuYnV0dG9uR3JvdXBlciA9IFt0aGlzLmJ1dHRvbjEsIHRoaXMuYnV0dG9uMiwgdGhpcy5idXR0b24zLCB0aGlzLmJ1dHRvbjQsIHRoaXMuYnV0dG9uNSwgdGhpcy5idXR0b242XTsgLy9tYWtlIGl0IGVhc2llciB0byBhY2Nlc3NcblxuICAgICAgXG4gICAgICBcbiAgICAvLyAgIHRoaXMuc3RhcnRCdXR0b24gPSB0aGlzLmdhbWVQcmV2aWV3LmFkZC5idXR0b24odGhpcy5nYW1lUHJldmlldy53aWR0aC0xMCwgMTAsICdtZW51JywgdGhpcy5Mb29wRiwgdGhpcywxNCwxMiwxMyk7XG4gICAgLy8gICB0aGlzLnN0YXJ0QnV0dG9uLmFuY2hvci5zZXRUbygxLDApXG4gICAgLy8gICB0aGlzLnN0YXJ0QnV0dG9uLnNjYWxlLnNldFRvKDAuNSwgMC41KTtcbiAgICAvLyAgIHRoaXMubWVudUJ1dHRvbiA9IHRoaXMuZ2FtZVByZXZpZXcuYWRkLmJ1dHRvbig1LDUsJ21lbnUnLCB0aGlzLm1lbnVQcmVzcywgdGhpcywgMywxLDIpOyAvLyBob3Zlciwgc3RhdGljLCBwcmVzc1xuICAgIC8vICAgdGhpcy5tZW51QnV0dG9uLnNjYWxlLnNldFRvKDAuNSwgMC41KTtcbiAgICAgIFxuICAgICAgXG4gICAgLy8gICAvL3RoaXMubWVudUJveCA9IHRoaXMuY3JlYXRlUmVjdGFuZ2xlKHRoaXMuZ2FtZVByZXZpZXcud29ybGQuY2VudGVyWC0xNTAsIDEwMCwgMzAwLDMwMCwgMHhiNGIzYjMsIDB4MDAwMDAwKTtcbiAgICAvLyAgIHRoaXMubWVudV9Ib21lID0gdGhpcy5nYW1lUHJldmlldy5hZGQuYnV0dG9uKHRoaXMubWVudUJveC54KzUwLCB0aGlzLm1lbnVCb3gueSszNSwgJ21lbnUnLCB0aGlzLm1lbnVPcHRpb25zLCB0aGlzLCA1LDQsNik7XG4gICAgLy8gICB0aGlzLm1lbnVfSG9tZS5zY2FsZS5zZXRUbygxLDEpO1xuICAgIC8vICAgdGhpcy5tZW51X0hvbWUudmFsID0gXCJob21lXCI7XG4gICAgLy8gICB0aGlzLm1lbnVfUmVzdW1lID0gdGhpcy5nYW1lUHJldmlldy5hZGQuYnV0dG9uKHRoaXMubWVudUJveC54KzUwLCB0aGlzLm1lbnVCb3gueSsxNDUsICdtZW51JywgdGhpcy5tZW51T3B0aW9ucywgdGhpcywgOSw4LDEwKTtcbiAgICAvLyAgIHRoaXMubWVudV9SZXN1bWUuc2NhbGUuc2V0VG8oMSwxKTtcbiAgICAvLyAgIHRoaXMubWVudV9SZXN1bWUudmFsID0gXCJyZXN1bWVcIjtcbiAgICBcbiAgICAgIFxuICAgIC8vICAgdGhpcy5tZW51Qm94LnZpc2libGUgPSBmYWxzZTtcbiAgICAvLyAgIHRoaXMubWVudV9Ib21lLnZpc2libGUgPSBmYWxzZTtcbiAgICAvLyAgIHRoaXMubWVudV9SZXN1bWUudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICBcbiAgICAvLyAgICAgLyogRm9yY2UgcmVzaXplIHRvIHRyaWdnZXIgKi9cbiAgICAvLyAgLy8gdGhpcy5yZXNpemUodGhpcy5nYW1lUHJldmlldy53aWR0aCx0aGlzLmdhbWVQcmV2aWV3LmhlaWdodCk7XG4gICAgLy8gfSxcbiAgICAvLyB1cGRhdGUgKCkge1xuXG4gICAgLy8gfSxcbiAgICAvLyBjcmVhdGVBdWRpbyAoKSB7XG4gICAgLy8gICB0aGlzLmZ4ID0gdGhpcy5nYW1lUHJldmlldy5hZGQuYXVkaW8oJ3NmeCcpO1xuICAgIC8vICAgdGhpcy5meC5hbGxvd011bHRpcGxlID0gdHJ1ZTtcbiAgICAgIFxuICAgIC8vICAgdGhpcy5meC5hZGRNYXJrZXIoJzEnLCAxLCAyLjApOyAgICAvL2Ugbm90ZVxuICAgIC8vICAgdGhpcy5meC5hZGRNYXJrZXIoJzInLCA0LjIsMi4wKTsgICAvL2Ygbm90ZVxuICAgIC8vICAgdGhpcy5meC5hZGRNYXJrZXIoJzMnLCA3LjUsIDIuMCk7ICAvL2cgbm90ZVxuICAgIC8vICAgdGhpcy5meC5hZGRNYXJrZXIoJzQnLCAxMC43LCAyLjApOyAvL2Egbm90ZVxuICAgIC8vICAgdGhpcy5meC5hZGRNYXJrZXIoJzUnLCAxMy41LCAxLjUpOyAvL2Igbm90ZVxuICAgIC8vICAgdGhpcy5meC5hZGRNYXJrZXIoJzYnLCAxNiwgMS43KTsgICAvL2Mgbm90ZVxuICAgICAgXG4gICAgICBcbiAgICAvLyAgIHRoaXMudmlvbGluSW50cm8gPSB0aGlzLmdhbWVQcmV2aWV3LmFkZC5hdWRpbygndmlvbGluSW50cm8nKTsgICAgXG4gICAgLy8gICB0aGlzLnBpYW5vSW50cm8gPSB0aGlzLmdhbWVQcmV2aWV3LmFkZC5hdWRpbygncGlhbm9JbnRybycpOyAgICBcbiAgICAvLyAgIHRoaXMubXVzaWMgPSBbdGhpcy52aW9saW5JbnRybywgdGhpcy5waWFub0ludHJvXTtcbiAgICAgIFxuICAgIC8vICAgdGhpcy53cm9uZyA9IHRoaXMuZ2FtZS5hZGQuYXVkaW8oJ3dyb25nJyk7XG4gICAgLy8gICB0aGlzLndyb25nLnZvbHVtZSA9IDAuNTsgICBcbiAgICAvLyB9LFxuICAgIC8vIGRyYXdQbGF5ZXJPcHRpb25zICh4LCB5LCBzcHJpdGUsIGtleSwgc2NhbGUpIHtcbiAgICAvLyAgIHZhciBvYmogPSB0aGlzLmdhbWVQcmV2aWV3LmFkZC5zcHJpdGUoeCwgeSwgc3ByaXRlKTtcbiAgICAvLyAgIG9iai5mcmFtZSA9IGtleTtcbiAgICAvLyAgIG9iai5zY2FsZS5zZXQoc2NhbGUpO1xuICAgIC8vICAgb2JqLmlucHV0RW5hYmxlZCA9IHRydWU7XG4gICAgLy8gICAvL29iai5ldmVudHMub25JbnB1dERvd24uYWRkKHRoaXMucGxheWVyQ2hvaWNlLHRoaXMuZ2FtZVByZXZpZXcpO1xuICAgIC8vICAgcmV0dXJuIG9iajtcbiAgICAvLyB9LFxuICAgIC8vIExvb3BGICgpIHtcbiAgICAvLyAgICAgICAgIC8vaWYgeW91J3JlIGluIHRoZSBtaWRkbGUgb2YgY2xpY2tpbmcgcGxheWVyIGJ1dHRvbnMgcHJlc3Npbmcgc3RhcnQgYWdhaW4gd2lsbCByZXNldFxuICAgIC8vICAgdGhpcy5wSVBvcyA9IDA7IC8vcmVzZXQgb3VyIHBsYXllciBpbnB1dCBwb3NpdGlvblxuICAgIC8vICAgdGhpcy5saXN0UG9zID0gMDsgLy9yZXNldCBvdXIgc2VxdWVuY2UgbGlzdCBwb3NpdGlvbiAgICAgIFxuICAgICAgXG4gICAgICBcbiAgICAvLyAgIGlmKHRoaXMucGljdHVyZSAhPSBudWxsKXsvL2ZvciB0aGUgc3RhcnQgc2luY2Ugd2UgaGF2ZW4ndCBkZWZpbmVkIG91ciBwaG90by5cbiAgICAvLyAgICAgICB0aGlzLmZhZGVPdXQodGhpcy5waWN0dXJlKTtcbiAgICAvLyAgIH1cbiAgICAgIFxuICAgIC8vICAgaWYodGhpcy5zZXF1ZW5jZVBvcyA8IHRoaXMuc2ltb24ubGVuZ3RoKXtcbiAgICAvLyAgICAgICB0aGlzLnNlcXVlbmNlTG9vcCA9IHRoaXMuZ2FtZVByZXZpZXcudGltZS5ldmVudHMubG9vcChQaGFzZXIuVGltZXIuU0VDT05ELCB0aGlzLnVwZGF0ZVNlcXVlbmNlLCB0aGlzLmdhbWVQcmV2aWV3KTtcbiAgICAvLyAgIH1cbiAgICAvLyAgIGlmKHRoaXMuc2VxdWVuY2VQb3MgPT09IHRoaXMuc2ltb24ubGVuZ3RoIC0xKXtcbiAgICAvLyAgICAgICB0aGlzLnNlcXVlbmNlUG9zID0gMDtcbiAgICAvLyAgIH1cbiAgICAvLyB9LFxuICAgIC8vIGZhZGVPdXQgKHNwcml0ZSkge1xuICAgIC8vICAgdGhpcy5nYW1lUHJldmlldy50aW1lLmV2ZW50cy5hZGQoUGhhc2VyLlRpbWVyLlNFQ09ORCAqIDEsIGZ1bmN0aW9uKCl7XG4gICAgLy8gICAgICAgdGhpcy5nYW1lUHJldmlldy5hZGQudHdlZW4oc3ByaXRlKS50byggeyBhbHBoYTogMCB9LCA4MDAsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpO1xuICAgIC8vICAgfSwgdGhpcy5nYW1lUHJldmlldyk7XG4gICAgLy8gfVxuICB9XG59XG48L3NjcmlwdD5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gU2ltb25TYXlzLnZ1ZT81NGY2NTlhOCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data() {\n    return {\n      title: 'PlaySearch',\n      loading: false,\n      error: null,\n      gameType: '',\n      drag: false,\n      formSubmitted: false,\n      saveText: 'Save Game',\n      minigameOptions: []\n    };\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vVG9wUnVubmVyLnZ1ZT8zMjY2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCQTtBQUNBO1NBRUE7O2FBRUE7ZUFDQTthQUNBO2dCQUNBO1lBQ0E7cUJBQ0E7Z0JBQ0E7dUJBRUE7QUFUQTtBQVVBO0FBWkEiLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG48dGJvZHk+XG4gIDx0cj5cbiAgICA8dGggc2NvcGU9XCJyb3dcIj5cbiAgICAgIDxsYWJlbCBmb3I9XCJtaW5pZ2FtZV9zZXR0aW5nc1wiPlNldHRpbmdzPC9sYWJlbD5cbiAgICA8L3RoPiAgICAgICAgICAgICAgICAgIFxuICAgIDx0ZD5cbiAgICBUb3AtZG93biBydW5uZXIgc3BlY2lmaWMgc2V0dGluZ3Mgd2lsbCBnbyBoZXJlLlxuICAgIDwvdGQ+XG4gIDwvdHI+XG4gIDx0cj5cbiAgICA8dGg+PC90aD5cbiAgICA8dGQgY2xhc3M9XCJzYXZlXCI+XG4gICAgICA8bG9hZGluZy1zcGlubmVyIHYtaWY9XCJmb3JtU3VibWl0dGVkXCI+PC9sb2FkaW5nLXNwaW5uZXI+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbi1zdWJtaXRcIiB0eXBlPVwic3VibWl0XCIgOmRpc2FibGVkPVwic2F2ZVRleHQhPSdTYXZlIEdhbWUnXCIgdi1lbHNlPnt7IHNhdmVUZXh0IH19PC9idXR0b24+XG4gICAgPC90ZD5cbiAgPC90cj5cbjwvdGJvZHk+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IEF4aW9zIGZyb20gJ2F4aW9zJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGl0bGU6ICdQbGF5U2VhcmNoJyxcbiAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgZXJyb3I6IG51bGwsXG4gICAgICBnYW1lVHlwZTogJycsXG4gICAgICBkcmFnOiBmYWxzZSxcbiAgICAgIGZvcm1TdWJtaXR0ZWQ6IGZhbHNlLFxuICAgICAgc2F2ZVRleHQ6ICdTYXZlIEdhbWUnLFxuICAgICAgbWluaWdhbWVPcHRpb25zOiBbXVxuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFRvcFJ1bm5lci52dWU/NDRlNDkxOGMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lockr__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lockr___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lockr__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vendor_vue_js__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vendor_vue_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__vendor_vue_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vee_validate__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vee_validate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_vee_validate__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_vue_router__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__MainApp_vue__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__MainApp_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__MainApp_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__pages_Home_vue__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__pages_Home_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__pages_Home_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__pages_GameSingle_vue__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__pages_GameSingle_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__pages_GameSingle_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__pages_MinigameSingle_vue__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__pages_MinigameSingle_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__pages_MinigameSingle_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__pages_components_InfoBox_vue__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__pages_components_InfoBox_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__pages_components_InfoBox_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__pages_components_CropBox_vue__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__pages_components_CropBox_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10__pages_components_CropBox_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__pages_components_DialogBox_vue__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__pages_components_DialogBox_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11__pages_components_DialogBox_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__pages_components_WP_WYSIWYG_vue__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__pages_components_WP_WYSIWYG_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12__pages_components_WP_WYSIWYG_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__pages_components_CodeBox_vue__ = __webpack_require__(20);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__pages_components_CodeBox_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13__pages_components_CodeBox_vue__);\n\n__WEBPACK_IMPORTED_MODULE_0_axios___default.a.defaults.headers.common['X-WP-Nonce'] = wpApiSettings.nonce;\n// Axios.defaults.maxContentLength = 5000\n\n\n// import Vue from 'vue'\n\n// import Lodash from 'lodash'\n\n\n\n\n\n//Minigame list can be a page where we describe the various types of minigames. \n//import MinigameList from './pages/MinigameList.vue'\n\n\n// Components/Partials\n\n\n\n\n\n\nconst config = {\n  errorBagName: 'errors', // change if property conflicts.\n  fieldsBagName: 'fields',\n  delay: 0,\n  locale: 'en',\n  dictionary: null,\n  strict: true,\n  enableAutoClasses: false,\n  classNames: {\n    touched: 'touched', // the control has been blurred\n    untouched: 'untouched', // the control hasn't been blurred\n    valid: 'valid', // model is valid\n    invalid: 'invalid', // model is invalid\n    pristine: 'pristine', // control has not been interacted with\n    dirty: 'dirty' // control has been interacted with\n  }\n};\n\n__WEBPACK_IMPORTED_MODULE_2__vendor_vue_js___default.a.use(__WEBPACK_IMPORTED_MODULE_3_vee_validate___default.a, config);\n\n__WEBPACK_IMPORTED_MODULE_2__vendor_vue_js___default.a.use(__WEBPACK_IMPORTED_MODULE_4_vue_router__[\"a\" /* default */]);\n\nconst router = new __WEBPACK_IMPORTED_MODULE_4_vue_router__[\"a\" /* default */]({\n  mode: 'hash',\n  base: '/wp-admin/admin.php',\n  routes: [{\n    path: '/',\n    name: 'home',\n    component: __WEBPACK_IMPORTED_MODULE_6__pages_Home_vue___default.a\n  }, {\n    path: '/game/:id',\n    name: 'single-game',\n    component: __WEBPACK_IMPORTED_MODULE_7__pages_GameSingle_vue___default.a\n  },\n  // {\n  //   path: '/game/:id/minigames',\n  //   name: 'minigames-list',\n  //   component: MinigameList\n  // },\n  {\n    path: '/game/:id/minigame/:mid',\n    name: 'single-minigame',\n    component: __WEBPACK_IMPORTED_MODULE_8__pages_MinigameSingle_vue___default.a\n  }, {\n    path: '*',\n    redirect: '/'\n  }]\n});\n\n__WEBPACK_IMPORTED_MODULE_2__vendor_vue_js___default.a.component('loading-spinner', {\n  template: '<div class=\"spin-block\"><div class=\"rect1\"></div><div class=\"rect2\"></div><div class=\"rect3\"></div><div class=\"rect4\"></div><div class=\"rect5\"></div></div>'\n});\n__WEBPACK_IMPORTED_MODULE_2__vendor_vue_js___default.a.component('dialog-box', __WEBPACK_IMPORTED_MODULE_11__pages_components_DialogBox_vue___default.a);\n__WEBPACK_IMPORTED_MODULE_2__vendor_vue_js___default.a.component('info-box', __WEBPACK_IMPORTED_MODULE_9__pages_components_InfoBox_vue___default.a);\n__WEBPACK_IMPORTED_MODULE_2__vendor_vue_js___default.a.component('crop-box', __WEBPACK_IMPORTED_MODULE_10__pages_components_CropBox_vue___default.a);\n__WEBPACK_IMPORTED_MODULE_2__vendor_vue_js___default.a.component('wysiwyg', __WEBPACK_IMPORTED_MODULE_12__pages_components_WP_WYSIWYG_vue___default.a);\n__WEBPACK_IMPORTED_MODULE_2__vendor_vue_js___default.a.component('codebox', __WEBPACK_IMPORTED_MODULE_13__pages_components_CodeBox_vue___default.a\n\n//import 'prismjs'\n//import 'prismjs/plugins/line-numbers/prism-line-numbers.js'\n//import 'prismjs/themes/prism.css'\n\n//import Prism from 'vue-prism-component'\n//Vue.component('prism', Prism )\n\n// 4. Create and mount the root instance.\n// Make sure to inject the router with the router option to make the\n// whole app router-aware.\n/* isChanged makes */\n// var MGB_isChanged = false;\n// router.beforeEach(function (to, from, next) {\n//     // this route requires auth, check if logged in\n//     // if not, redirect to login page.\n//     // ?next='+to.path can be used to pass redirect value\n//     if(MGB_isChanged==true){\n//        if (confirm(\"You have unsaved changes. If you wish to save, click 'Cancel' and save first before proceeding.\") == true) {\n//         next();\n//       }      \n//     }else{\n//       next();\n//     }  \n// });\n\n);const app = new __WEBPACK_IMPORTED_MODULE_2__vendor_vue_js___default.a({\n  router,\n  render: h => h(__WEBPACK_IMPORTED_MODULE_5__MainApp_vue___default.a)\n}).$mount('#maestro-app');\n\nconsole.log('Welcome!');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi1zcmMuanM/MTc0ZSJdLCJuYW1lcyI6WyJBeGlvcyIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsIndwQXBpU2V0dGluZ3MiLCJub25jZSIsImNvbmZpZyIsImVycm9yQmFnTmFtZSIsImZpZWxkc0JhZ05hbWUiLCJkZWxheSIsImxvY2FsZSIsImRpY3Rpb25hcnkiLCJzdHJpY3QiLCJlbmFibGVBdXRvQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJ0b3VjaGVkIiwidW50b3VjaGVkIiwidmFsaWQiLCJpbnZhbGlkIiwicHJpc3RpbmUiLCJkaXJ0eSIsIlZ1ZSIsInVzZSIsInJvdXRlciIsIm1vZGUiLCJiYXNlIiwicm91dGVzIiwicGF0aCIsIm5hbWUiLCJjb21wb25lbnQiLCJIb21lIiwiR2FtZVNpbmdsZSIsIk1pbmlnYW1lU2luZ2xlIiwicmVkaXJlY3QiLCJ0ZW1wbGF0ZSIsIkNvZGVCb3giLCJhcHAiLCJyZW5kZXIiLCJoIiwiJG1vdW50IiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0EsNkNBQUFBLENBQU1DLFFBQU4sQ0FBZUMsT0FBZixDQUF1QkMsTUFBdkIsQ0FBOEIsWUFBOUIsSUFBOENDLGNBQWNDLEtBQTVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQyxTQUFTO0FBQ2JDLGdCQUFjLFFBREQsRUFDVztBQUN4QkMsaUJBQWUsUUFGRjtBQUdiQyxTQUFPLENBSE07QUFJYkMsVUFBUSxJQUpLO0FBS2JDLGNBQVksSUFMQztBQU1iQyxVQUFRLElBTks7QUFPYkMscUJBQW1CLEtBUE47QUFRYkMsY0FBWTtBQUNWQyxhQUFTLFNBREMsRUFDVTtBQUNwQkMsZUFBVyxXQUZELEVBRWM7QUFDeEJDLFdBQU8sT0FIRyxFQUdNO0FBQ2hCQyxhQUFTLFNBSkMsRUFJVTtBQUNwQkMsY0FBVSxVQUxBLEVBS1k7QUFDdEJDLFdBQU8sT0FORyxDQU1LO0FBTkw7QUFSQyxDQUFmOztBQWtCQSxzREFBQUMsQ0FBSUMsR0FBSixDQUFRLG9EQUFSLEVBQXFCaEIsTUFBckI7O0FBRUEsc0RBQUFlLENBQUlDLEdBQUosQ0FBUSwyREFBUjs7QUFFQSxNQUFNQyxTQUFTLElBQUksMkRBQUosQ0FBYztBQUMzQkMsUUFBTSxNQURxQjtBQUUzQkMsUUFBTSxxQkFGcUI7QUFHM0JDLFVBQVEsQ0FDTjtBQUNFQyxVQUFNLEdBRFI7QUFFRUMsVUFBTSxNQUZSO0FBR0VDLGVBQVcsdURBQUFDO0FBSGIsR0FETSxFQU1OO0FBQ0VILFVBQU0sV0FEUjtBQUVFQyxVQUFNLGFBRlI7QUFHRUMsZUFBVyw2REFBQUU7QUFIYixHQU5NO0FBV047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0VKLFVBQU0seUJBRFI7QUFFRUMsVUFBTSxpQkFGUjtBQUdFQyxlQUFXLGlFQUFBRztBQUhiLEdBaEJNLEVBcUJOO0FBQ0VMLFVBQU0sR0FEUjtBQUVFTSxjQUFVO0FBRlosR0FyQk07QUFIbUIsQ0FBZCxDQUFmOztBQStCQSxzREFBQVosQ0FBSVEsU0FBSixDQUFjLGlCQUFkLEVBQWlDO0FBQy9CSyxZQUFVO0FBRHFCLENBQWpDO0FBR0Esc0RBQUFiLENBQUlRLFNBQUosQ0FBYyxZQUFkLEVBQTRCLHdFQUE1QjtBQUNBLHNEQUFBUixDQUFJUSxTQUFKLENBQWMsVUFBZCxFQUEwQixxRUFBMUI7QUFDQSxzREFBQVIsQ0FBSVEsU0FBSixDQUFjLFVBQWQsRUFBMEIsc0VBQTFCO0FBQ0Esc0RBQUFSLENBQUlRLFNBQUosQ0FBYyxTQUFkLEVBQXlCLHlFQUF6QjtBQUNBLHNEQUFBUixDQUFJUSxTQUFKLENBQWMsU0FBZCxFQUF5QixzRUFBQU07O0FBRXpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBekJBLEVBMkJBLE1BQU1DLE1BQU0sSUFBSSxzREFBSixDQUFRO0FBQ2xCYixRQURrQjtBQUVsQmMsVUFBUUMsS0FBS0EsRUFBRSxvREFBRjtBQUZLLENBQVIsRUFHVEMsTUFIUyxDQUdGLGNBSEUsQ0FBWjs7QUFLQUMsUUFBUUMsR0FBUixDQUFZLFVBQVoiLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXhpb3MgZnJvbSAnYXhpb3MnXG5BeGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1XUC1Ob25jZSddID0gd3BBcGlTZXR0aW5ncy5ub25jZVxuLy8gQXhpb3MuZGVmYXVsdHMubWF4Q29udGVudExlbmd0aCA9IDUwMDBcbmltcG9ydCBMb2NrciBmcm9tICdsb2NrcidcbmltcG9ydCBWdWUgZnJvbSAnLi4vdmVuZG9yL3Z1ZS5qcydcbi8vIGltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IFZlZVZhbGlkYXRlIGZyb20gJ3ZlZS12YWxpZGF0ZSdcbi8vIGltcG9ydCBMb2Rhc2ggZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IFZ1ZVJvdXRlciBmcm9tICd2dWUtcm91dGVyJ1xuaW1wb3J0IEFwcCBmcm9tICcuL01haW5BcHAudnVlJ1xuaW1wb3J0IEhvbWUgZnJvbSAnLi9wYWdlcy9Ib21lLnZ1ZSdcbmltcG9ydCBHYW1lU2luZ2xlIGZyb20gJy4vcGFnZXMvR2FtZVNpbmdsZS52dWUnXG5cbi8vTWluaWdhbWUgbGlzdCBjYW4gYmUgYSBwYWdlIHdoZXJlIHdlIGRlc2NyaWJlIHRoZSB2YXJpb3VzIHR5cGVzIG9mIG1pbmlnYW1lcy4gXG4vL2ltcG9ydCBNaW5pZ2FtZUxpc3QgZnJvbSAnLi9wYWdlcy9NaW5pZ2FtZUxpc3QudnVlJ1xuaW1wb3J0IE1pbmlnYW1lU2luZ2xlIGZyb20gJy4vcGFnZXMvTWluaWdhbWVTaW5nbGUudnVlJ1xuXG4vLyBDb21wb25lbnRzL1BhcnRpYWxzXG5pbXBvcnQgSW5mb0JveCBmcm9tICcuL3BhZ2VzL2NvbXBvbmVudHMvSW5mb0JveC52dWUnXG5pbXBvcnQgQ3JvcEJveCBmcm9tICcuL3BhZ2VzL2NvbXBvbmVudHMvQ3JvcEJveC52dWUnXG5pbXBvcnQgRGlhbG9nQm94IGZyb20gJy4vcGFnZXMvY29tcG9uZW50cy9EaWFsb2dCb3gudnVlJ1xuaW1wb3J0IFdZU0lXWUcgZnJvbSAnLi9wYWdlcy9jb21wb25lbnRzL1dQLVdZU0lXWUcudnVlJ1xuaW1wb3J0IENvZGVCb3ggZnJvbSAnLi9wYWdlcy9jb21wb25lbnRzL0NvZGVCb3gudnVlJ1xuXG5jb25zdCBjb25maWcgPSB7XG4gIGVycm9yQmFnTmFtZTogJ2Vycm9ycycsIC8vIGNoYW5nZSBpZiBwcm9wZXJ0eSBjb25mbGljdHMuXG4gIGZpZWxkc0JhZ05hbWU6ICdmaWVsZHMnLFxuICBkZWxheTogMCxcbiAgbG9jYWxlOiAnZW4nLFxuICBkaWN0aW9uYXJ5OiBudWxsLFxuICBzdHJpY3Q6IHRydWUsXG4gIGVuYWJsZUF1dG9DbGFzc2VzOiBmYWxzZSxcbiAgY2xhc3NOYW1lczoge1xuICAgIHRvdWNoZWQ6ICd0b3VjaGVkJywgLy8gdGhlIGNvbnRyb2wgaGFzIGJlZW4gYmx1cnJlZFxuICAgIHVudG91Y2hlZDogJ3VudG91Y2hlZCcsIC8vIHRoZSBjb250cm9sIGhhc24ndCBiZWVuIGJsdXJyZWRcbiAgICB2YWxpZDogJ3ZhbGlkJywgLy8gbW9kZWwgaXMgdmFsaWRcbiAgICBpbnZhbGlkOiAnaW52YWxpZCcsIC8vIG1vZGVsIGlzIGludmFsaWRcbiAgICBwcmlzdGluZTogJ3ByaXN0aW5lJywgLy8gY29udHJvbCBoYXMgbm90IGJlZW4gaW50ZXJhY3RlZCB3aXRoXG4gICAgZGlydHk6ICdkaXJ0eScgLy8gY29udHJvbCBoYXMgYmVlbiBpbnRlcmFjdGVkIHdpdGhcbiAgfVxufVxuXG5WdWUudXNlKFZlZVZhbGlkYXRlLCBjb25maWcpXG5cblZ1ZS51c2UoVnVlUm91dGVyKVxuXG5jb25zdCByb3V0ZXIgPSBuZXcgVnVlUm91dGVyKHtcbiAgbW9kZTogJ2hhc2gnLFxuICBiYXNlOiAnL3dwLWFkbWluL2FkbWluLnBocCcsXG4gIHJvdXRlczogW1xuICAgIHtcbiAgICAgIHBhdGg6ICcvJyxcbiAgICAgIG5hbWU6ICdob21lJyxcbiAgICAgIGNvbXBvbmVudDogSG9tZVxuICAgIH0sXG4gICAge1xuICAgICAgcGF0aDogJy9nYW1lLzppZCcsXG4gICAgICBuYW1lOiAnc2luZ2xlLWdhbWUnLFxuICAgICAgY29tcG9uZW50OiBHYW1lU2luZ2xlXG4gICAgfSxcbiAgICAvLyB7XG4gICAgLy8gICBwYXRoOiAnL2dhbWUvOmlkL21pbmlnYW1lcycsXG4gICAgLy8gICBuYW1lOiAnbWluaWdhbWVzLWxpc3QnLFxuICAgIC8vICAgY29tcG9uZW50OiBNaW5pZ2FtZUxpc3RcbiAgICAvLyB9LFxuICAgIHtcbiAgICAgIHBhdGg6ICcvZ2FtZS86aWQvbWluaWdhbWUvOm1pZCcsXG4gICAgICBuYW1lOiAnc2luZ2xlLW1pbmlnYW1lJyxcbiAgICAgIGNvbXBvbmVudDogTWluaWdhbWVTaW5nbGVcbiAgICB9LFxuICAgIHtcbiAgICAgIHBhdGg6ICcqJyxcbiAgICAgIHJlZGlyZWN0OiAnLydcbiAgICB9XG4gIF1cbn0pXG5cblZ1ZS5jb21wb25lbnQoJ2xvYWRpbmctc3Bpbm5lcicsIHtcbiAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwic3Bpbi1ibG9ja1wiPjxkaXYgY2xhc3M9XCJyZWN0MVwiPjwvZGl2PjxkaXYgY2xhc3M9XCJyZWN0MlwiPjwvZGl2PjxkaXYgY2xhc3M9XCJyZWN0M1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJyZWN0NFwiPjwvZGl2PjxkaXYgY2xhc3M9XCJyZWN0NVwiPjwvZGl2PjwvZGl2Pidcbn0pXG5WdWUuY29tcG9uZW50KCdkaWFsb2ctYm94JywgRGlhbG9nQm94IClcblZ1ZS5jb21wb25lbnQoJ2luZm8tYm94JywgSW5mb0JveCApXG5WdWUuY29tcG9uZW50KCdjcm9wLWJveCcsIENyb3BCb3ggKVxuVnVlLmNvbXBvbmVudCgnd3lzaXd5ZycsIFdZU0lXWUcgKVxuVnVlLmNvbXBvbmVudCgnY29kZWJveCcsIENvZGVCb3gpXG5cbi8vaW1wb3J0ICdwcmlzbWpzJ1xuLy9pbXBvcnQgJ3ByaXNtanMvcGx1Z2lucy9saW5lLW51bWJlcnMvcHJpc20tbGluZS1udW1iZXJzLmpzJ1xuLy9pbXBvcnQgJ3ByaXNtanMvdGhlbWVzL3ByaXNtLmNzcydcblxuLy9pbXBvcnQgUHJpc20gZnJvbSAndnVlLXByaXNtLWNvbXBvbmVudCdcbi8vVnVlLmNvbXBvbmVudCgncHJpc20nLCBQcmlzbSApXG5cbi8vIDQuIENyZWF0ZSBhbmQgbW91bnQgdGhlIHJvb3QgaW5zdGFuY2UuXG4vLyBNYWtlIHN1cmUgdG8gaW5qZWN0IHRoZSByb3V0ZXIgd2l0aCB0aGUgcm91dGVyIG9wdGlvbiB0byBtYWtlIHRoZVxuLy8gd2hvbGUgYXBwIHJvdXRlci1hd2FyZS5cbi8qIGlzQ2hhbmdlZCBtYWtlcyAqL1xuLy8gdmFyIE1HQl9pc0NoYW5nZWQgPSBmYWxzZTtcbi8vIHJvdXRlci5iZWZvcmVFYWNoKGZ1bmN0aW9uICh0bywgZnJvbSwgbmV4dCkge1xuLy8gICAgIC8vIHRoaXMgcm91dGUgcmVxdWlyZXMgYXV0aCwgY2hlY2sgaWYgbG9nZ2VkIGluXG4vLyAgICAgLy8gaWYgbm90LCByZWRpcmVjdCB0byBsb2dpbiBwYWdlLlxuLy8gICAgIC8vID9uZXh0PScrdG8ucGF0aCBjYW4gYmUgdXNlZCB0byBwYXNzIHJlZGlyZWN0IHZhbHVlXG4vLyAgICAgaWYoTUdCX2lzQ2hhbmdlZD09dHJ1ZSl7XG4vLyAgICAgICAgaWYgKGNvbmZpcm0oXCJZb3UgaGF2ZSB1bnNhdmVkIGNoYW5nZXMuIElmIHlvdSB3aXNoIHRvIHNhdmUsIGNsaWNrICdDYW5jZWwnIGFuZCBzYXZlIGZpcnN0IGJlZm9yZSBwcm9jZWVkaW5nLlwiKSA9PSB0cnVlKSB7XG4vLyAgICAgICAgIG5leHQoKTtcbi8vICAgICAgIH0gICAgICBcbi8vICAgICB9ZWxzZXtcbi8vICAgICAgIG5leHQoKTtcbi8vICAgICB9ICBcbi8vIH0pO1xuXG5jb25zdCBhcHAgPSBuZXcgVnVlKHtcbiAgcm91dGVyLFxuICByZW5kZXI6IGggPT4gaChBcHApXG59KS4kbW91bnQoJyNtYWVzdHJvLWFwcCcpXG5cbmNvbnNvbGUubG9nKCdXZWxjb21lIScpXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvbWFpbi1zcmMuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 58 */
/***/ (function(module, exports) {

eval("/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lzLWJ1ZmZlci9pbmRleC5qcz8xZjZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pcy1idWZmZXIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 59 */
/***/ (function(module, exports) {

eval("(function() {\n\nif (typeof self === 'undefined' || !self.Prism || !self.document) {\n\treturn;\n}\n\nPrism.hooks.add('complete', function (env) {\n\tif (!env.code) {\n\t\treturn;\n\t}\n\n\t// works only for <code> wrapped inside <pre> (not inline)\n\tvar pre = env.element.parentNode;\n\tvar clsReg = /\\s*\\bline-numbers\\b\\s*/;\n\tif (\n\t\t!pre || !/pre/i.test(pre.nodeName) ||\n\t\t\t// Abort only if nor the <pre> nor the <code> have the class\n\t\t(!clsReg.test(pre.className) && !clsReg.test(env.element.className))\n\t) {\n\t\treturn;\n\t}\n\n\tif (env.element.querySelector(\".line-numbers-rows\")) {\n\t\t// Abort if line numbers already exists\n\t\treturn;\n\t}\n\n\tif (clsReg.test(env.element.className)) {\n\t\t// Remove the class \"line-numbers\" from the <code>\n\t\tenv.element.className = env.element.className.replace(clsReg, '');\n\t}\n\tif (!clsReg.test(pre.className)) {\n\t\t// Add the class \"line-numbers\" to the <pre>\n\t\tpre.className += ' line-numbers';\n\t}\n\n\tvar match = env.code.match(/\\n(?!$)/g);\n\tvar linesNum = match ? match.length + 1 : 1;\n\tvar lineNumbersWrapper;\n\n\tvar lines = new Array(linesNum + 1);\n\tlines = lines.join('<span></span>');\n\n\tlineNumbersWrapper = document.createElement('span');\n\tlineNumbersWrapper.setAttribute('aria-hidden', 'true');\n\tlineNumbersWrapper.className = 'line-numbers-rows';\n\tlineNumbersWrapper.innerHTML = lines;\n\n\tif (pre.hasAttribute('data-start')) {\n\t\tpre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n\t}\n\n\tenv.element.appendChild(lineNumbersWrapper);\n\n});\n\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3ByaXNtanMvcGx1Z2lucy9saW5lLW51bWJlcnMvcHJpc20tbGluZS1udW1iZXJzLmpzP2MyNDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUM7O0FBRUQsQ0FBQyIsImZpbGUiOiI1OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcblxuaWYgKHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyB8fCAhc2VsZi5QcmlzbSB8fCAhc2VsZi5kb2N1bWVudCkge1xuXHRyZXR1cm47XG59XG5cblByaXNtLmhvb2tzLmFkZCgnY29tcGxldGUnLCBmdW5jdGlvbiAoZW52KSB7XG5cdGlmICghZW52LmNvZGUpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyB3b3JrcyBvbmx5IGZvciA8Y29kZT4gd3JhcHBlZCBpbnNpZGUgPHByZT4gKG5vdCBpbmxpbmUpXG5cdHZhciBwcmUgPSBlbnYuZWxlbWVudC5wYXJlbnROb2RlO1xuXHR2YXIgY2xzUmVnID0gL1xccypcXGJsaW5lLW51bWJlcnNcXGJcXHMqLztcblx0aWYgKFxuXHRcdCFwcmUgfHwgIS9wcmUvaS50ZXN0KHByZS5ub2RlTmFtZSkgfHxcblx0XHRcdC8vIEFib3J0IG9ubHkgaWYgbm9yIHRoZSA8cHJlPiBub3IgdGhlIDxjb2RlPiBoYXZlIHRoZSBjbGFzc1xuXHRcdCghY2xzUmVnLnRlc3QocHJlLmNsYXNzTmFtZSkgJiYgIWNsc1JlZy50ZXN0KGVudi5lbGVtZW50LmNsYXNzTmFtZSkpXG5cdCkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmIChlbnYuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmxpbmUtbnVtYmVycy1yb3dzXCIpKSB7XG5cdFx0Ly8gQWJvcnQgaWYgbGluZSBudW1iZXJzIGFscmVhZHkgZXhpc3RzXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKGNsc1JlZy50ZXN0KGVudi5lbGVtZW50LmNsYXNzTmFtZSkpIHtcblx0XHQvLyBSZW1vdmUgdGhlIGNsYXNzIFwibGluZS1udW1iZXJzXCIgZnJvbSB0aGUgPGNvZGU+XG5cdFx0ZW52LmVsZW1lbnQuY2xhc3NOYW1lID0gZW52LmVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UoY2xzUmVnLCAnJyk7XG5cdH1cblx0aWYgKCFjbHNSZWcudGVzdChwcmUuY2xhc3NOYW1lKSkge1xuXHRcdC8vIEFkZCB0aGUgY2xhc3MgXCJsaW5lLW51bWJlcnNcIiB0byB0aGUgPHByZT5cblx0XHRwcmUuY2xhc3NOYW1lICs9ICcgbGluZS1udW1iZXJzJztcblx0fVxuXG5cdHZhciBtYXRjaCA9IGVudi5jb2RlLm1hdGNoKC9cXG4oPyEkKS9nKTtcblx0dmFyIGxpbmVzTnVtID0gbWF0Y2ggPyBtYXRjaC5sZW5ndGggKyAxIDogMTtcblx0dmFyIGxpbmVOdW1iZXJzV3JhcHBlcjtcblxuXHR2YXIgbGluZXMgPSBuZXcgQXJyYXkobGluZXNOdW0gKyAxKTtcblx0bGluZXMgPSBsaW5lcy5qb2luKCc8c3Bhbj48L3NwYW4+Jyk7XG5cblx0bGluZU51bWJlcnNXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuXHRsaW5lTnVtYmVyc1dyYXBwZXIuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cdGxpbmVOdW1iZXJzV3JhcHBlci5jbGFzc05hbWUgPSAnbGluZS1udW1iZXJzLXJvd3MnO1xuXHRsaW5lTnVtYmVyc1dyYXBwZXIuaW5uZXJIVE1MID0gbGluZXM7XG5cblx0aWYgKHByZS5oYXNBdHRyaWJ1dGUoJ2RhdGEtc3RhcnQnKSkge1xuXHRcdHByZS5zdHlsZS5jb3VudGVyUmVzZXQgPSAnbGluZW51bWJlciAnICsgKHBhcnNlSW50KHByZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhcnQnKSwgMTApIC0gMSk7XG5cdH1cblxuXHRlbnYuZWxlbWVudC5hcHBlbmRDaGlsZChsaW5lTnVtYmVyc1dyYXBwZXIpO1xuXG59KTtcblxufSgpKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcHJpc21qcy9wbHVnaW5zL2xpbmUtbnVtYmVycy9wcmlzbS1saW5lLW51bWJlcnMuanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t? self // if in worker\n\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */\n\nvar Prism = (function(){\n\n// Private helper vars\nvar lang = /\\blang(?:uage)?-(\\w+)\\b/i;\nvar uniqueId = 0;\n\nvar _ = _self.Prism = {\n\tutil: {\n\t\tencode: function (tokens) {\n\t\t\tif (tokens instanceof Token) {\n\t\t\t\treturn new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n\t\t\t} else if (_.util.type(tokens) === 'Array') {\n\t\t\t\treturn tokens.map(_.util.encode);\n\t\t\t} else {\n\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t}\n\t\t},\n\n\t\ttype: function (o) {\n\t\t\treturn Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n\t\t},\n\n\t\tobjId: function (obj) {\n\t\t\tif (!obj['__id']) {\n\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t}\n\t\t\treturn obj['__id'];\n\t\t},\n\n\t\t// Deep clone a language definition (e.g. to extend it)\n\t\tclone: function (o) {\n\t\t\tvar type = _.util.type(o);\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Object':\n\t\t\t\t\tvar clone = {};\n\n\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tclone[key] = _.util.clone(o[key]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn clone;\n\n\t\t\t\tcase 'Array':\n\t\t\t\t\t// Check for existence for IE8\n\t\t\t\t\treturn o.map && o.map(function(v) { return _.util.clone(v); });\n\t\t\t}\n\n\t\t\treturn o;\n\t\t}\n\t},\n\n\tlanguages: {\n\t\textend: function (id, redef) {\n\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\tfor (var key in redef) {\n\t\t\t\tlang[key] = redef[key];\n\t\t\t}\n\n\t\t\treturn lang;\n\t\t},\n\n\t\t/**\n\t\t * Insert a token before another token in a language literal\n\t\t * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n\t\t * we cannot just provide an object, we need anobject and a key.\n\t\t * @param inside The key (or language id) of the parent\n\t\t * @param before The key to insert before. If not provided, the function appends instead.\n\t\t * @param insert Object with the key/value pairs to insert\n\t\t * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\n\t\t */\n\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\troot = root || _.languages;\n\t\t\tvar grammar = root[inside];\n\n\t\t\tif (arguments.length == 2) {\n\t\t\t\tinsert = arguments[1];\n\n\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\tgrammar[newToken] = insert[newToken];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn grammar;\n\t\t\t}\n\n\t\t\tvar ret = {};\n\n\t\t\tfor (var token in grammar) {\n\n\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\tif (token == before) {\n\n\t\t\t\t\t\tfor (var newToken in insert) {\n\n\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update references in other language definitions\n\t\t\t_.languages.DFS(_.languages, function(key, value) {\n\t\t\t\tif (value === root[inside] && key != inside) {\n\t\t\t\t\tthis[key] = ret;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn root[inside] = ret;\n\t\t},\n\n\t\t// Traverse a language definition with Depth First Search\n\t\tDFS: function(o, callback, type, visited) {\n\t\t\tvisited = visited || {};\n\t\t\tfor (var i in o) {\n\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\tif (_.util.type(o[i]) === 'Object' && !visited[_.util.objId(o[i])]) {\n\t\t\t\t\t\tvisited[_.util.objId(o[i])] = true;\n\t\t\t\t\t\t_.languages.DFS(o[i], callback, null, visited);\n\t\t\t\t\t}\n\t\t\t\t\telse if (_.util.type(o[i]) === 'Array' && !visited[_.util.objId(o[i])]) {\n\t\t\t\t\t\tvisited[_.util.objId(o[i])] = true;\n\t\t\t\t\t\t_.languages.DFS(o[i], callback, i, visited);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tplugins: {},\n\n\thighlightAll: function(async, callback) {\n\t\tvar env = {\n\t\t\tcallback: callback,\n\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t};\n\n\t\t_.hooks.run(\"before-highlightall\", env);\n\n\t\tvar elements = env.elements || document.querySelectorAll(env.selector);\n\n\t\tfor (var i=0, element; element = elements[i++];) {\n\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t}\n\t},\n\n\thighlightElement: function(element, async, callback) {\n\t\t// Find language\n\t\tvar language, grammar, parent = element;\n\n\t\twhile (parent && !lang.test(parent.className)) {\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\tif (parent) {\n\t\t\tlanguage = (parent.className.match(lang) || [,''])[1].toLowerCase();\n\t\t\tgrammar = _.languages[language];\n\t\t}\n\n\t\t// Set language on the element, if not present\n\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\n\t\t// Set language on the parent, for styling\n\t\tparent = element.parentNode;\n\n\t\tif (/pre/i.test(parent.nodeName)) {\n\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\t\t}\n\n\t\tvar code = element.textContent;\n\n\t\tvar env = {\n\t\t\telement: element,\n\t\t\tlanguage: language,\n\t\t\tgrammar: grammar,\n\t\t\tcode: code\n\t\t};\n\n\t\t_.hooks.run('before-sanity-check', env);\n\n\t\tif (!env.code || !env.grammar) {\n\t\t\tif (env.code) {\n\t\t\t\tenv.element.textContent = env.code;\n\t\t\t}\n\t\t\t_.hooks.run('complete', env);\n\t\t\treturn;\n\t\t}\n\n\t\t_.hooks.run('before-highlight', env);\n\n\t\tif (async && _self.Worker) {\n\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\tworker.onmessage = function(evt) {\n\t\t\t\tenv.highlightedCode = evt.data;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t};\n\n\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\tlanguage: env.language,\n\t\t\t\tcode: env.code,\n\t\t\t\timmediateClose: true\n\t\t\t}));\n\t\t}\n\t\telse {\n\t\t\tenv.highlightedCode = _.highlight(env.code, env.grammar, env.language);\n\n\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\tcallback && callback.call(element);\n\n\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t_.hooks.run('complete', env);\n\t\t}\n\t},\n\n\thighlight: function (text, grammar, language) {\n\t\tvar tokens = _.tokenize(text, grammar);\n\t\treturn Token.stringify(_.util.encode(tokens), language);\n\t},\n\n\ttokenize: function(text, grammar, language) {\n\t\tvar Token = _.Token;\n\n\t\tvar strarr = [text];\n\n\t\tvar rest = grammar.rest;\n\n\t\tif (rest) {\n\t\t\tfor (var token in rest) {\n\t\t\t\tgrammar[token] = rest[token];\n\t\t\t}\n\n\t\t\tdelete grammar.rest;\n\t\t}\n\n\t\ttokenloop: for (var token in grammar) {\n\t\t\tif(!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = (_.util.type(patterns) === \"Array\") ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tvar pattern = patterns[j],\n\t\t\t\t\tinside = pattern.inside,\n\t\t\t\t\tlookbehind = !!pattern.lookbehind,\n\t\t\t\t\tgreedy = !!pattern.greedy,\n\t\t\t\t\tlookbehindLength = 0,\n\t\t\t\t\talias = pattern.alias;\n\n\t\t\t\tif (greedy && !pattern.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n\t\t\t\t\tpattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n\t\t\t\t}\n\n\t\t\t\tpattern = pattern.pattern || pattern;\n\n\t\t\t\t// Don’t cache length as it changes during the loop\n\t\t\t\tfor (var i=0, pos = 0; i<strarr.length; pos += strarr[i].length, ++i) {\n\n\t\t\t\t\tvar str = strarr[i];\n\n\t\t\t\t\tif (strarr.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\tbreak tokenloop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tpattern.lastIndex = 0;\n\n\t\t\t\t\tvar match = pattern.exec(str),\n\t\t\t\t\t    delNum = 1;\n\n\t\t\t\t\t// Greedy patterns can override/remove up to two previously matched tokens\n\t\t\t\t\tif (!match && greedy && i != strarr.length - 1) {\n\t\t\t\t\t\tpattern.lastIndex = pos;\n\t\t\t\t\t\tmatch = pattern.exec(text);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index + (lookbehind ? match[1].length : 0),\n\t\t\t\t\t\t    to = match.index + match[0].length,\n\t\t\t\t\t\t    k = i,\n\t\t\t\t\t\t    p = pos;\n\n\t\t\t\t\t\tfor (var len = strarr.length; k < len && p < to; ++k) {\n\t\t\t\t\t\t\tp += strarr[k].length;\n\t\t\t\t\t\t\t// Move the index i to the element in strarr that is closest to from\n\t\t\t\t\t\t\tif (from >= p) {\n\t\t\t\t\t\t\t\t++i;\n\t\t\t\t\t\t\t\tpos = p;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\t * If strarr[k - 1] is greedy we are in conflict with another greedy pattern\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif (strarr[i] instanceof Token || strarr[k - 1].greedy) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Number of tokens to delete and replace with the new match\n\t\t\t\t\t\tdelNum = k - i;\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(lookbehind) {\n\t\t\t\t\t\tlookbehindLength = match[1].length;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar from = match.index + lookbehindLength,\n\t\t\t\t\t    match = match[0].slice(lookbehindLength),\n\t\t\t\t\t    to = from + match.length,\n\t\t\t\t\t    before = str.slice(0, from),\n\t\t\t\t\t    after = str.slice(to);\n\n\t\t\t\t\tvar args = [i, delNum];\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\targs.push(before);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias, match, greedy);\n\n\t\t\t\t\targs.push(wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\targs.push(after);\n\t\t\t\t\t}\n\n\t\t\t\t\tArray.prototype.splice.apply(strarr, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn strarr;\n\t},\n\n\thooks: {\n\t\tall: {},\n\n\t\tadd: function (name, callback) {\n\t\t\tvar hooks = _.hooks.all;\n\n\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\thooks[name].push(callback);\n\t\t},\n\n\t\trun: function (name, env) {\n\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {\n\t\t\t\tcallback(env);\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar Token = _.Token = function(type, content, alias, matchedStr, greedy) {\n\tthis.type = type;\n\tthis.content = content;\n\tthis.alias = alias;\n\t// Copy of the full string this token was created from\n\tthis.length = (matchedStr || \"\").length|0;\n\tthis.greedy = !!greedy;\n};\n\nToken.stringify = function(o, language, parent) {\n\tif (typeof o == 'string') {\n\t\treturn o;\n\t}\n\n\tif (_.util.type(o) === 'Array') {\n\t\treturn o.map(function(element) {\n\t\t\treturn Token.stringify(element, language, o);\n\t\t}).join('');\n\t}\n\n\tvar env = {\n\t\ttype: o.type,\n\t\tcontent: Token.stringify(o.content, language, parent),\n\t\ttag: 'span',\n\t\tclasses: ['token', o.type],\n\t\tattributes: {},\n\t\tlanguage: language,\n\t\tparent: parent\n\t};\n\n\tif (env.type == 'comment') {\n\t\tenv.attributes['spellcheck'] = 'true';\n\t}\n\n\tif (o.alias) {\n\t\tvar aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];\n\t\tArray.prototype.push.apply(env.classes, aliases);\n\t}\n\n\t_.hooks.run('wrap', env);\n\n\tvar attributes = Object.keys(env.attributes).map(function(name) {\n\t\treturn name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t}).join(' ');\n\n\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + (attributes ? ' ' + attributes : '') + '>' + env.content + '</' + env.tag + '>';\n\n};\n\nif (!_self.document) {\n\tif (!_self.addEventListener) {\n\t\t// in Node.js\n\t\treturn _self.Prism;\n\t}\n \t// In worker\n\t_self.addEventListener('message', function(evt) {\n\t\tvar message = JSON.parse(evt.data),\n\t\t    lang = message.language,\n\t\t    code = message.code,\n\t\t    immediateClose = message.immediateClose;\n\n\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\tif (immediateClose) {\n\t\t\t_self.close();\n\t\t}\n\t}, false);\n\n\treturn _self.Prism;\n}\n\n//Get current script and highlight\nvar script = document.currentScript || [].slice.call(document.getElementsByTagName(\"script\")).pop();\n\nif (script) {\n\t_.filename = script.src;\n\n\tif (document.addEventListener && !script.hasAttribute('data-manual')) {\n\t\tif(document.readyState !== \"loading\") {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(_.highlightAll);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(_.highlightAll, 16);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdocument.addEventListener('DOMContentLoaded', _.highlightAll);\n\t\t}\n\t}\n}\n\nreturn _self.Prism;\n\n})();\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': /<!--[\\w\\W]*?-->/,\n\t'prolog': /<\\?[\\w\\W]+?\\?>/,\n\t'doctype': /<!DOCTYPE[\\w\\W]+?>/i,\n\t'cdata': /<!\\[CDATA\\[[\\w\\W]*?]]>/i,\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\\\1|\\\\?(?!\\1)[\\w\\W])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /[=>\"']/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': /&#?[\\da-z]{1,8};/i\n};\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function(env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nPrism.languages.xml = Prism.languages.markup;\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\nPrism.languages.css = {\n\t'comment': /\\/\\*[\\w\\W]*?\\*\\//,\n\t'atrule': {\n\t\tpattern: /@[\\w-]+?.*?(;|(?=\\s*\\{))/i,\n\t\tinside: {\n\t\t\t'rule': /@[\\w-]+/\n\t\t\t// See rest below\n\t\t}\n\t},\n\t'url': /url\\((?:([\"'])(\\\\(?:\\r\\n|[\\w\\W])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,\n\t'selector': /[^\\{\\}\\s][^\\{\\};]*?(?=\\s*\\{)/,\n\t'string': {\n\t\tpattern: /(\"|')(\\\\(?:\\r\\n|[\\w\\W])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'property': /(\\b|\\B)[\\w-]+(?=\\s*:)/i,\n\t'important': /\\B!important\\b/i,\n\t'function': /[-a-z0-9]+(?=\\()/i,\n\t'punctuation': /[(){};:]/\n};\n\nPrism.languages.css['atrule'].inside.rest = Prism.util.clone(Prism.languages.css);\n\nif (Prism.languages.markup) {\n\tPrism.languages.insertBefore('markup', 'tag', {\n\t\t'style': {\n\t\t\tpattern: /(<style[\\w\\W]*?>)[\\w\\W]*?(?=<\\/style>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.css,\n\t\t\talias: 'language-css'\n\t\t}\n\t});\n\t\n\tPrism.languages.insertBefore('inside', 'attr-value', {\n\t\t'style-attr': {\n\t\t\tpattern: /\\s*style=(\"|').*?\\1/i,\n\t\t\tinside: {\n\t\t\t\t'attr-name': {\n\t\t\t\t\tpattern: /^\\s*style/i,\n\t\t\t\t\tinside: Prism.languages.markup.tag.inside\n\t\t\t\t},\n\t\t\t\t'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /.+/i,\n\t\t\t\t\tinside: Prism.languages.css\n\t\t\t\t}\n\t\t\t},\n\t\t\talias: 'language-css'\n\t\t}\n\t}, Prism.languages.markup.tag);\n}\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\w\\W]*?\\*\\//,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[a-z0-9_\\.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\tpunctuation: /(\\.|\\\\)/\n\t\t}\n\t},\n\t'keyword': /\\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n\t'boolean': /\\b(true|false)\\b/,\n\t'function': /[a-z0-9_]+(?=\\()/i,\n\t'number': /\\b-?(?:0x[\\da-f]+|\\d*\\.?\\d+(?:e[+-]?\\d+)?)\\b/i,\n\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'keyword': /\\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/,\n\t'number': /\\b-?(0x[\\dA-Fa-f]+|0b[01]+|0o[0-7]+|\\d*\\.?\\d+([Ee][+-]?\\d+)?|NaN|Infinity)\\b/,\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*(?=\\()/i,\n\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*\\*?|\\/|~|\\^|%|\\.{3}/\n});\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})]))/,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t}\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'template-string': {\n\t\tpattern: /`(?:\\\\\\\\|\\\\?[^\\\\])*?`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /\\$\\{[^}]+\\}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t}\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.insertBefore('markup', 'tag', {\n\t\t'script': {\n\t\t\tpattern: /(<script[\\w\\W]*?>)[\\w\\W]*?(?=<\\/script>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript,\n\t\t\talias: 'language-javascript'\n\t\t}\n\t});\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {\n\t\treturn;\n\t}\n\n\tself.Prism.fileHighlight = function() {\n\n\t\tvar Extensions = {\n\t\t\t'js': 'javascript',\n\t\t\t'py': 'python',\n\t\t\t'rb': 'ruby',\n\t\t\t'ps1': 'powershell',\n\t\t\t'psm1': 'powershell',\n\t\t\t'sh': 'bash',\n\t\t\t'bat': 'batch',\n\t\t\t'h': 'c',\n\t\t\t'tex': 'latex'\n\t\t};\n\n\t\tif(Array.prototype.forEach) { // Check to prevent error in IE8\n\t\t\tArray.prototype.slice.call(document.querySelectorAll('pre[data-src]')).forEach(function (pre) {\n\t\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\t\tvar language, parent = pre;\n\t\t\t\tvar lang = /\\blang(?:uage)?-(?!\\*)(\\w+)\\b/i;\n\t\t\t\twhile (parent && !lang.test(parent.className)) {\n\t\t\t\t\tparent = parent.parentNode;\n\t\t\t\t}\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tlanguage = (pre.className.match(lang) || [, ''])[1];\n\t\t\t\t}\n\n\t\t\t\tif (!language) {\n\t\t\t\t\tvar extension = (src.match(/\\.(\\w+)$/) || [, ''])[1];\n\t\t\t\t\tlanguage = Extensions[extension] || extension;\n\t\t\t\t}\n\n\t\t\t\tvar code = document.createElement('code');\n\t\t\t\tcode.className = 'language-' + language;\n\n\t\t\t\tpre.textContent = '';\n\n\t\t\t\tcode.textContent = 'Loading…';\n\n\t\t\t\tpre.appendChild(code);\n\n\t\t\t\tvar xhr = new XMLHttpRequest();\n\n\t\t\t\txhr.open('GET', src, true);\n\n\t\t\t\txhr.onreadystatechange = function () {\n\t\t\t\t\tif (xhr.readyState == 4) {\n\n\t\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\t\t\tcode.textContent = xhr.responseText;\n\n\t\t\t\t\t\t\tPrism.highlightElement(code);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (xhr.status >= 400) {\n\t\t\t\t\t\t\tcode.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tcode.textContent = '✖ Error: File does not exist or is empty';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\txhr.send(null);\n\t\t\t});\n\t\t}\n\n\t};\n\n\tdocument.addEventListener('DOMContentLoaded', self.Prism.fileHighlight);\n\n})();\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**!\n * Sortable\n * @author\tRubaXa   <trash@rubaxa.org>\n * @license MIT\n */\n\n(function sortableModule(factory) {\n\t\"use strict\";\n\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\telse if (typeof module != \"undefined\" && typeof module.exports != \"undefined\") {\n\t\tmodule.exports = factory();\n\t}\n\telse {\n\t\t/* jshint sub:true */\n\t\twindow[\"Sortable\"] = factory();\n\t}\n})(function sortableFactory() {\n\t\"use strict\";\n\n\tif (typeof window == \"undefined\" || !window.document) {\n\t\treturn function sortableError() {\n\t\t\tthrow new Error(\"Sortable.js requires a window with a document\");\n\t\t};\n\t}\n\n\tvar dragEl,\n\t\tparentEl,\n\t\tghostEl,\n\t\tcloneEl,\n\t\trootEl,\n\t\tnextEl,\n\t\tlastDownEl,\n\n\t\tscrollEl,\n\t\tscrollParentEl,\n\t\tscrollCustomFn,\n\n\t\tlastEl,\n\t\tlastCSS,\n\t\tlastParentCSS,\n\n\t\toldIndex,\n\t\tnewIndex,\n\n\t\tactiveGroup,\n\t\tputSortable,\n\n\t\tautoScroll = {},\n\n\t\ttapEvt,\n\t\ttouchEvt,\n\n\t\tmoved,\n\n\t\t/** @const */\n\t\tR_SPACE = /\\s+/g,\n\t\tR_FLOAT = /left|right|inline/,\n\n\t\texpando = 'Sortable' + (new Date).getTime(),\n\n\t\twin = window,\n\t\tdocument = win.document,\n\t\tparseInt = win.parseInt,\n\n\t\t$ = win.jQuery || win.Zepto,\n\t\tPolymer = win.Polymer,\n\n\t\tcaptureMode = false,\n\n\t\tsupportDraggable = !!('draggable' in document.createElement('div')),\n\t\tsupportCssPointerEvents = (function (el) {\n\t\t\t// false when IE11\n\t\t\tif (!!navigator.userAgent.match(/Trident.*rv[ :]?11\\./)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tel = document.createElement('x');\n\t\t\tel.style.cssText = 'pointer-events:auto';\n\t\t\treturn el.style.pointerEvents === 'auto';\n\t\t})(),\n\n\t\t_silent = false,\n\n\t\tabs = Math.abs,\n\t\tmin = Math.min,\n\n\t\tsavedInputChecked = [],\n\t\ttouchDragOverListeners = [],\n\n\t\t_autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl) {\n\t\t\t// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n\t\t\tif (rootEl && options.scroll) {\n\t\t\t\tvar _this = rootEl[expando],\n\t\t\t\t\tel,\n\t\t\t\t\trect,\n\t\t\t\t\tsens = options.scrollSensitivity,\n\t\t\t\t\tspeed = options.scrollSpeed,\n\n\t\t\t\t\tx = evt.clientX,\n\t\t\t\t\ty = evt.clientY,\n\n\t\t\t\t\twinWidth = window.innerWidth,\n\t\t\t\t\twinHeight = window.innerHeight,\n\n\t\t\t\t\tvx,\n\t\t\t\t\tvy,\n\n\t\t\t\t\tscrollOffsetX,\n\t\t\t\t\tscrollOffsetY\n\t\t\t\t;\n\n\t\t\t\t// Delect scrollEl\n\t\t\t\tif (scrollParentEl !== rootEl) {\n\t\t\t\t\tscrollEl = options.scroll;\n\t\t\t\t\tscrollParentEl = rootEl;\n\t\t\t\t\tscrollCustomFn = options.scrollFn;\n\n\t\t\t\t\tif (scrollEl === true) {\n\t\t\t\t\t\tscrollEl = rootEl;\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif ((scrollEl.offsetWidth < scrollEl.scrollWidth) ||\n\t\t\t\t\t\t\t\t(scrollEl.offsetHeight < scrollEl.scrollHeight)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\t\t} while (scrollEl = scrollEl.parentNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (scrollEl) {\n\t\t\t\t\tel = scrollEl;\n\t\t\t\t\trect = scrollEl.getBoundingClientRect();\n\t\t\t\t\tvx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);\n\t\t\t\t\tvy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);\n\t\t\t\t}\n\n\n\t\t\t\tif (!(vx || vy)) {\n\t\t\t\t\tvx = (winWidth - x <= sens) - (x <= sens);\n\t\t\t\t\tvy = (winHeight - y <= sens) - (y <= sens);\n\n\t\t\t\t\t/* jshint expr:true */\n\t\t\t\t\t(vx || vy) && (el = win);\n\t\t\t\t}\n\n\n\t\t\t\tif (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {\n\t\t\t\t\tautoScroll.el = el;\n\t\t\t\t\tautoScroll.vx = vx;\n\t\t\t\t\tautoScroll.vy = vy;\n\n\t\t\t\t\tclearInterval(autoScroll.pid);\n\n\t\t\t\t\tif (el) {\n\t\t\t\t\t\tautoScroll.pid = setInterval(function () {\n\t\t\t\t\t\t\tscrollOffsetY = vy ? vy * speed : 0;\n\t\t\t\t\t\t\tscrollOffsetX = vx ? vx * speed : 0;\n\n\t\t\t\t\t\t\tif ('function' === typeof(scrollCustomFn)) {\n\t\t\t\t\t\t\t\treturn scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (el === win) {\n\t\t\t\t\t\t\t\twin.scrollTo(win.pageXOffset + scrollOffsetX, win.pageYOffset + scrollOffsetY);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tel.scrollTop += scrollOffsetY;\n\t\t\t\t\t\t\t\tel.scrollLeft += scrollOffsetX;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 24);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, 30),\n\n\t\t_prepareGroup = function (options) {\n\t\t\tfunction toFn(value, pull) {\n\t\t\t\tif (value === void 0 || value === true) {\n\t\t\t\t\tvalue = group.name;\n\t\t\t\t}\n\n\t\t\t\tif (typeof value === 'function') {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn function (to, from) {\n\t\t\t\t\t\tvar fromGroup = from.options.group.name;\n\n\t\t\t\t\t\treturn pull\n\t\t\t\t\t\t\t? value\n\t\t\t\t\t\t\t: value && (value.join\n\t\t\t\t\t\t\t\t? value.indexOf(fromGroup) > -1\n\t\t\t\t\t\t\t\t: (fromGroup == value)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar group = {};\n\t\t\tvar originalGroup = options.group;\n\n\t\t\tif (!originalGroup || typeof originalGroup != 'object') {\n\t\t\t\toriginalGroup = {name: originalGroup};\n\t\t\t}\n\n\t\t\tgroup.name = originalGroup.name;\n\t\t\tgroup.checkPull = toFn(originalGroup.pull, true);\n\t\t\tgroup.checkPut = toFn(originalGroup.put);\n\t\t\tgroup.revertClone = originalGroup.revertClone;\n\n\t\t\toptions.group = group;\n\t\t}\n\t;\n\n\n\t/**\n\t * @class  Sortable\n\t * @param  {HTMLElement}  el\n\t * @param  {Object}       [options]\n\t */\n\tfunction Sortable(el, options) {\n\t\tif (!(el && el.nodeType && el.nodeType === 1)) {\n\t\t\tthrow 'Sortable: `el` must be HTMLElement, and not ' + {}.toString.call(el);\n\t\t}\n\n\t\tthis.el = el; // root element\n\t\tthis.options = options = _extend({}, options);\n\n\n\t\t// Export instance\n\t\tel[expando] = this;\n\n\t\t// Default options\n\t\tvar defaults = {\n\t\t\tgroup: Math.random(),\n\t\t\tsort: true,\n\t\t\tdisabled: false,\n\t\t\tstore: null,\n\t\t\thandle: null,\n\t\t\tscroll: true,\n\t\t\tscrollSensitivity: 30,\n\t\t\tscrollSpeed: 10,\n\t\t\tdraggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',\n\t\t\tghostClass: 'sortable-ghost',\n\t\t\tchosenClass: 'sortable-chosen',\n\t\t\tdragClass: 'sortable-drag',\n\t\t\tignore: 'a, img',\n\t\t\tfilter: null,\n\t\t\tpreventOnFilter: true,\n\t\t\tanimation: 0,\n\t\t\tsetData: function (dataTransfer, dragEl) {\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);\n\t\t\t},\n\t\t\tdropBubble: false,\n\t\t\tdragoverBubble: false,\n\t\t\tdataIdAttr: 'data-id',\n\t\t\tdelay: 0,\n\t\t\tforceFallback: false,\n\t\t\tfallbackClass: 'sortable-fallback',\n\t\t\tfallbackOnBody: false,\n\t\t\tfallbackTolerance: 0,\n\t\t\tfallbackOffset: {x: 0, y: 0}\n\t\t};\n\n\n\t\t// Set default options\n\t\tfor (var name in defaults) {\n\t\t\t!(name in options) && (options[name] = defaults[name]);\n\t\t}\n\n\t\t_prepareGroup(options);\n\n\t\t// Bind all private methods\n\t\tfor (var fn in this) {\n\t\t\tif (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n\t\t\t\tthis[fn] = this[fn].bind(this);\n\t\t\t}\n\t\t}\n\n\t\t// Setup drag mode\n\t\tthis.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n\t\t// Bind events\n\t\t_on(el, 'mousedown', this._onTapStart);\n\t\t_on(el, 'touchstart', this._onTapStart);\n\t\t_on(el, 'pointerdown', this._onTapStart);\n\n\t\tif (this.nativeDraggable) {\n\t\t\t_on(el, 'dragover', this);\n\t\t\t_on(el, 'dragenter', this);\n\t\t}\n\n\t\ttouchDragOverListeners.push(this._onDragOver);\n\n\t\t// Restore sorting\n\t\toptions.store && this.sort(options.store.get(this));\n\t}\n\n\n\tSortable.prototype = /** @lends Sortable.prototype */ {\n\t\tconstructor: Sortable,\n\n\t\t_onTapStart: function (/** Event|TouchEvent */evt) {\n\t\t\tvar _this = this,\n\t\t\t\tel = this.el,\n\t\t\t\toptions = this.options,\n\t\t\t\tpreventOnFilter = options.preventOnFilter,\n\t\t\t\ttype = evt.type,\n\t\t\t\ttouch = evt.touches && evt.touches[0],\n\t\t\t\ttarget = (touch || evt).target,\n\t\t\t\toriginalTarget = evt.target.shadowRoot && evt.path[0] || target,\n\t\t\t\tfilter = options.filter,\n\t\t\t\tstartIndex;\n\n\t\t\t_saveInputCheckedState(el);\n\n\n\t\t\t// Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n\t\t\tif (dragEl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (type === 'mousedown' && evt.button !== 0 || options.disabled) {\n\t\t\t\treturn; // only left button or enabled\n\t\t\t}\n\n\n\t\t\ttarget = _closest(target, options.draggable, el);\n\n\t\t\tif (!target) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (lastDownEl === target) {\n\t\t\t\t// Ignoring duplicate `down`\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the index of the dragged element within its parent\n\t\t\tstartIndex = _index(target, options.draggable);\n\n\t\t\t// Check filter\n\t\t\tif (typeof filter === 'function') {\n\t\t\t\tif (filter.call(this, evt, target, this)) {\n\t\t\t\t\t_dispatchEvent(_this, originalTarget, 'filter', target, el, startIndex);\n\t\t\t\t\tpreventOnFilter && evt.preventDefault();\n\t\t\t\t\treturn; // cancel dnd\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (filter) {\n\t\t\t\tfilter = filter.split(',').some(function (criteria) {\n\t\t\t\t\tcriteria = _closest(originalTarget, criteria.trim(), el);\n\n\t\t\t\t\tif (criteria) {\n\t\t\t\t\t\t_dispatchEvent(_this, criteria, 'filter', target, el, startIndex);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (filter) {\n\t\t\t\t\tpreventOnFilter && evt.preventDefault();\n\t\t\t\t\treturn; // cancel dnd\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (options.handle && !_closest(originalTarget, options.handle, el)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare `dragstart`\n\t\t\tthis._prepareDragStart(evt, touch, target, startIndex);\n\t\t},\n\n\t\t_prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target, /** Number */startIndex) {\n\t\t\tvar _this = this,\n\t\t\t\tel = _this.el,\n\t\t\t\toptions = _this.options,\n\t\t\t\townerDocument = el.ownerDocument,\n\t\t\t\tdragStartFn;\n\n\t\t\tif (target && !dragEl && (target.parentNode === el)) {\n\t\t\t\ttapEvt = evt;\n\n\t\t\t\trootEl = el;\n\t\t\t\tdragEl = target;\n\t\t\t\tparentEl = dragEl.parentNode;\n\t\t\t\tnextEl = dragEl.nextSibling;\n\t\t\t\tlastDownEl = target;\n\t\t\t\tactiveGroup = options.group;\n\t\t\t\toldIndex = startIndex;\n\n\t\t\t\tthis._lastX = (touch || evt).clientX;\n\t\t\t\tthis._lastY = (touch || evt).clientY;\n\n\t\t\t\tdragEl.style['will-change'] = 'transform';\n\n\t\t\t\tdragStartFn = function () {\n\t\t\t\t\t// Delayed drag has been triggered\n\t\t\t\t\t// we can re-enable the events: touchmove/mousemove\n\t\t\t\t\t_this._disableDelayedDrag();\n\n\t\t\t\t\t// Make the element draggable\n\t\t\t\t\tdragEl.draggable = _this.nativeDraggable;\n\n\t\t\t\t\t// Chosen item\n\t\t\t\t\t_toggleClass(dragEl, options.chosenClass, true);\n\n\t\t\t\t\t// Bind the events: dragstart/dragend\n\t\t\t\t\t_this._triggerDragStart(evt, touch);\n\n\t\t\t\t\t// Drag start event\n\t\t\t\t\t_dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, oldIndex);\n\t\t\t\t};\n\n\t\t\t\t// Disable \"draggable\"\n\t\t\t\toptions.ignore.split(',').forEach(function (criteria) {\n\t\t\t\t\t_find(dragEl, criteria.trim(), _disableDraggable);\n\t\t\t\t});\n\n\t\t\t\t_on(ownerDocument, 'mouseup', _this._onDrop);\n\t\t\t\t_on(ownerDocument, 'touchend', _this._onDrop);\n\t\t\t\t_on(ownerDocument, 'touchcancel', _this._onDrop);\n\t\t\t\t_on(ownerDocument, 'pointercancel', _this._onDrop);\n\t\t\t\t_on(ownerDocument, 'selectstart', _this);\n\n\t\t\t\tif (options.delay) {\n\t\t\t\t\t// If the user moves the pointer or let go the click or touch\n\t\t\t\t\t// before the delay has been reached:\n\t\t\t\t\t// disable the delayed drag\n\t\t\t\t\t_on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchend', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'mousemove', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchmove', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'pointermove', _this._disableDelayedDrag);\n\n\t\t\t\t\t_this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n\t\t\t\t} else {\n\t\t\t\t\tdragStartFn();\n\t\t\t\t}\n\n\n\t\t\t}\n\t\t},\n\n\t\t_disableDelayedDrag: function () {\n\t\t\tvar ownerDocument = this.el.ownerDocument;\n\n\t\t\tclearTimeout(this._dragStartTimer);\n\t\t\t_off(ownerDocument, 'mouseup', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchend', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchcancel', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'mousemove', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchmove', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'pointermove', this._disableDelayedDrag);\n\t\t},\n\n\t\t_triggerDragStart: function (/** Event */evt, /** Touch */touch) {\n\t\t\ttouch = touch || (evt.pointerType == 'touch' ? evt : null);\n\n\t\t\tif (touch) {\n\t\t\t\t// Touch device support\n\t\t\t\ttapEvt = {\n\t\t\t\t\ttarget: dragEl,\n\t\t\t\t\tclientX: touch.clientX,\n\t\t\t\t\tclientY: touch.clientY\n\t\t\t\t};\n\n\t\t\t\tthis._onDragStart(tapEvt, 'touch');\n\t\t\t}\n\t\t\telse if (!this.nativeDraggable) {\n\t\t\t\tthis._onDragStart(tapEvt, true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_on(dragEl, 'dragend', this);\n\t\t\t\t_on(rootEl, 'dragstart', this._onDragStart);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (document.selection) {\n\t\t\t\t\t// Timeout neccessary for IE9\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tdocument.selection.empty();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t}\n\t\t},\n\n\t\t_dragStarted: function () {\n\t\t\tif (rootEl && dragEl) {\n\t\t\t\tvar options = this.options;\n\n\t\t\t\t// Apply effect\n\t\t\t\t_toggleClass(dragEl, options.ghostClass, true);\n\t\t\t\t_toggleClass(dragEl, options.dragClass, false);\n\n\t\t\t\tSortable.active = this;\n\n\t\t\t\t// Drag start event\n\t\t\t\t_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, oldIndex);\n\t\t\t} else {\n\t\t\t\tthis._nulling();\n\t\t\t}\n\t\t},\n\n\t\t_emulateDragOver: function () {\n\t\t\tif (touchEvt) {\n\t\t\t\tif (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._lastX = touchEvt.clientX;\n\t\t\t\tthis._lastY = touchEvt.clientY;\n\n\t\t\t\tif (!supportCssPointerEvents) {\n\t\t\t\t\t_css(ghostEl, 'display', 'none');\n\t\t\t\t}\n\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY),\n\t\t\t\t\tparent = target,\n\t\t\t\t\ti = touchDragOverListeners.length;\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (parent[expando]) {\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\ttouchDragOverListeners[i]({\n\t\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,\n\t\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,\n\t\t\t\t\t\t\t\t\ttarget: target,\n\t\t\t\t\t\t\t\t\trootEl: parent\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget = parent; // store last element\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\twhile (parent = parent.parentNode);\n\t\t\t\t}\n\n\t\t\t\tif (!supportCssPointerEvents) {\n\t\t\t\t\t_css(ghostEl, 'display', '');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t_onTouchMove: function (/**TouchEvent*/evt) {\n\t\t\tif (tapEvt) {\n\t\t\t\tvar\toptions = this.options,\n\t\t\t\t\tfallbackTolerance = options.fallbackTolerance,\n\t\t\t\t\tfallbackOffset = options.fallbackOffset,\n\t\t\t\t\ttouch = evt.touches ? evt.touches[0] : evt,\n\t\t\t\t\tdx = (touch.clientX - tapEvt.clientX) + fallbackOffset.x,\n\t\t\t\t\tdy = (touch.clientY - tapEvt.clientY) + fallbackOffset.y,\n\t\t\t\t\ttranslate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';\n\n\t\t\t\t// only set the status to dragging, when we are actually dragging\n\t\t\t\tif (!Sortable.active) {\n\t\t\t\t\tif (fallbackTolerance &&\n\t\t\t\t\t\tmin(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY)) < fallbackTolerance\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._dragStarted();\n\t\t\t\t}\n\n\t\t\t\t// as well as creating the ghost element on the document body\n\t\t\t\tthis._appendGhost();\n\n\t\t\t\tmoved = true;\n\t\t\t\ttouchEvt = touch;\n\n\t\t\t\t_css(ghostEl, 'webkitTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'mozTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'msTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'transform', translate3d);\n\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t},\n\n\t\t_appendGhost: function () {\n\t\t\tif (!ghostEl) {\n\t\t\t\tvar rect = dragEl.getBoundingClientRect(),\n\t\t\t\t\tcss = _css(dragEl),\n\t\t\t\t\toptions = this.options,\n\t\t\t\t\tghostRect;\n\n\t\t\t\tghostEl = dragEl.cloneNode(true);\n\n\t\t\t\t_toggleClass(ghostEl, options.ghostClass, false);\n\t\t\t\t_toggleClass(ghostEl, options.fallbackClass, true);\n\t\t\t\t_toggleClass(ghostEl, options.dragClass, true);\n\n\t\t\t\t_css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));\n\t\t\t\t_css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));\n\t\t\t\t_css(ghostEl, 'width', rect.width);\n\t\t\t\t_css(ghostEl, 'height', rect.height);\n\t\t\t\t_css(ghostEl, 'opacity', '0.8');\n\t\t\t\t_css(ghostEl, 'position', 'fixed');\n\t\t\t\t_css(ghostEl, 'zIndex', '100000');\n\t\t\t\t_css(ghostEl, 'pointerEvents', 'none');\n\n\t\t\t\toptions.fallbackOnBody && document.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl);\n\n\t\t\t\t// Fixing dimensions.\n\t\t\t\tghostRect = ghostEl.getBoundingClientRect();\n\t\t\t\t_css(ghostEl, 'width', rect.width * 2 - ghostRect.width);\n\t\t\t\t_css(ghostEl, 'height', rect.height * 2 - ghostRect.height);\n\t\t\t}\n\t\t},\n\n\t\t_onDragStart: function (/**Event*/evt, /**boolean*/useFallback) {\n\t\t\tvar dataTransfer = evt.dataTransfer,\n\t\t\t\toptions = this.options;\n\n\t\t\tthis._offUpEvents();\n\n\t\t\tif (activeGroup.checkPull(this, this, dragEl, evt)) {\n\t\t\t\tcloneEl = _clone(dragEl);\n\n\t\t\t\tcloneEl.draggable = false;\n\t\t\t\tcloneEl.style['will-change'] = '';\n\n\t\t\t\t_css(cloneEl, 'display', 'none');\n\t\t\t\t_toggleClass(cloneEl, this.options.chosenClass, false);\n\n\t\t\t\trootEl.insertBefore(cloneEl, dragEl);\n\t\t\t\t_dispatchEvent(this, rootEl, 'clone', dragEl);\n\t\t\t}\n\n\t\t\t_toggleClass(dragEl, options.dragClass, true);\n\n\t\t\tif (useFallback) {\n\t\t\t\tif (useFallback === 'touch') {\n\t\t\t\t\t// Bind touch events\n\t\t\t\t\t_on(document, 'touchmove', this._onTouchMove);\n\t\t\t\t\t_on(document, 'touchend', this._onDrop);\n\t\t\t\t\t_on(document, 'touchcancel', this._onDrop);\n\t\t\t\t\t_on(document, 'pointermove', this._onTouchMove);\n\t\t\t\t\t_on(document, 'pointerup', this._onDrop);\n\t\t\t\t} else {\n\t\t\t\t\t// Old brwoser\n\t\t\t\t\t_on(document, 'mousemove', this._onTouchMove);\n\t\t\t\t\t_on(document, 'mouseup', this._onDrop);\n\t\t\t\t}\n\n\t\t\t\tthis._loopId = setInterval(this._emulateDragOver, 50);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (dataTransfer) {\n\t\t\t\t\tdataTransfer.effectAllowed = 'move';\n\t\t\t\t\toptions.setData && options.setData.call(this, dataTransfer, dragEl);\n\t\t\t\t}\n\n\t\t\t\t_on(document, 'drop', this);\n\t\t\t\tsetTimeout(this._dragStarted, 0);\n\t\t\t}\n\t\t},\n\n\t\t_onDragOver: function (/**Event*/evt) {\n\t\t\tvar el = this.el,\n\t\t\t\ttarget,\n\t\t\t\tdragRect,\n\t\t\t\ttargetRect,\n\t\t\t\trevert,\n\t\t\t\toptions = this.options,\n\t\t\t\tgroup = options.group,\n\t\t\t\tactiveSortable = Sortable.active,\n\t\t\t\tisOwner = (activeGroup === group),\n\t\t\t\tisMovingBetweenSortable = false,\n\t\t\t\tcanSort = options.sort;\n\n\t\t\tif (evt.preventDefault !== void 0) {\n\t\t\t\tevt.preventDefault();\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation();\n\t\t\t}\n\n\t\t\tif (dragEl.animated) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmoved = true;\n\n\t\t\tif (activeSortable && !options.disabled &&\n\t\t\t\t(isOwner\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\n\t\t\t\t\t: (\n\t\t\t\t\t\tputSortable === this ||\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(activeSortable.lastPullMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&\n\t\t\t\t\t\t\tgroup.checkPut(this, activeSortable, dragEl, evt)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t) &&\n\t\t\t\t(evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback\n\t\t\t) {\n\t\t\t\t// Smart auto-scrolling\n\t\t\t\t_autoScroll(evt, options, this.el);\n\n\t\t\t\tif (_silent) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttarget = _closest(evt.target, options.draggable, el);\n\t\t\t\tdragRect = dragEl.getBoundingClientRect();\n\n\t\t\t\tif (putSortable !== this) {\n\t\t\t\t\tputSortable = this;\n\t\t\t\t\tisMovingBetweenSortable = true;\n\t\t\t\t}\n\n\t\t\t\tif (revert) {\n\t\t\t\t\t_cloneHide(activeSortable, true);\n\t\t\t\t\tparentEl = rootEl; // actualization\n\n\t\t\t\t\tif (cloneEl || nextEl) {\n\t\t\t\t\t\trootEl.insertBefore(dragEl, cloneEl || nextEl);\n\t\t\t\t\t}\n\t\t\t\t\telse if (!canSort) {\n\t\t\t\t\t\trootEl.appendChild(dragEl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\n\t\t\t\tif ((el.children.length === 0) || (el.children[0] === ghostEl) ||\n\t\t\t\t\t(el === evt.target) && (_ghostIsLast(el, evt))\n\t\t\t\t) {\n\t\t\t\t\t//assign target only if condition is true\n\t\t\t\t\tif (el.children.length !== 0 && el.children[0] !== ghostEl && el === evt.target) {\n\t\t\t\t\t\ttarget = el.lastElementChild;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (target) {\n\t\t\t\t\t\tif (target.animated) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetRect = target.getBoundingClientRect();\n\t\t\t\t\t}\n\n\t\t\t\t\t_cloneHide(activeSortable, isOwner);\n\n\t\t\t\t\tif (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt) !== false) {\n\t\t\t\t\t\tif (!dragEl.contains(el)) {\n\t\t\t\t\t\t\tel.appendChild(dragEl);\n\t\t\t\t\t\t\tparentEl = el; // actualization\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._animate(dragRect, dragEl);\n\t\t\t\t\t\ttarget && this._animate(targetRect, target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (target && !target.animated && target !== dragEl && (target.parentNode[expando] !== void 0)) {\n\t\t\t\t\tif (lastEl !== target) {\n\t\t\t\t\t\tlastEl = target;\n\t\t\t\t\t\tlastCSS = _css(target);\n\t\t\t\t\t\tlastParentCSS = _css(target.parentNode);\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetRect = target.getBoundingClientRect();\n\n\t\t\t\t\tvar width = targetRect.right - targetRect.left,\n\t\t\t\t\t\theight = targetRect.bottom - targetRect.top,\n\t\t\t\t\t\tfloating = R_FLOAT.test(lastCSS.cssFloat + lastCSS.display)\n\t\t\t\t\t\t\t|| (lastParentCSS.display == 'flex' && lastParentCSS['flex-direction'].indexOf('row') === 0),\n\t\t\t\t\t\tisWide = (target.offsetWidth > dragEl.offsetWidth),\n\t\t\t\t\t\tisLong = (target.offsetHeight > dragEl.offsetHeight),\n\t\t\t\t\t\thalfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,\n\t\t\t\t\t\tnextSibling = target.nextElementSibling,\n\t\t\t\t\t\tafter = false\n\t\t\t\t\t;\n\n\t\t\t\t\tif (floating) {\n\t\t\t\t\t\tvar elTop = dragEl.offsetTop,\n\t\t\t\t\t\t\ttgTop = target.offsetTop;\n\n\t\t\t\t\t\tif (elTop === tgTop) {\n\t\t\t\t\t\t\tafter = (target.previousElementSibling === dragEl) && !isWide || halfway && isWide;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (target.previousElementSibling === dragEl || dragEl.previousElementSibling === target) {\n\t\t\t\t\t\t\tafter = (evt.clientY - targetRect.top) / height > 0.5;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tafter = tgTop > elTop;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (!isMovingBetweenSortable) {\n\t\t\t\t\t\tafter = (nextSibling !== dragEl) && !isLong || halfway && isLong;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\n\n\t\t\t\t\tif (moveVector !== false) {\n\t\t\t\t\t\tif (moveVector === 1 || moveVector === -1) {\n\t\t\t\t\t\t\tafter = (moveVector === 1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_silent = true;\n\t\t\t\t\t\tsetTimeout(_unsilent, 30);\n\n\t\t\t\t\t\t_cloneHide(activeSortable, isOwner);\n\n\t\t\t\t\t\tif (!dragEl.contains(el)) {\n\t\t\t\t\t\t\tif (after && !nextSibling) {\n\t\t\t\t\t\t\t\tel.appendChild(dragEl);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tparentEl = dragEl.parentNode; // actualization\n\n\t\t\t\t\t\tthis._animate(dragRect, dragEl);\n\t\t\t\t\t\tthis._animate(targetRect, target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_animate: function (prevRect, target) {\n\t\t\tvar ms = this.options.animation;\n\n\t\t\tif (ms) {\n\t\t\t\tvar currentRect = target.getBoundingClientRect();\n\n\t\t\t\tif (prevRect.nodeType === 1) {\n\t\t\t\t\tprevRect = prevRect.getBoundingClientRect();\n\t\t\t\t}\n\n\t\t\t\t_css(target, 'transition', 'none');\n\t\t\t\t_css(target, 'transform', 'translate3d('\n\t\t\t\t\t+ (prevRect.left - currentRect.left) + 'px,'\n\t\t\t\t\t+ (prevRect.top - currentRect.top) + 'px,0)'\n\t\t\t\t);\n\n\t\t\t\ttarget.offsetWidth; // repaint\n\n\t\t\t\t_css(target, 'transition', 'all ' + ms + 'ms');\n\t\t\t\t_css(target, 'transform', 'translate3d(0,0,0)');\n\n\t\t\t\tclearTimeout(target.animated);\n\t\t\t\ttarget.animated = setTimeout(function () {\n\t\t\t\t\t_css(target, 'transition', '');\n\t\t\t\t\t_css(target, 'transform', '');\n\t\t\t\t\ttarget.animated = false;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t},\n\n\t\t_offUpEvents: function () {\n\t\t\tvar ownerDocument = this.el.ownerDocument;\n\n\t\t\t_off(document, 'touchmove', this._onTouchMove);\n\t\t\t_off(document, 'pointermove', this._onTouchMove);\n\t\t\t_off(ownerDocument, 'mouseup', this._onDrop);\n\t\t\t_off(ownerDocument, 'touchend', this._onDrop);\n\t\t\t_off(ownerDocument, 'pointerup', this._onDrop);\n\t\t\t_off(ownerDocument, 'touchcancel', this._onDrop);\n\t\t\t_off(ownerDocument, 'pointercancel', this._onDrop);\n\t\t\t_off(ownerDocument, 'selectstart', this);\n\t\t},\n\n\t\t_onDrop: function (/**Event*/evt) {\n\t\t\tvar el = this.el,\n\t\t\t\toptions = this.options;\n\n\t\t\tclearInterval(this._loopId);\n\t\t\tclearInterval(autoScroll.pid);\n\t\t\tclearTimeout(this._dragStartTimer);\n\n\t\t\t// Unbind events\n\t\t\t_off(document, 'mousemove', this._onTouchMove);\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t_off(document, 'drop', this);\n\t\t\t\t_off(el, 'dragstart', this._onDragStart);\n\t\t\t}\n\n\t\t\tthis._offUpEvents();\n\n\t\t\tif (evt) {\n\t\t\t\tif (moved) {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t!options.dropBubble && evt.stopPropagation();\n\t\t\t\t}\n\n\t\t\t\tghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n\t\t\t\tif (rootEl === parentEl || Sortable.active.lastPullMode !== 'clone') {\n\t\t\t\t\t// Remove clone\n\t\t\t\t\tcloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);\n\t\t\t\t}\n\n\t\t\t\tif (dragEl) {\n\t\t\t\t\tif (this.nativeDraggable) {\n\t\t\t\t\t\t_off(dragEl, 'dragend', this);\n\t\t\t\t\t}\n\n\t\t\t\t\t_disableDraggable(dragEl);\n\t\t\t\t\tdragEl.style['will-change'] = '';\n\n\t\t\t\t\t// Remove class's\n\t\t\t\t\t_toggleClass(dragEl, this.options.ghostClass, false);\n\t\t\t\t\t_toggleClass(dragEl, this.options.chosenClass, false);\n\n\t\t\t\t\t// Drag stop event\n\t\t\t\t\t_dispatchEvent(this, rootEl, 'unchoose', dragEl, rootEl, oldIndex);\n\n\t\t\t\t\tif (rootEl !== parentEl) {\n\t\t\t\t\t\tnewIndex = _index(dragEl, options.draggable);\n\n\t\t\t\t\t\tif (newIndex >= 0) {\n\t\t\t\t\t\t\t// Add event\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'add', dragEl, rootEl, oldIndex, newIndex);\n\n\t\t\t\t\t\t\t// Remove event\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'remove', dragEl, rootEl, oldIndex, newIndex);\n\n\t\t\t\t\t\t\t// drag from one list and drop into another\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'sort', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent\n\t\t\t\t\t\t\tnewIndex = _index(dragEl, options.draggable);\n\n\t\t\t\t\t\t\tif (newIndex >= 0) {\n\t\t\t\t\t\t\t\t// drag & drop within the same list\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'update', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Sortable.active) {\n\t\t\t\t\t\t/* jshint eqnull:true */\n\t\t\t\t\t\tif (newIndex == null || newIndex === -1) {\n\t\t\t\t\t\t\tnewIndex = oldIndex;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'end', dragEl, rootEl, oldIndex, newIndex);\n\n\t\t\t\t\t\t// Save sorting\n\t\t\t\t\t\tthis.save();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._nulling();\n\t\t},\n\n\t\t_nulling: function() {\n\t\t\trootEl =\n\t\t\tdragEl =\n\t\t\tparentEl =\n\t\t\tghostEl =\n\t\t\tnextEl =\n\t\t\tcloneEl =\n\t\t\tlastDownEl =\n\n\t\t\tscrollEl =\n\t\t\tscrollParentEl =\n\n\t\t\ttapEvt =\n\t\t\ttouchEvt =\n\n\t\t\tmoved =\n\t\t\tnewIndex =\n\n\t\t\tlastEl =\n\t\t\tlastCSS =\n\n\t\t\tputSortable =\n\t\t\tactiveGroup =\n\t\t\tSortable.active = null;\n\n\t\t\tsavedInputChecked.forEach(function (el) {\n\t\t\t\tel.checked = true;\n\t\t\t});\n\t\t\tsavedInputChecked.length = 0;\n\t\t},\n\n\t\thandleEvent: function (/**Event*/evt) {\n\t\t\tswitch (evt.type) {\n\t\t\t\tcase 'drop':\n\t\t\t\tcase 'dragend':\n\t\t\t\t\tthis._onDrop(evt);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'dragover':\n\t\t\t\tcase 'dragenter':\n\t\t\t\t\tif (dragEl) {\n\t\t\t\t\t\tthis._onDragOver(evt);\n\t\t\t\t\t\t_globalDragOver(evt);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'selectstart':\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Serializes the item into an array of string.\n\t\t * @returns {String[]}\n\t\t */\n\t\ttoArray: function () {\n\t\t\tvar order = [],\n\t\t\t\tel,\n\t\t\t\tchildren = this.el.children,\n\t\t\t\ti = 0,\n\t\t\t\tn = children.length,\n\t\t\t\toptions = this.options;\n\n\t\t\tfor (; i < n; i++) {\n\t\t\t\tel = children[i];\n\t\t\t\tif (_closest(el, options.draggable, this.el)) {\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn order;\n\t\t},\n\n\n\t\t/**\n\t\t * Sorts the elements according to the array.\n\t\t * @param  {String[]}  order  order of the items\n\t\t */\n\t\tsort: function (order) {\n\t\t\tvar items = {}, rootEl = this.el;\n\n\t\t\tthis.toArray().forEach(function (id, i) {\n\t\t\t\tvar el = rootEl.children[i];\n\n\t\t\t\tif (_closest(el, this.options.draggable, rootEl)) {\n\t\t\t\t\titems[id] = el;\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\torder.forEach(function (id) {\n\t\t\t\tif (items[id]) {\n\t\t\t\t\trootEl.removeChild(items[id]);\n\t\t\t\t\trootEl.appendChild(items[id]);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\n\t\t/**\n\t\t * Save the current sorting\n\t\t */\n\t\tsave: function () {\n\t\t\tvar store = this.options.store;\n\t\t\tstore && store.set(this);\n\t\t},\n\n\n\t\t/**\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\t\t * @param   {HTMLElement}  el\n\t\t * @param   {String}       [selector]  default: `options.draggable`\n\t\t * @returns {HTMLElement|null}\n\t\t */\n\t\tclosest: function (el, selector) {\n\t\t\treturn _closest(el, selector || this.options.draggable, this.el);\n\t\t},\n\n\n\t\t/**\n\t\t * Set/get option\n\t\t * @param   {string} name\n\t\t * @param   {*}      [value]\n\t\t * @returns {*}\n\t\t */\n\t\toption: function (name, value) {\n\t\t\tvar options = this.options;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn options[name];\n\t\t\t} else {\n\t\t\t\toptions[name] = value;\n\n\t\t\t\tif (name === 'group') {\n\t\t\t\t\t_prepareGroup(options);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Destroy\n\t\t */\n\t\tdestroy: function () {\n\t\t\tvar el = this.el;\n\n\t\t\tel[expando] = null;\n\n\t\t\t_off(el, 'mousedown', this._onTapStart);\n\t\t\t_off(el, 'touchstart', this._onTapStart);\n\t\t\t_off(el, 'pointerdown', this._onTapStart);\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t_off(el, 'dragover', this);\n\t\t\t\t_off(el, 'dragenter', this);\n\t\t\t}\n\n\t\t\t// Remove draggable attributes\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n\t\t\t\tel.removeAttribute('draggable');\n\t\t\t});\n\n\t\t\ttouchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);\n\n\t\t\tthis._onDrop();\n\n\t\t\tthis.el = el = null;\n\t\t}\n\t};\n\n\n\tfunction _cloneHide(sortable, state) {\n\t\tif (sortable.lastPullMode !== 'clone') {\n\t\t\tstate = true;\n\t\t}\n\n\t\tif (cloneEl && (cloneEl.state !== state)) {\n\t\t\t_css(cloneEl, 'display', state ? 'none' : '');\n\n\t\t\tif (!state) {\n\t\t\t\tif (cloneEl.state) {\n\t\t\t\t\tif (sortable.options.group.revertClone) {\n\t\t\t\t\t\trootEl.insertBefore(cloneEl, nextEl);\n\t\t\t\t\t\tsortable._animate(dragEl, cloneEl);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trootEl.insertBefore(cloneEl, dragEl);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcloneEl.state = state;\n\t\t}\n\t}\n\n\n\tfunction _closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx) {\n\t\tif (el) {\n\t\t\tctx = ctx || document;\n\n\t\t\tdo {\n\t\t\t\tif ((selector === '>*' && el.parentNode === ctx) || _matches(el, selector)) {\n\t\t\t\t\treturn el;\n\t\t\t\t}\n\t\t\t\t/* jshint boss:true */\n\t\t\t} while (el = _getParentOrHost(el));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\n\tfunction _getParentOrHost(el) {\n\t\tvar parent = el.host;\n\n\t\treturn (parent && parent.nodeType) ? parent : el.parentNode;\n\t}\n\n\n\tfunction _globalDragOver(/**Event*/evt) {\n\t\tif (evt.dataTransfer) {\n\t\t\tevt.dataTransfer.dropEffect = 'move';\n\t\t}\n\t\tevt.preventDefault();\n\t}\n\n\n\tfunction _on(el, event, fn) {\n\t\tel.addEventListener(event, fn, captureMode);\n\t}\n\n\n\tfunction _off(el, event, fn) {\n\t\tel.removeEventListener(event, fn, captureMode);\n\t}\n\n\n\tfunction _toggleClass(el, name, state) {\n\t\tif (el) {\n\t\t\tif (el.classList) {\n\t\t\t\tel.classList[state ? 'add' : 'remove'](name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');\n\t\t\t\tel.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction _css(el, prop, val) {\n\t\tvar style = el && el.style;\n\n\t\tif (style) {\n\t\t\tif (val === void 0) {\n\t\t\t\tif (document.defaultView && document.defaultView.getComputedStyle) {\n\t\t\t\t\tval = document.defaultView.getComputedStyle(el, '');\n\t\t\t\t}\n\t\t\t\telse if (el.currentStyle) {\n\t\t\t\t\tval = el.currentStyle;\n\t\t\t\t}\n\n\t\t\t\treturn prop === void 0 ? val : val[prop];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!(prop in style)) {\n\t\t\t\t\tprop = '-webkit-' + prop;\n\t\t\t\t}\n\n\t\t\t\tstyle[prop] = val + (typeof val === 'string' ? '' : 'px');\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction _find(ctx, tagName, iterator) {\n\t\tif (ctx) {\n\t\t\tvar list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\n\n\t\t\tif (iterator) {\n\t\t\t\tfor (; i < n; i++) {\n\t\t\t\t\titerator(list[i], i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\n\n\tfunction _dispatchEvent(sortable, rootEl, name, targetEl, fromEl, startIndex, newIndex) {\n\t\tsortable = (sortable || rootEl[expando]);\n\n\t\tvar evt = document.createEvent('Event'),\n\t\t\toptions = sortable.options,\n\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);\n\n\t\tevt.initEvent(name, true, true);\n\n\t\tevt.to = rootEl;\n\t\tevt.from = fromEl || rootEl;\n\t\tevt.item = targetEl || rootEl;\n\t\tevt.clone = cloneEl;\n\n\t\tevt.oldIndex = startIndex;\n\t\tevt.newIndex = newIndex;\n\n\t\trootEl.dispatchEvent(evt);\n\n\t\tif (options[onName]) {\n\t\t\toptions[onName].call(sortable, evt);\n\t\t}\n\t}\n\n\n\tfunction _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {\n\t\tvar evt,\n\t\t\tsortable = fromEl[expando],\n\t\t\tonMoveFn = sortable.options.onMove,\n\t\t\tretVal;\n\n\t\tevt = document.createEvent('Event');\n\t\tevt.initEvent('move', true, true);\n\n\t\tevt.to = toEl;\n\t\tevt.from = fromEl;\n\t\tevt.dragged = dragEl;\n\t\tevt.draggedRect = dragRect;\n\t\tevt.related = targetEl || toEl;\n\t\tevt.relatedRect = targetRect || toEl.getBoundingClientRect();\n\t\tevt.willInsertAfter = willInsertAfter;\n\n\t\tfromEl.dispatchEvent(evt);\n\n\t\tif (onMoveFn) {\n\t\t\tretVal = onMoveFn.call(sortable, evt, originalEvt);\n\t\t}\n\n\t\treturn retVal;\n\t}\n\n\n\tfunction _disableDraggable(el) {\n\t\tel.draggable = false;\n\t}\n\n\n\tfunction _unsilent() {\n\t\t_silent = false;\n\t}\n\n\n\t/** @returns {HTMLElement|false} */\n\tfunction _ghostIsLast(el, evt) {\n\t\tvar lastEl = el.lastElementChild,\n\t\t\trect = lastEl.getBoundingClientRect();\n\n\t\t// 5 — min delta\n\t\t// abs — нельзя добавлять, а то глюки при наведении сверху\n\t\treturn (evt.clientY - (rect.top + rect.height) > 5) ||\n\t\t\t(evt.clientX - (rect.left + rect.width) > 5);\n\t}\n\n\n\t/**\n\t * Generate id\n\t * @param   {HTMLElement} el\n\t * @returns {String}\n\t * @private\n\t */\n\tfunction _generateId(el) {\n\t\tvar str = el.tagName + el.className + el.src + el.href + el.textContent,\n\t\t\ti = str.length,\n\t\t\tsum = 0;\n\n\t\twhile (i--) {\n\t\t\tsum += str.charCodeAt(i);\n\t\t}\n\n\t\treturn sum.toString(36);\n\t}\n\n\t/**\n\t * Returns the index of an element within its parent for a selected set of\n\t * elements\n\t * @param  {HTMLElement} el\n\t * @param  {selector} selector\n\t * @return {number}\n\t */\n\tfunction _index(el, selector) {\n\t\tvar index = 0;\n\n\t\tif (!el || !el.parentNode) {\n\t\t\treturn -1;\n\t\t}\n\n\t\twhile (el && (el = el.previousElementSibling)) {\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && (selector === '>*' || _matches(el, selector))) {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tfunction _matches(/**HTMLElement*/el, /**String*/selector) {\n\t\tif (el) {\n\t\t\tselector = selector.split('.');\n\n\t\t\tvar tag = selector.shift().toUpperCase(),\n\t\t\t\tre = new RegExp('\\\\s(' + selector.join('|') + ')(?=\\\\s)', 'g');\n\n\t\t\treturn (\n\t\t\t\t(tag === '' || el.nodeName.toUpperCase() == tag) &&\n\t\t\t\t(!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length)\n\t\t\t);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfunction _throttle(callback, ms) {\n\t\tvar args, _this;\n\n\t\treturn function () {\n\t\t\tif (args === void 0) {\n\t\t\t\targs = arguments;\n\t\t\t\t_this = this;\n\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (args.length === 1) {\n\t\t\t\t\t\tcallback.call(_this, args[0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback.apply(_this, args);\n\t\t\t\t\t}\n\n\t\t\t\t\targs = void 0;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction _extend(dst, src) {\n\t\tif (dst && src) {\n\t\t\tfor (var key in src) {\n\t\t\t\tif (src.hasOwnProperty(key)) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\n\tfunction _clone(el) {\n\t\treturn $\n\t\t\t? $(el).clone(true)[0]\n\t\t\t: (Polymer && Polymer.dom\n\t\t\t\t? Polymer.dom(el).cloneNode(true)\n\t\t\t\t: el.cloneNode(true)\n\t\t\t);\n\t}\n\n\tfunction _saveInputCheckedState(root) {\n\t\tvar inputs = root.getElementsByTagName('input');\n\t\tvar idx = inputs.length;\n\n\t\twhile (idx--) {\n\t\t\tvar el = inputs[idx];\n\t\t\tel.checked && savedInputChecked.push(el);\n\t\t}\n\t}\n\n\t// Fixed #973: \n\t_on(document, 'touchmove', function (evt) {\n\t\tif (Sortable.active) {\n\t\t\tevt.preventDefault();\n\t\t}\n\t});\n\n\ttry {\n\t\twindow.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n\t\t\tget: function () {\n\t\t\t\tcaptureMode = {\n\t\t\t\t\tcapture: false,\n\t\t\t\t\tpassive: false\n\t\t\t\t};\n\t\t\t}\n\t\t}));\n\t} catch (err) {}\n\n\t// Export utils\n\tSortable.utils = {\n\t\ton: _on,\n\t\toff: _off,\n\t\tcss: _css,\n\t\tfind: _find,\n\t\tis: function (el, selector) {\n\t\t\treturn !!_closest(el, selector, el);\n\t\t},\n\t\textend: _extend,\n\t\tthrottle: _throttle,\n\t\tclosest: _closest,\n\t\ttoggleClass: _toggleClass,\n\t\tclone: _clone,\n\t\tindex: _index\n\t};\n\n\n\t/**\n\t * Create sortable instance\n\t * @param {HTMLElement}  el\n\t * @param {Object}      [options]\n\t */\n\tSortable.create = function (el, options) {\n\t\treturn new Sortable(el, options);\n\t};\n\n\n\t// Export\n\tSortable.version = '1.6.0';\n\treturn Sortable;\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NvcnRhYmxlanMvU29ydGFibGUuanM/Nzg4NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQjs7QUFFakI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQSxhQUFhLFlBQVk7QUFDekIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDs7QUFFQSxlQUFlO0FBQ2YscUNBQXFDOzs7QUFHckM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWDs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOzs7QUFHQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1Qjs7QUFFdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCOztBQUV2QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLE9BQU87QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRzs7O0FBR0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQixlQUFlLE9BQU87QUFDdEIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxFQUFFO0FBQ2pCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsT0FBTztBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7O0FBSUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7O0FBR0EsZUFBZSxrQkFBa0I7QUFDakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQSxjQUFjLFlBQVk7QUFDMUIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFlBQVk7QUFDekIsYUFBYSxTQUFTO0FBQ3RCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBLFlBQVksWUFBWTtBQUN4QixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiohXG4gKiBTb3J0YWJsZVxuICogQGF1dGhvclx0UnViYVhhICAgPHRyYXNoQHJ1YmF4YS5vcmc+XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG4oZnVuY3Rpb24gc29ydGFibGVNb2R1bGUoZmFjdG9yeSkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0LyoganNoaW50IHN1Yjp0cnVlICovXG5cdFx0d2luZG93W1wiU29ydGFibGVcIl0gPSBmYWN0b3J5KCk7XG5cdH1cbn0pKGZ1bmN0aW9uIHNvcnRhYmxlRmFjdG9yeSgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKHR5cGVvZiB3aW5kb3cgPT0gXCJ1bmRlZmluZWRcIiB8fCAhd2luZG93LmRvY3VtZW50KSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNvcnRhYmxlRXJyb3IoKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJTb3J0YWJsZS5qcyByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIik7XG5cdFx0fTtcblx0fVxuXG5cdHZhciBkcmFnRWwsXG5cdFx0cGFyZW50RWwsXG5cdFx0Z2hvc3RFbCxcblx0XHRjbG9uZUVsLFxuXHRcdHJvb3RFbCxcblx0XHRuZXh0RWwsXG5cdFx0bGFzdERvd25FbCxcblxuXHRcdHNjcm9sbEVsLFxuXHRcdHNjcm9sbFBhcmVudEVsLFxuXHRcdHNjcm9sbEN1c3RvbUZuLFxuXG5cdFx0bGFzdEVsLFxuXHRcdGxhc3RDU1MsXG5cdFx0bGFzdFBhcmVudENTUyxcblxuXHRcdG9sZEluZGV4LFxuXHRcdG5ld0luZGV4LFxuXG5cdFx0YWN0aXZlR3JvdXAsXG5cdFx0cHV0U29ydGFibGUsXG5cblx0XHRhdXRvU2Nyb2xsID0ge30sXG5cblx0XHR0YXBFdnQsXG5cdFx0dG91Y2hFdnQsXG5cblx0XHRtb3ZlZCxcblxuXHRcdC8qKiBAY29uc3QgKi9cblx0XHRSX1NQQUNFID0gL1xccysvZyxcblx0XHRSX0ZMT0FUID0gL2xlZnR8cmlnaHR8aW5saW5lLyxcblxuXHRcdGV4cGFuZG8gPSAnU29ydGFibGUnICsgKG5ldyBEYXRlKS5nZXRUaW1lKCksXG5cblx0XHR3aW4gPSB3aW5kb3csXG5cdFx0ZG9jdW1lbnQgPSB3aW4uZG9jdW1lbnQsXG5cdFx0cGFyc2VJbnQgPSB3aW4ucGFyc2VJbnQsXG5cblx0XHQkID0gd2luLmpRdWVyeSB8fCB3aW4uWmVwdG8sXG5cdFx0UG9seW1lciA9IHdpbi5Qb2x5bWVyLFxuXG5cdFx0Y2FwdHVyZU1vZGUgPSBmYWxzZSxcblxuXHRcdHN1cHBvcnREcmFnZ2FibGUgPSAhISgnZHJhZ2dhYmxlJyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSksXG5cdFx0c3VwcG9ydENzc1BvaW50ZXJFdmVudHMgPSAoZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHQvLyBmYWxzZSB3aGVuIElFMTFcblx0XHRcdGlmICghIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1RyaWRlbnQuKnJ2WyA6XT8xMVxcLi8pKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgneCcpO1xuXHRcdFx0ZWwuc3R5bGUuY3NzVGV4dCA9ICdwb2ludGVyLWV2ZW50czphdXRvJztcblx0XHRcdHJldHVybiBlbC5zdHlsZS5wb2ludGVyRXZlbnRzID09PSAnYXV0byc7XG5cdFx0fSkoKSxcblxuXHRcdF9zaWxlbnQgPSBmYWxzZSxcblxuXHRcdGFicyA9IE1hdGguYWJzLFxuXHRcdG1pbiA9IE1hdGgubWluLFxuXG5cdFx0c2F2ZWRJbnB1dENoZWNrZWQgPSBbXSxcblx0XHR0b3VjaERyYWdPdmVyTGlzdGVuZXJzID0gW10sXG5cblx0XHRfYXV0b1Njcm9sbCA9IF90aHJvdHRsZShmdW5jdGlvbiAoLyoqRXZlbnQqL2V2dCwgLyoqT2JqZWN0Ki9vcHRpb25zLCAvKipIVE1MRWxlbWVudCovcm9vdEVsKSB7XG5cdFx0XHQvLyBCdWc6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTUwNTUyMVxuXHRcdFx0aWYgKHJvb3RFbCAmJiBvcHRpb25zLnNjcm9sbCkge1xuXHRcdFx0XHR2YXIgX3RoaXMgPSByb290RWxbZXhwYW5kb10sXG5cdFx0XHRcdFx0ZWwsXG5cdFx0XHRcdFx0cmVjdCxcblx0XHRcdFx0XHRzZW5zID0gb3B0aW9ucy5zY3JvbGxTZW5zaXRpdml0eSxcblx0XHRcdFx0XHRzcGVlZCA9IG9wdGlvbnMuc2Nyb2xsU3BlZWQsXG5cblx0XHRcdFx0XHR4ID0gZXZ0LmNsaWVudFgsXG5cdFx0XHRcdFx0eSA9IGV2dC5jbGllbnRZLFxuXG5cdFx0XHRcdFx0d2luV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCxcblx0XHRcdFx0XHR3aW5IZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQsXG5cblx0XHRcdFx0XHR2eCxcblx0XHRcdFx0XHR2eSxcblxuXHRcdFx0XHRcdHNjcm9sbE9mZnNldFgsXG5cdFx0XHRcdFx0c2Nyb2xsT2Zmc2V0WVxuXHRcdFx0XHQ7XG5cblx0XHRcdFx0Ly8gRGVsZWN0IHNjcm9sbEVsXG5cdFx0XHRcdGlmIChzY3JvbGxQYXJlbnRFbCAhPT0gcm9vdEVsKSB7XG5cdFx0XHRcdFx0c2Nyb2xsRWwgPSBvcHRpb25zLnNjcm9sbDtcblx0XHRcdFx0XHRzY3JvbGxQYXJlbnRFbCA9IHJvb3RFbDtcblx0XHRcdFx0XHRzY3JvbGxDdXN0b21GbiA9IG9wdGlvbnMuc2Nyb2xsRm47XG5cblx0XHRcdFx0XHRpZiAoc2Nyb2xsRWwgPT09IHRydWUpIHtcblx0XHRcdFx0XHRcdHNjcm9sbEVsID0gcm9vdEVsO1xuXG5cdFx0XHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0XHRcdGlmICgoc2Nyb2xsRWwub2Zmc2V0V2lkdGggPCBzY3JvbGxFbC5zY3JvbGxXaWR0aCkgfHxcblx0XHRcdFx0XHRcdFx0XHQoc2Nyb2xsRWwub2Zmc2V0SGVpZ2h0IDwgc2Nyb2xsRWwuc2Nyb2xsSGVpZ2h0KVxuXHRcdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHQvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cdFx0XHRcdFx0XHR9IHdoaWxlIChzY3JvbGxFbCA9IHNjcm9sbEVsLnBhcmVudE5vZGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChzY3JvbGxFbCkge1xuXHRcdFx0XHRcdGVsID0gc2Nyb2xsRWw7XG5cdFx0XHRcdFx0cmVjdCA9IHNjcm9sbEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRcdHZ4ID0gKGFicyhyZWN0LnJpZ2h0IC0geCkgPD0gc2VucykgLSAoYWJzKHJlY3QubGVmdCAtIHgpIDw9IHNlbnMpO1xuXHRcdFx0XHRcdHZ5ID0gKGFicyhyZWN0LmJvdHRvbSAtIHkpIDw9IHNlbnMpIC0gKGFicyhyZWN0LnRvcCAtIHkpIDw9IHNlbnMpO1xuXHRcdFx0XHR9XG5cblxuXHRcdFx0XHRpZiAoISh2eCB8fCB2eSkpIHtcblx0XHRcdFx0XHR2eCA9ICh3aW5XaWR0aCAtIHggPD0gc2VucykgLSAoeCA8PSBzZW5zKTtcblx0XHRcdFx0XHR2eSA9ICh3aW5IZWlnaHQgLSB5IDw9IHNlbnMpIC0gKHkgPD0gc2Vucyk7XG5cblx0XHRcdFx0XHQvKiBqc2hpbnQgZXhwcjp0cnVlICovXG5cdFx0XHRcdFx0KHZ4IHx8IHZ5KSAmJiAoZWwgPSB3aW4pO1xuXHRcdFx0XHR9XG5cblxuXHRcdFx0XHRpZiAoYXV0b1Njcm9sbC52eCAhPT0gdnggfHwgYXV0b1Njcm9sbC52eSAhPT0gdnkgfHwgYXV0b1Njcm9sbC5lbCAhPT0gZWwpIHtcblx0XHRcdFx0XHRhdXRvU2Nyb2xsLmVsID0gZWw7XG5cdFx0XHRcdFx0YXV0b1Njcm9sbC52eCA9IHZ4O1xuXHRcdFx0XHRcdGF1dG9TY3JvbGwudnkgPSB2eTtcblxuXHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoYXV0b1Njcm9sbC5waWQpO1xuXG5cdFx0XHRcdFx0aWYgKGVsKSB7XG5cdFx0XHRcdFx0XHRhdXRvU2Nyb2xsLnBpZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0c2Nyb2xsT2Zmc2V0WSA9IHZ5ID8gdnkgKiBzcGVlZCA6IDA7XG5cdFx0XHRcdFx0XHRcdHNjcm9sbE9mZnNldFggPSB2eCA/IHZ4ICogc3BlZWQgOiAwO1xuXG5cdFx0XHRcdFx0XHRcdGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Yoc2Nyb2xsQ3VzdG9tRm4pKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNjcm9sbEN1c3RvbUZuLmNhbGwoX3RoaXMsIHNjcm9sbE9mZnNldFgsIHNjcm9sbE9mZnNldFksIGV2dCk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoZWwgPT09IHdpbikge1xuXHRcdFx0XHRcdFx0XHRcdHdpbi5zY3JvbGxUbyh3aW4ucGFnZVhPZmZzZXQgKyBzY3JvbGxPZmZzZXRYLCB3aW4ucGFnZVlPZmZzZXQgKyBzY3JvbGxPZmZzZXRZKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRlbC5zY3JvbGxUb3AgKz0gc2Nyb2xsT2Zmc2V0WTtcblx0XHRcdFx0XHRcdFx0XHRlbC5zY3JvbGxMZWZ0ICs9IHNjcm9sbE9mZnNldFg7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0sIDI0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LCAzMCksXG5cblx0XHRfcHJlcGFyZUdyb3VwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0XHRcdGZ1bmN0aW9uIHRvRm4odmFsdWUsIHB1bGwpIHtcblx0XHRcdFx0aWYgKHZhbHVlID09PSB2b2lkIDAgfHwgdmFsdWUgPT09IHRydWUpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGdyb3VwLm5hbWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiAodG8sIGZyb20pIHtcblx0XHRcdFx0XHRcdHZhciBmcm9tR3JvdXAgPSBmcm9tLm9wdGlvbnMuZ3JvdXAubmFtZTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHB1bGxcblx0XHRcdFx0XHRcdFx0PyB2YWx1ZVxuXHRcdFx0XHRcdFx0XHQ6IHZhbHVlICYmICh2YWx1ZS5qb2luXG5cdFx0XHRcdFx0XHRcdFx0PyB2YWx1ZS5pbmRleE9mKGZyb21Hcm91cCkgPiAtMVxuXHRcdFx0XHRcdFx0XHRcdDogKGZyb21Hcm91cCA9PSB2YWx1ZSlcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHZhciBncm91cCA9IHt9O1xuXHRcdFx0dmFyIG9yaWdpbmFsR3JvdXAgPSBvcHRpb25zLmdyb3VwO1xuXG5cdFx0XHRpZiAoIW9yaWdpbmFsR3JvdXAgfHwgdHlwZW9mIG9yaWdpbmFsR3JvdXAgIT0gJ29iamVjdCcpIHtcblx0XHRcdFx0b3JpZ2luYWxHcm91cCA9IHtuYW1lOiBvcmlnaW5hbEdyb3VwfTtcblx0XHRcdH1cblxuXHRcdFx0Z3JvdXAubmFtZSA9IG9yaWdpbmFsR3JvdXAubmFtZTtcblx0XHRcdGdyb3VwLmNoZWNrUHVsbCA9IHRvRm4ob3JpZ2luYWxHcm91cC5wdWxsLCB0cnVlKTtcblx0XHRcdGdyb3VwLmNoZWNrUHV0ID0gdG9GbihvcmlnaW5hbEdyb3VwLnB1dCk7XG5cdFx0XHRncm91cC5yZXZlcnRDbG9uZSA9IG9yaWdpbmFsR3JvdXAucmV2ZXJ0Q2xvbmU7XG5cblx0XHRcdG9wdGlvbnMuZ3JvdXAgPSBncm91cDtcblx0XHR9XG5cdDtcblxuXG5cdC8qKlxuXHQgKiBAY2xhc3MgIFNvcnRhYmxlXG5cdCAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgZWxcblx0ICogQHBhcmFtICB7T2JqZWN0fSAgICAgICBbb3B0aW9uc11cblx0ICovXG5cdGZ1bmN0aW9uIFNvcnRhYmxlKGVsLCBvcHRpb25zKSB7XG5cdFx0aWYgKCEoZWwgJiYgZWwubm9kZVR5cGUgJiYgZWwubm9kZVR5cGUgPT09IDEpKSB7XG5cdFx0XHR0aHJvdyAnU29ydGFibGU6IGBlbGAgbXVzdCBiZSBIVE1MRWxlbWVudCwgYW5kIG5vdCAnICsge30udG9TdHJpbmcuY2FsbChlbCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5lbCA9IGVsOyAvLyByb290IGVsZW1lbnRcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zID0gX2V4dGVuZCh7fSwgb3B0aW9ucyk7XG5cblxuXHRcdC8vIEV4cG9ydCBpbnN0YW5jZVxuXHRcdGVsW2V4cGFuZG9dID0gdGhpcztcblxuXHRcdC8vIERlZmF1bHQgb3B0aW9uc1xuXHRcdHZhciBkZWZhdWx0cyA9IHtcblx0XHRcdGdyb3VwOiBNYXRoLnJhbmRvbSgpLFxuXHRcdFx0c29ydDogdHJ1ZSxcblx0XHRcdGRpc2FibGVkOiBmYWxzZSxcblx0XHRcdHN0b3JlOiBudWxsLFxuXHRcdFx0aGFuZGxlOiBudWxsLFxuXHRcdFx0c2Nyb2xsOiB0cnVlLFxuXHRcdFx0c2Nyb2xsU2Vuc2l0aXZpdHk6IDMwLFxuXHRcdFx0c2Nyb2xsU3BlZWQ6IDEwLFxuXHRcdFx0ZHJhZ2dhYmxlOiAvW3VvXWwvaS50ZXN0KGVsLm5vZGVOYW1lKSA/ICdsaScgOiAnPionLFxuXHRcdFx0Z2hvc3RDbGFzczogJ3NvcnRhYmxlLWdob3N0Jyxcblx0XHRcdGNob3NlbkNsYXNzOiAnc29ydGFibGUtY2hvc2VuJyxcblx0XHRcdGRyYWdDbGFzczogJ3NvcnRhYmxlLWRyYWcnLFxuXHRcdFx0aWdub3JlOiAnYSwgaW1nJyxcblx0XHRcdGZpbHRlcjogbnVsbCxcblx0XHRcdHByZXZlbnRPbkZpbHRlcjogdHJ1ZSxcblx0XHRcdGFuaW1hdGlvbjogMCxcblx0XHRcdHNldERhdGE6IGZ1bmN0aW9uIChkYXRhVHJhbnNmZXIsIGRyYWdFbCkge1xuXHRcdFx0XHRkYXRhVHJhbnNmZXIuc2V0RGF0YSgnVGV4dCcsIGRyYWdFbC50ZXh0Q29udGVudCk7XG5cdFx0XHR9LFxuXHRcdFx0ZHJvcEJ1YmJsZTogZmFsc2UsXG5cdFx0XHRkcmFnb3ZlckJ1YmJsZTogZmFsc2UsXG5cdFx0XHRkYXRhSWRBdHRyOiAnZGF0YS1pZCcsXG5cdFx0XHRkZWxheTogMCxcblx0XHRcdGZvcmNlRmFsbGJhY2s6IGZhbHNlLFxuXHRcdFx0ZmFsbGJhY2tDbGFzczogJ3NvcnRhYmxlLWZhbGxiYWNrJyxcblx0XHRcdGZhbGxiYWNrT25Cb2R5OiBmYWxzZSxcblx0XHRcdGZhbGxiYWNrVG9sZXJhbmNlOiAwLFxuXHRcdFx0ZmFsbGJhY2tPZmZzZXQ6IHt4OiAwLCB5OiAwfVxuXHRcdH07XG5cblxuXHRcdC8vIFNldCBkZWZhdWx0IG9wdGlvbnNcblx0XHRmb3IgKHZhciBuYW1lIGluIGRlZmF1bHRzKSB7XG5cdFx0XHQhKG5hbWUgaW4gb3B0aW9ucykgJiYgKG9wdGlvbnNbbmFtZV0gPSBkZWZhdWx0c1tuYW1lXSk7XG5cdFx0fVxuXG5cdFx0X3ByZXBhcmVHcm91cChvcHRpb25zKTtcblxuXHRcdC8vIEJpbmQgYWxsIHByaXZhdGUgbWV0aG9kc1xuXHRcdGZvciAodmFyIGZuIGluIHRoaXMpIHtcblx0XHRcdGlmIChmbi5jaGFyQXQoMCkgPT09ICdfJyAmJiB0eXBlb2YgdGhpc1tmbl0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0dGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldHVwIGRyYWcgbW9kZVxuXHRcdHRoaXMubmF0aXZlRHJhZ2dhYmxlID0gb3B0aW9ucy5mb3JjZUZhbGxiYWNrID8gZmFsc2UgOiBzdXBwb3J0RHJhZ2dhYmxlO1xuXG5cdFx0Ly8gQmluZCBldmVudHNcblx0XHRfb24oZWwsICdtb3VzZWRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcblx0XHRfb24oZWwsICd0b3VjaHN0YXJ0JywgdGhpcy5fb25UYXBTdGFydCk7XG5cdFx0X29uKGVsLCAncG9pbnRlcmRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcblxuXHRcdGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuXHRcdFx0X29uKGVsLCAnZHJhZ292ZXInLCB0aGlzKTtcblx0XHRcdF9vbihlbCwgJ2RyYWdlbnRlcicsIHRoaXMpO1xuXHRcdH1cblxuXHRcdHRvdWNoRHJhZ092ZXJMaXN0ZW5lcnMucHVzaCh0aGlzLl9vbkRyYWdPdmVyKTtcblxuXHRcdC8vIFJlc3RvcmUgc29ydGluZ1xuXHRcdG9wdGlvbnMuc3RvcmUgJiYgdGhpcy5zb3J0KG9wdGlvbnMuc3RvcmUuZ2V0KHRoaXMpKTtcblx0fVxuXG5cblx0U29ydGFibGUucHJvdG90eXBlID0gLyoqIEBsZW5kcyBTb3J0YWJsZS5wcm90b3R5cGUgKi8ge1xuXHRcdGNvbnN0cnVjdG9yOiBTb3J0YWJsZSxcblxuXHRcdF9vblRhcFN0YXJ0OiBmdW5jdGlvbiAoLyoqIEV2ZW50fFRvdWNoRXZlbnQgKi9ldnQpIHtcblx0XHRcdHZhciBfdGhpcyA9IHRoaXMsXG5cdFx0XHRcdGVsID0gdGhpcy5lbCxcblx0XHRcdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdFx0cHJldmVudE9uRmlsdGVyID0gb3B0aW9ucy5wcmV2ZW50T25GaWx0ZXIsXG5cdFx0XHRcdHR5cGUgPSBldnQudHlwZSxcblx0XHRcdFx0dG91Y2ggPSBldnQudG91Y2hlcyAmJiBldnQudG91Y2hlc1swXSxcblx0XHRcdFx0dGFyZ2V0ID0gKHRvdWNoIHx8IGV2dCkudGFyZ2V0LFxuXHRcdFx0XHRvcmlnaW5hbFRhcmdldCA9IGV2dC50YXJnZXQuc2hhZG93Um9vdCAmJiBldnQucGF0aFswXSB8fCB0YXJnZXQsXG5cdFx0XHRcdGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyLFxuXHRcdFx0XHRzdGFydEluZGV4O1xuXG5cdFx0XHRfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlKGVsKTtcblxuXG5cdFx0XHQvLyBEb24ndCB0cmlnZ2VyIHN0YXJ0IGV2ZW50IHdoZW4gYW4gZWxlbWVudCBpcyBiZWVuIGRyYWdnZWQsIG90aGVyd2lzZSB0aGUgZXZ0Lm9sZGluZGV4IGFsd2F5cyB3cm9uZyB3aGVuIHNldCBvcHRpb24uZ3JvdXAuXG5cdFx0XHRpZiAoZHJhZ0VsKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGUgPT09ICdtb3VzZWRvd24nICYmIGV2dC5idXR0b24gIT09IDAgfHwgb3B0aW9ucy5kaXNhYmxlZCkge1xuXHRcdFx0XHRyZXR1cm47IC8vIG9ubHkgbGVmdCBidXR0b24gb3IgZW5hYmxlZFxuXHRcdFx0fVxuXG5cblx0XHRcdHRhcmdldCA9IF9jbG9zZXN0KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsKTtcblxuXHRcdFx0aWYgKCF0YXJnZXQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAobGFzdERvd25FbCA9PT0gdGFyZ2V0KSB7XG5cdFx0XHRcdC8vIElnbm9yaW5nIGR1cGxpY2F0ZSBgZG93bmBcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnRcblx0XHRcdHN0YXJ0SW5kZXggPSBfaW5kZXgodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSk7XG5cblx0XHRcdC8vIENoZWNrIGZpbHRlclxuXHRcdFx0aWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0aWYgKGZpbHRlci5jYWxsKHRoaXMsIGV2dCwgdGFyZ2V0LCB0aGlzKSkge1xuXHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KF90aGlzLCBvcmlnaW5hbFRhcmdldCwgJ2ZpbHRlcicsIHRhcmdldCwgZWwsIHN0YXJ0SW5kZXgpO1xuXHRcdFx0XHRcdHByZXZlbnRPbkZpbHRlciAmJiBldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRyZXR1cm47IC8vIGNhbmNlbCBkbmRcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoZmlsdGVyKSB7XG5cdFx0XHRcdGZpbHRlciA9IGZpbHRlci5zcGxpdCgnLCcpLnNvbWUoZnVuY3Rpb24gKGNyaXRlcmlhKSB7XG5cdFx0XHRcdFx0Y3JpdGVyaWEgPSBfY2xvc2VzdChvcmlnaW5hbFRhcmdldCwgY3JpdGVyaWEudHJpbSgpLCBlbCk7XG5cblx0XHRcdFx0XHRpZiAoY3JpdGVyaWEpIHtcblx0XHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KF90aGlzLCBjcml0ZXJpYSwgJ2ZpbHRlcicsIHRhcmdldCwgZWwsIHN0YXJ0SW5kZXgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZiAoZmlsdGVyKSB7XG5cdFx0XHRcdFx0cHJldmVudE9uRmlsdGVyICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdHJldHVybjsgLy8gY2FuY2VsIGRuZFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvcHRpb25zLmhhbmRsZSAmJiAhX2Nsb3Nlc3Qob3JpZ2luYWxUYXJnZXQsIG9wdGlvbnMuaGFuZGxlLCBlbCkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQcmVwYXJlIGBkcmFnc3RhcnRgXG5cdFx0XHR0aGlzLl9wcmVwYXJlRHJhZ1N0YXJ0KGV2dCwgdG91Y2gsIHRhcmdldCwgc3RhcnRJbmRleCk7XG5cdFx0fSxcblxuXHRcdF9wcmVwYXJlRHJhZ1N0YXJ0OiBmdW5jdGlvbiAoLyoqIEV2ZW50ICovZXZ0LCAvKiogVG91Y2ggKi90b3VjaCwgLyoqIEhUTUxFbGVtZW50ICovdGFyZ2V0LCAvKiogTnVtYmVyICovc3RhcnRJbmRleCkge1xuXHRcdFx0dmFyIF90aGlzID0gdGhpcyxcblx0XHRcdFx0ZWwgPSBfdGhpcy5lbCxcblx0XHRcdFx0b3B0aW9ucyA9IF90aGlzLm9wdGlvbnMsXG5cdFx0XHRcdG93bmVyRG9jdW1lbnQgPSBlbC5vd25lckRvY3VtZW50LFxuXHRcdFx0XHRkcmFnU3RhcnRGbjtcblxuXHRcdFx0aWYgKHRhcmdldCAmJiAhZHJhZ0VsICYmICh0YXJnZXQucGFyZW50Tm9kZSA9PT0gZWwpKSB7XG5cdFx0XHRcdHRhcEV2dCA9IGV2dDtcblxuXHRcdFx0XHRyb290RWwgPSBlbDtcblx0XHRcdFx0ZHJhZ0VsID0gdGFyZ2V0O1xuXHRcdFx0XHRwYXJlbnRFbCA9IGRyYWdFbC5wYXJlbnROb2RlO1xuXHRcdFx0XHRuZXh0RWwgPSBkcmFnRWwubmV4dFNpYmxpbmc7XG5cdFx0XHRcdGxhc3REb3duRWwgPSB0YXJnZXQ7XG5cdFx0XHRcdGFjdGl2ZUdyb3VwID0gb3B0aW9ucy5ncm91cDtcblx0XHRcdFx0b2xkSW5kZXggPSBzdGFydEluZGV4O1xuXG5cdFx0XHRcdHRoaXMuX2xhc3RYID0gKHRvdWNoIHx8IGV2dCkuY2xpZW50WDtcblx0XHRcdFx0dGhpcy5fbGFzdFkgPSAodG91Y2ggfHwgZXZ0KS5jbGllbnRZO1xuXG5cdFx0XHRcdGRyYWdFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICd0cmFuc2Zvcm0nO1xuXG5cdFx0XHRcdGRyYWdTdGFydEZuID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdC8vIERlbGF5ZWQgZHJhZyBoYXMgYmVlbiB0cmlnZ2VyZWRcblx0XHRcdFx0XHQvLyB3ZSBjYW4gcmUtZW5hYmxlIHRoZSBldmVudHM6IHRvdWNobW92ZS9tb3VzZW1vdmVcblx0XHRcdFx0XHRfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKCk7XG5cblx0XHRcdFx0XHQvLyBNYWtlIHRoZSBlbGVtZW50IGRyYWdnYWJsZVxuXHRcdFx0XHRcdGRyYWdFbC5kcmFnZ2FibGUgPSBfdGhpcy5uYXRpdmVEcmFnZ2FibGU7XG5cblx0XHRcdFx0XHQvLyBDaG9zZW4gaXRlbVxuXHRcdFx0XHRcdF90b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuY2hvc2VuQ2xhc3MsIHRydWUpO1xuXG5cdFx0XHRcdFx0Ly8gQmluZCB0aGUgZXZlbnRzOiBkcmFnc3RhcnQvZHJhZ2VuZFxuXHRcdFx0XHRcdF90aGlzLl90cmlnZ2VyRHJhZ1N0YXJ0KGV2dCwgdG91Y2gpO1xuXG5cdFx0XHRcdFx0Ly8gRHJhZyBzdGFydCBldmVudFxuXHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KF90aGlzLCByb290RWwsICdjaG9vc2UnLCBkcmFnRWwsIHJvb3RFbCwgb2xkSW5kZXgpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIERpc2FibGUgXCJkcmFnZ2FibGVcIlxuXHRcdFx0XHRvcHRpb25zLmlnbm9yZS5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24gKGNyaXRlcmlhKSB7XG5cdFx0XHRcdFx0X2ZpbmQoZHJhZ0VsLCBjcml0ZXJpYS50cmltKCksIF9kaXNhYmxlRHJhZ2dhYmxlKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0X29uKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgX3RoaXMuX29uRHJvcCk7XG5cdFx0XHRcdF9vbihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCBfdGhpcy5fb25Ecm9wKTtcblx0XHRcdFx0X29uKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9vbkRyb3ApO1xuXHRcdFx0XHRfb24ob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJjYW5jZWwnLCBfdGhpcy5fb25Ecm9wKTtcblx0XHRcdFx0X29uKG93bmVyRG9jdW1lbnQsICdzZWxlY3RzdGFydCcsIF90aGlzKTtcblxuXHRcdFx0XHRpZiAob3B0aW9ucy5kZWxheSkge1xuXHRcdFx0XHRcdC8vIElmIHRoZSB1c2VyIG1vdmVzIHRoZSBwb2ludGVyIG9yIGxldCBnbyB0aGUgY2xpY2sgb3IgdG91Y2hcblx0XHRcdFx0XHQvLyBiZWZvcmUgdGhlIGRlbGF5IGhhcyBiZWVuIHJlYWNoZWQ6XG5cdFx0XHRcdFx0Ly8gZGlzYWJsZSB0aGUgZGVsYXllZCBkcmFnXG5cdFx0XHRcdFx0X29uKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG5cdFx0XHRcdFx0X29uKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuXHRcdFx0XHRcdF9vbihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcblx0XHRcdFx0XHRfb24ob3duZXJEb2N1bWVudCwgJ21vdXNlbW92ZScsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuXHRcdFx0XHRcdF9vbihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG5cdFx0XHRcdFx0X29uKG93bmVyRG9jdW1lbnQsICdwb2ludGVybW92ZScsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuXG5cdFx0XHRcdFx0X3RoaXMuX2RyYWdTdGFydFRpbWVyID0gc2V0VGltZW91dChkcmFnU3RhcnRGbiwgb3B0aW9ucy5kZWxheSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZHJhZ1N0YXJ0Rm4oKTtcblx0XHRcdFx0fVxuXG5cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X2Rpc2FibGVEZWxheWVkRHJhZzogZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIG93bmVyRG9jdW1lbnQgPSB0aGlzLmVsLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLl9kcmFnU3RhcnRUaW1lcik7XG5cdFx0XHRfb2ZmKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcblx0XHRcdF9vZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcblx0XHRcdF9vZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcblx0XHRcdF9vZmYob3duZXJEb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG5cdFx0XHRfb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuXHRcdFx0X29mZihvd25lckRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuXHRcdH0sXG5cblx0XHRfdHJpZ2dlckRyYWdTdGFydDogZnVuY3Rpb24gKC8qKiBFdmVudCAqL2V2dCwgLyoqIFRvdWNoICovdG91Y2gpIHtcblx0XHRcdHRvdWNoID0gdG91Y2ggfHwgKGV2dC5wb2ludGVyVHlwZSA9PSAndG91Y2gnID8gZXZ0IDogbnVsbCk7XG5cblx0XHRcdGlmICh0b3VjaCkge1xuXHRcdFx0XHQvLyBUb3VjaCBkZXZpY2Ugc3VwcG9ydFxuXHRcdFx0XHR0YXBFdnQgPSB7XG5cdFx0XHRcdFx0dGFyZ2V0OiBkcmFnRWwsXG5cdFx0XHRcdFx0Y2xpZW50WDogdG91Y2guY2xpZW50WCxcblx0XHRcdFx0XHRjbGllbnRZOiB0b3VjaC5jbGllbnRZXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dGhpcy5fb25EcmFnU3RhcnQodGFwRXZ0LCAndG91Y2gnKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCF0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuXHRcdFx0XHR0aGlzLl9vbkRyYWdTdGFydCh0YXBFdnQsIHRydWUpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdF9vbihkcmFnRWwsICdkcmFnZW5kJywgdGhpcyk7XG5cdFx0XHRcdF9vbihyb290RWwsICdkcmFnc3RhcnQnLCB0aGlzLl9vbkRyYWdTdGFydCk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHtcblx0XHRcdFx0XHQvLyBUaW1lb3V0IG5lY2Nlc3NhcnkgZm9yIElFOVxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0ZG9jdW1lbnQuc2VsZWN0aW9uLmVtcHR5KCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0d2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X2RyYWdTdGFydGVkOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAocm9vdEVsICYmIGRyYWdFbCkge1xuXHRcdFx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuXHRcdFx0XHQvLyBBcHBseSBlZmZlY3Rcblx0XHRcdFx0X3RvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5naG9zdENsYXNzLCB0cnVlKTtcblx0XHRcdFx0X3RvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5kcmFnQ2xhc3MsIGZhbHNlKTtcblxuXHRcdFx0XHRTb3J0YWJsZS5hY3RpdmUgPSB0aGlzO1xuXG5cdFx0XHRcdC8vIERyYWcgc3RhcnQgZXZlbnRcblx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQodGhpcywgcm9vdEVsLCAnc3RhcnQnLCBkcmFnRWwsIHJvb3RFbCwgb2xkSW5kZXgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fbnVsbGluZygpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRfZW11bGF0ZURyYWdPdmVyOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAodG91Y2hFdnQpIHtcblx0XHRcdFx0aWYgKHRoaXMuX2xhc3RYID09PSB0b3VjaEV2dC5jbGllbnRYICYmIHRoaXMuX2xhc3RZID09PSB0b3VjaEV2dC5jbGllbnRZKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5fbGFzdFggPSB0b3VjaEV2dC5jbGllbnRYO1xuXHRcdFx0XHR0aGlzLl9sYXN0WSA9IHRvdWNoRXZ0LmNsaWVudFk7XG5cblx0XHRcdFx0aWYgKCFzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cykge1xuXHRcdFx0XHRcdF9jc3MoZ2hvc3RFbCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHRhcmdldCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodG91Y2hFdnQuY2xpZW50WCwgdG91Y2hFdnQuY2xpZW50WSksXG5cdFx0XHRcdFx0cGFyZW50ID0gdGFyZ2V0LFxuXHRcdFx0XHRcdGkgPSB0b3VjaERyYWdPdmVyTGlzdGVuZXJzLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAocGFyZW50KSB7XG5cdFx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdFx0aWYgKHBhcmVudFtleHBhbmRvXSkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRcdFx0dG91Y2hEcmFnT3Zlckxpc3RlbmVyc1tpXSh7XG5cdFx0XHRcdFx0XHRcdFx0XHRjbGllbnRYOiB0b3VjaEV2dC5jbGllbnRYLFxuXHRcdFx0XHRcdFx0XHRcdFx0Y2xpZW50WTogdG91Y2hFdnQuY2xpZW50WSxcblx0XHRcdFx0XHRcdFx0XHRcdHRhcmdldDogdGFyZ2V0LFxuXHRcdFx0XHRcdFx0XHRcdFx0cm9vdEVsOiBwYXJlbnRcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR0YXJnZXQgPSBwYXJlbnQ7IC8vIHN0b3JlIGxhc3QgZWxlbWVudFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cdFx0XHRcdFx0d2hpbGUgKHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghc3VwcG9ydENzc1BvaW50ZXJFdmVudHMpIHtcblx0XHRcdFx0XHRfY3NzKGdob3N0RWwsICdkaXNwbGF5JywgJycpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXG5cdFx0X29uVG91Y2hNb3ZlOiBmdW5jdGlvbiAoLyoqVG91Y2hFdmVudCovZXZ0KSB7XG5cdFx0XHRpZiAodGFwRXZ0KSB7XG5cdFx0XHRcdHZhclx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdFx0XHRmYWxsYmFja1RvbGVyYW5jZSA9IG9wdGlvbnMuZmFsbGJhY2tUb2xlcmFuY2UsXG5cdFx0XHRcdFx0ZmFsbGJhY2tPZmZzZXQgPSBvcHRpb25zLmZhbGxiYWNrT2Zmc2V0LFxuXHRcdFx0XHRcdHRvdWNoID0gZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCxcblx0XHRcdFx0XHRkeCA9ICh0b3VjaC5jbGllbnRYIC0gdGFwRXZ0LmNsaWVudFgpICsgZmFsbGJhY2tPZmZzZXQueCxcblx0XHRcdFx0XHRkeSA9ICh0b3VjaC5jbGllbnRZIC0gdGFwRXZ0LmNsaWVudFkpICsgZmFsbGJhY2tPZmZzZXQueSxcblx0XHRcdFx0XHR0cmFuc2xhdGUzZCA9IGV2dC50b3VjaGVzID8gJ3RyYW5zbGF0ZTNkKCcgKyBkeCArICdweCwnICsgZHkgKyAncHgsMCknIDogJ3RyYW5zbGF0ZSgnICsgZHggKyAncHgsJyArIGR5ICsgJ3B4KSc7XG5cblx0XHRcdFx0Ly8gb25seSBzZXQgdGhlIHN0YXR1cyB0byBkcmFnZ2luZywgd2hlbiB3ZSBhcmUgYWN0dWFsbHkgZHJhZ2dpbmdcblx0XHRcdFx0aWYgKCFTb3J0YWJsZS5hY3RpdmUpIHtcblx0XHRcdFx0XHRpZiAoZmFsbGJhY2tUb2xlcmFuY2UgJiZcblx0XHRcdFx0XHRcdG1pbihhYnModG91Y2guY2xpZW50WCAtIHRoaXMuX2xhc3RYKSwgYWJzKHRvdWNoLmNsaWVudFkgLSB0aGlzLl9sYXN0WSkpIDwgZmFsbGJhY2tUb2xlcmFuY2Vcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLl9kcmFnU3RhcnRlZCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gYXMgd2VsbCBhcyBjcmVhdGluZyB0aGUgZ2hvc3QgZWxlbWVudCBvbiB0aGUgZG9jdW1lbnQgYm9keVxuXHRcdFx0XHR0aGlzLl9hcHBlbmRHaG9zdCgpO1xuXG5cdFx0XHRcdG1vdmVkID0gdHJ1ZTtcblx0XHRcdFx0dG91Y2hFdnQgPSB0b3VjaDtcblxuXHRcdFx0XHRfY3NzKGdob3N0RWwsICd3ZWJraXRUcmFuc2Zvcm0nLCB0cmFuc2xhdGUzZCk7XG5cdFx0XHRcdF9jc3MoZ2hvc3RFbCwgJ21velRyYW5zZm9ybScsIHRyYW5zbGF0ZTNkKTtcblx0XHRcdFx0X2NzcyhnaG9zdEVsLCAnbXNUcmFuc2Zvcm0nLCB0cmFuc2xhdGUzZCk7XG5cdFx0XHRcdF9jc3MoZ2hvc3RFbCwgJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZTNkKTtcblxuXHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X2FwcGVuZEdob3N0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAoIWdob3N0RWwpIHtcblx0XHRcdFx0dmFyIHJlY3QgPSBkcmFnRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG5cdFx0XHRcdFx0Y3NzID0gX2NzcyhkcmFnRWwpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHRcdFx0Z2hvc3RSZWN0O1xuXG5cdFx0XHRcdGdob3N0RWwgPSBkcmFnRWwuY2xvbmVOb2RlKHRydWUpO1xuXG5cdFx0XHRcdF90b2dnbGVDbGFzcyhnaG9zdEVsLCBvcHRpb25zLmdob3N0Q2xhc3MsIGZhbHNlKTtcblx0XHRcdFx0X3RvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZmFsbGJhY2tDbGFzcywgdHJ1ZSk7XG5cdFx0XHRcdF90b2dnbGVDbGFzcyhnaG9zdEVsLCBvcHRpb25zLmRyYWdDbGFzcywgdHJ1ZSk7XG5cblx0XHRcdFx0X2NzcyhnaG9zdEVsLCAndG9wJywgcmVjdC50b3AgLSBwYXJzZUludChjc3MubWFyZ2luVG9wLCAxMCkpO1xuXHRcdFx0XHRfY3NzKGdob3N0RWwsICdsZWZ0JywgcmVjdC5sZWZ0IC0gcGFyc2VJbnQoY3NzLm1hcmdpbkxlZnQsIDEwKSk7XG5cdFx0XHRcdF9jc3MoZ2hvc3RFbCwgJ3dpZHRoJywgcmVjdC53aWR0aCk7XG5cdFx0XHRcdF9jc3MoZ2hvc3RFbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTtcblx0XHRcdFx0X2NzcyhnaG9zdEVsLCAnb3BhY2l0eScsICcwLjgnKTtcblx0XHRcdFx0X2NzcyhnaG9zdEVsLCAncG9zaXRpb24nLCAnZml4ZWQnKTtcblx0XHRcdFx0X2NzcyhnaG9zdEVsLCAnekluZGV4JywgJzEwMDAwMCcpO1xuXHRcdFx0XHRfY3NzKGdob3N0RWwsICdwb2ludGVyRXZlbnRzJywgJ25vbmUnKTtcblxuXHRcdFx0XHRvcHRpb25zLmZhbGxiYWNrT25Cb2R5ICYmIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZ2hvc3RFbCkgfHwgcm9vdEVsLmFwcGVuZENoaWxkKGdob3N0RWwpO1xuXG5cdFx0XHRcdC8vIEZpeGluZyBkaW1lbnNpb25zLlxuXHRcdFx0XHRnaG9zdFJlY3QgPSBnaG9zdEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRfY3NzKGdob3N0RWwsICd3aWR0aCcsIHJlY3Qud2lkdGggKiAyIC0gZ2hvc3RSZWN0LndpZHRoKTtcblx0XHRcdFx0X2NzcyhnaG9zdEVsLCAnaGVpZ2h0JywgcmVjdC5oZWlnaHQgKiAyIC0gZ2hvc3RSZWN0LmhlaWdodCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdF9vbkRyYWdTdGFydDogZnVuY3Rpb24gKC8qKkV2ZW50Ki9ldnQsIC8qKmJvb2xlYW4qL3VzZUZhbGxiYWNrKSB7XG5cdFx0XHR2YXIgZGF0YVRyYW5zZmVyID0gZXZ0LmRhdGFUcmFuc2Zlcixcblx0XHRcdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuXHRcdFx0dGhpcy5fb2ZmVXBFdmVudHMoKTtcblxuXHRcdFx0aWYgKGFjdGl2ZUdyb3VwLmNoZWNrUHVsbCh0aGlzLCB0aGlzLCBkcmFnRWwsIGV2dCkpIHtcblx0XHRcdFx0Y2xvbmVFbCA9IF9jbG9uZShkcmFnRWwpO1xuXG5cdFx0XHRcdGNsb25lRWwuZHJhZ2dhYmxlID0gZmFsc2U7XG5cdFx0XHRcdGNsb25lRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnJztcblxuXHRcdFx0XHRfY3NzKGNsb25lRWwsICdkaXNwbGF5JywgJ25vbmUnKTtcblx0XHRcdFx0X3RvZ2dsZUNsYXNzKGNsb25lRWwsIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpO1xuXG5cdFx0XHRcdHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcblx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQodGhpcywgcm9vdEVsLCAnY2xvbmUnLCBkcmFnRWwpO1xuXHRcdFx0fVxuXG5cdFx0XHRfdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmRyYWdDbGFzcywgdHJ1ZSk7XG5cblx0XHRcdGlmICh1c2VGYWxsYmFjaykge1xuXHRcdFx0XHRpZiAodXNlRmFsbGJhY2sgPT09ICd0b3VjaCcpIHtcblx0XHRcdFx0XHQvLyBCaW5kIHRvdWNoIGV2ZW50c1xuXHRcdFx0XHRcdF9vbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcblx0XHRcdFx0XHRfb24oZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX29uRHJvcCk7XG5cdFx0XHRcdFx0X29uKGRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLl9vbkRyb3ApO1xuXHRcdFx0XHRcdF9vbihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuXHRcdFx0XHRcdF9vbihkb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX29uRHJvcCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gT2xkIGJyd29zZXJcblx0XHRcdFx0XHRfb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG5cdFx0XHRcdFx0X29uKGRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuX29uRHJvcCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLl9sb29wSWQgPSBzZXRJbnRlcnZhbCh0aGlzLl9lbXVsYXRlRHJhZ092ZXIsIDUwKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRpZiAoZGF0YVRyYW5zZmVyKSB7XG5cdFx0XHRcdFx0ZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnbW92ZSc7XG5cdFx0XHRcdFx0b3B0aW9ucy5zZXREYXRhICYmIG9wdGlvbnMuc2V0RGF0YS5jYWxsKHRoaXMsIGRhdGFUcmFuc2ZlciwgZHJhZ0VsKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdF9vbihkb2N1bWVudCwgJ2Ryb3AnLCB0aGlzKTtcblx0XHRcdFx0c2V0VGltZW91dCh0aGlzLl9kcmFnU3RhcnRlZCwgMCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdF9vbkRyYWdPdmVyOiBmdW5jdGlvbiAoLyoqRXZlbnQqL2V2dCkge1xuXHRcdFx0dmFyIGVsID0gdGhpcy5lbCxcblx0XHRcdFx0dGFyZ2V0LFxuXHRcdFx0XHRkcmFnUmVjdCxcblx0XHRcdFx0dGFyZ2V0UmVjdCxcblx0XHRcdFx0cmV2ZXJ0LFxuXHRcdFx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0XHRncm91cCA9IG9wdGlvbnMuZ3JvdXAsXG5cdFx0XHRcdGFjdGl2ZVNvcnRhYmxlID0gU29ydGFibGUuYWN0aXZlLFxuXHRcdFx0XHRpc093bmVyID0gKGFjdGl2ZUdyb3VwID09PSBncm91cCksXG5cdFx0XHRcdGlzTW92aW5nQmV0d2VlblNvcnRhYmxlID0gZmFsc2UsXG5cdFx0XHRcdGNhblNvcnQgPSBvcHRpb25zLnNvcnQ7XG5cblx0XHRcdGlmIChldnQucHJldmVudERlZmF1bHQgIT09IHZvaWQgMCkge1xuXHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0IW9wdGlvbnMuZHJhZ292ZXJCdWJibGUgJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZHJhZ0VsLmFuaW1hdGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0bW92ZWQgPSB0cnVlO1xuXG5cdFx0XHRpZiAoYWN0aXZlU29ydGFibGUgJiYgIW9wdGlvbnMuZGlzYWJsZWQgJiZcblx0XHRcdFx0KGlzT3duZXJcblx0XHRcdFx0XHQ/IGNhblNvcnQgfHwgKHJldmVydCA9ICFyb290RWwuY29udGFpbnMoZHJhZ0VsKSkgLy8gUmV2ZXJ0aW5nIGl0ZW0gaW50byB0aGUgb3JpZ2luYWwgbGlzdFxuXHRcdFx0XHRcdDogKFxuXHRcdFx0XHRcdFx0cHV0U29ydGFibGUgPT09IHRoaXMgfHxcblx0XHRcdFx0XHRcdChcblx0XHRcdFx0XHRcdFx0KGFjdGl2ZVNvcnRhYmxlLmxhc3RQdWxsTW9kZSA9IGFjdGl2ZUdyb3VwLmNoZWNrUHVsbCh0aGlzLCBhY3RpdmVTb3J0YWJsZSwgZHJhZ0VsLCBldnQpKSAmJlxuXHRcdFx0XHRcdFx0XHRncm91cC5jaGVja1B1dCh0aGlzLCBhY3RpdmVTb3J0YWJsZSwgZHJhZ0VsLCBldnQpXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpICYmXG5cdFx0XHRcdChldnQucm9vdEVsID09PSB2b2lkIDAgfHwgZXZ0LnJvb3RFbCA9PT0gdGhpcy5lbCkgLy8gdG91Y2ggZmFsbGJhY2tcblx0XHRcdCkge1xuXHRcdFx0XHQvLyBTbWFydCBhdXRvLXNjcm9sbGluZ1xuXHRcdFx0XHRfYXV0b1Njcm9sbChldnQsIG9wdGlvbnMsIHRoaXMuZWwpO1xuXG5cdFx0XHRcdGlmIChfc2lsZW50KSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGFyZ2V0ID0gX2Nsb3Nlc3QoZXZ0LnRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsKTtcblx0XHRcdFx0ZHJhZ1JlY3QgPSBkcmFnRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRcdFx0aWYgKHB1dFNvcnRhYmxlICE9PSB0aGlzKSB7XG5cdFx0XHRcdFx0cHV0U29ydGFibGUgPSB0aGlzO1xuXHRcdFx0XHRcdGlzTW92aW5nQmV0d2VlblNvcnRhYmxlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChyZXZlcnQpIHtcblx0XHRcdFx0XHRfY2xvbmVIaWRlKGFjdGl2ZVNvcnRhYmxlLCB0cnVlKTtcblx0XHRcdFx0XHRwYXJlbnRFbCA9IHJvb3RFbDsgLy8gYWN0dWFsaXphdGlvblxuXG5cdFx0XHRcdFx0aWYgKGNsb25lRWwgfHwgbmV4dEVsKSB7XG5cdFx0XHRcdFx0XHRyb290RWwuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgY2xvbmVFbCB8fCBuZXh0RWwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmICghY2FuU29ydCkge1xuXHRcdFx0XHRcdFx0cm9vdEVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblxuXHRcdFx0XHRpZiAoKGVsLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgfHwgKGVsLmNoaWxkcmVuWzBdID09PSBnaG9zdEVsKSB8fFxuXHRcdFx0XHRcdChlbCA9PT0gZXZ0LnRhcmdldCkgJiYgKF9naG9zdElzTGFzdChlbCwgZXZ0KSlcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Ly9hc3NpZ24gdGFyZ2V0IG9ubHkgaWYgY29uZGl0aW9uIGlzIHRydWVcblx0XHRcdFx0XHRpZiAoZWwuY2hpbGRyZW4ubGVuZ3RoICE9PSAwICYmIGVsLmNoaWxkcmVuWzBdICE9PSBnaG9zdEVsICYmIGVsID09PSBldnQudGFyZ2V0KSB7XG5cdFx0XHRcdFx0XHR0YXJnZXQgPSBlbC5sYXN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICh0YXJnZXQpIHtcblx0XHRcdFx0XHRcdGlmICh0YXJnZXQuYW5pbWF0ZWQpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR0YXJnZXRSZWN0ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdF9jbG9uZUhpZGUoYWN0aXZlU29ydGFibGUsIGlzT3duZXIpO1xuXG5cdFx0XHRcdFx0aWYgKF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCBldnQpICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0aWYgKCFkcmFnRWwuY29udGFpbnMoZWwpKSB7XG5cdFx0XHRcdFx0XHRcdGVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG5cdFx0XHRcdFx0XHRcdHBhcmVudEVsID0gZWw7IC8vIGFjdHVhbGl6YXRpb25cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dGhpcy5fYW5pbWF0ZShkcmFnUmVjdCwgZHJhZ0VsKTtcblx0XHRcdFx0XHRcdHRhcmdldCAmJiB0aGlzLl9hbmltYXRlKHRhcmdldFJlY3QsIHRhcmdldCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKHRhcmdldCAmJiAhdGFyZ2V0LmFuaW1hdGVkICYmIHRhcmdldCAhPT0gZHJhZ0VsICYmICh0YXJnZXQucGFyZW50Tm9kZVtleHBhbmRvXSAhPT0gdm9pZCAwKSkge1xuXHRcdFx0XHRcdGlmIChsYXN0RWwgIT09IHRhcmdldCkge1xuXHRcdFx0XHRcdFx0bGFzdEVsID0gdGFyZ2V0O1xuXHRcdFx0XHRcdFx0bGFzdENTUyA9IF9jc3ModGFyZ2V0KTtcblx0XHRcdFx0XHRcdGxhc3RQYXJlbnRDU1MgPSBfY3NzKHRhcmdldC5wYXJlbnROb2RlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0YXJnZXRSZWN0ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0XHRcdFx0dmFyIHdpZHRoID0gdGFyZ2V0UmVjdC5yaWdodCAtIHRhcmdldFJlY3QubGVmdCxcblx0XHRcdFx0XHRcdGhlaWdodCA9IHRhcmdldFJlY3QuYm90dG9tIC0gdGFyZ2V0UmVjdC50b3AsXG5cdFx0XHRcdFx0XHRmbG9hdGluZyA9IFJfRkxPQVQudGVzdChsYXN0Q1NTLmNzc0Zsb2F0ICsgbGFzdENTUy5kaXNwbGF5KVxuXHRcdFx0XHRcdFx0XHR8fCAobGFzdFBhcmVudENTUy5kaXNwbGF5ID09ICdmbGV4JyAmJiBsYXN0UGFyZW50Q1NTWydmbGV4LWRpcmVjdGlvbiddLmluZGV4T2YoJ3JvdycpID09PSAwKSxcblx0XHRcdFx0XHRcdGlzV2lkZSA9ICh0YXJnZXQub2Zmc2V0V2lkdGggPiBkcmFnRWwub2Zmc2V0V2lkdGgpLFxuXHRcdFx0XHRcdFx0aXNMb25nID0gKHRhcmdldC5vZmZzZXRIZWlnaHQgPiBkcmFnRWwub2Zmc2V0SGVpZ2h0KSxcblx0XHRcdFx0XHRcdGhhbGZ3YXkgPSAoZmxvYXRpbmcgPyAoZXZ0LmNsaWVudFggLSB0YXJnZXRSZWN0LmxlZnQpIC8gd2lkdGggOiAoZXZ0LmNsaWVudFkgLSB0YXJnZXRSZWN0LnRvcCkgLyBoZWlnaHQpID4gMC41LFxuXHRcdFx0XHRcdFx0bmV4dFNpYmxpbmcgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLFxuXHRcdFx0XHRcdFx0YWZ0ZXIgPSBmYWxzZVxuXHRcdFx0XHRcdDtcblxuXHRcdFx0XHRcdGlmIChmbG9hdGluZykge1xuXHRcdFx0XHRcdFx0dmFyIGVsVG9wID0gZHJhZ0VsLm9mZnNldFRvcCxcblx0XHRcdFx0XHRcdFx0dGdUb3AgPSB0YXJnZXQub2Zmc2V0VG9wO1xuXG5cdFx0XHRcdFx0XHRpZiAoZWxUb3AgPT09IHRnVG9wKSB7XG5cdFx0XHRcdFx0XHRcdGFmdGVyID0gKHRhcmdldC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nID09PSBkcmFnRWwpICYmICFpc1dpZGUgfHwgaGFsZndheSAmJiBpc1dpZGU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIGlmICh0YXJnZXQucHJldmlvdXNFbGVtZW50U2libGluZyA9PT0gZHJhZ0VsIHx8IGRyYWdFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nID09PSB0YXJnZXQpIHtcblx0XHRcdFx0XHRcdFx0YWZ0ZXIgPSAoZXZ0LmNsaWVudFkgLSB0YXJnZXRSZWN0LnRvcCkgLyBoZWlnaHQgPiAwLjU7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRhZnRlciA9IHRnVG9wID4gZWxUb3A7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCFpc01vdmluZ0JldHdlZW5Tb3J0YWJsZSkge1xuXHRcdFx0XHRcdFx0YWZ0ZXIgPSAobmV4dFNpYmxpbmcgIT09IGRyYWdFbCkgJiYgIWlzTG9uZyB8fCBoYWxmd2F5ICYmIGlzTG9uZztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgbW92ZVZlY3RvciA9IF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCBldnQsIGFmdGVyKTtcblxuXHRcdFx0XHRcdGlmIChtb3ZlVmVjdG9yICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0aWYgKG1vdmVWZWN0b3IgPT09IDEgfHwgbW92ZVZlY3RvciA9PT0gLTEpIHtcblx0XHRcdFx0XHRcdFx0YWZ0ZXIgPSAobW92ZVZlY3RvciA9PT0gMSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdF9zaWxlbnQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0c2V0VGltZW91dChfdW5zaWxlbnQsIDMwKTtcblxuXHRcdFx0XHRcdFx0X2Nsb25lSGlkZShhY3RpdmVTb3J0YWJsZSwgaXNPd25lcik7XG5cblx0XHRcdFx0XHRcdGlmICghZHJhZ0VsLmNvbnRhaW5zKGVsKSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoYWZ0ZXIgJiYgIW5leHRTaWJsaW5nKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0YXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBhZnRlciA/IG5leHRTaWJsaW5nIDogdGFyZ2V0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRwYXJlbnRFbCA9IGRyYWdFbC5wYXJlbnROb2RlOyAvLyBhY3R1YWxpemF0aW9uXG5cblx0XHRcdFx0XHRcdHRoaXMuX2FuaW1hdGUoZHJhZ1JlY3QsIGRyYWdFbCk7XG5cdFx0XHRcdFx0XHR0aGlzLl9hbmltYXRlKHRhcmdldFJlY3QsIHRhcmdldCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdF9hbmltYXRlOiBmdW5jdGlvbiAocHJldlJlY3QsIHRhcmdldCkge1xuXHRcdFx0dmFyIG1zID0gdGhpcy5vcHRpb25zLmFuaW1hdGlvbjtcblxuXHRcdFx0aWYgKG1zKSB7XG5cdFx0XHRcdHZhciBjdXJyZW50UmVjdCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0XHRpZiAocHJldlJlY3Qubm9kZVR5cGUgPT09IDEpIHtcblx0XHRcdFx0XHRwcmV2UmVjdCA9IHByZXZSZWN0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0X2Nzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJ25vbmUnKTtcblx0XHRcdFx0X2Nzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoJ1xuXHRcdFx0XHRcdCsgKHByZXZSZWN0LmxlZnQgLSBjdXJyZW50UmVjdC5sZWZ0KSArICdweCwnXG5cdFx0XHRcdFx0KyAocHJldlJlY3QudG9wIC0gY3VycmVudFJlY3QudG9wKSArICdweCwwKSdcblx0XHRcdFx0KTtcblxuXHRcdFx0XHR0YXJnZXQub2Zmc2V0V2lkdGg7IC8vIHJlcGFpbnRcblxuXHRcdFx0XHRfY3NzKHRhcmdldCwgJ3RyYW5zaXRpb24nLCAnYWxsICcgKyBtcyArICdtcycpO1xuXHRcdFx0XHRfY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgwLDAsMCknKTtcblxuXHRcdFx0XHRjbGVhclRpbWVvdXQodGFyZ2V0LmFuaW1hdGVkKTtcblx0XHRcdFx0dGFyZ2V0LmFuaW1hdGVkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0X2Nzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJycpO1xuXHRcdFx0XHRcdF9jc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJycpO1xuXHRcdFx0XHRcdHRhcmdldC5hbmltYXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR9LCBtcyk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdF9vZmZVcEV2ZW50czogZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIG93bmVyRG9jdW1lbnQgPSB0aGlzLmVsLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdF9vZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG5cdFx0XHRfb2ZmKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG5cdFx0XHRfb2ZmKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fb25Ecm9wKTtcblx0XHRcdF9vZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fb25Ecm9wKTtcblx0XHRcdF9vZmYob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX29uRHJvcCk7XG5cdFx0XHRfb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIHRoaXMuX29uRHJvcCk7XG5cdFx0XHRfb2ZmKG93bmVyRG9jdW1lbnQsICdwb2ludGVyY2FuY2VsJywgdGhpcy5fb25Ecm9wKTtcblx0XHRcdF9vZmYob3duZXJEb2N1bWVudCwgJ3NlbGVjdHN0YXJ0JywgdGhpcyk7XG5cdFx0fSxcblxuXHRcdF9vbkRyb3A6IGZ1bmN0aW9uICgvKipFdmVudCovZXZ0KSB7XG5cdFx0XHR2YXIgZWwgPSB0aGlzLmVsLFxuXHRcdFx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0XHRjbGVhckludGVydmFsKHRoaXMuX2xvb3BJZCk7XG5cdFx0XHRjbGVhckludGVydmFsKGF1dG9TY3JvbGwucGlkKTtcblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLl9kcmFnU3RhcnRUaW1lcik7XG5cblx0XHRcdC8vIFVuYmluZCBldmVudHNcblx0XHRcdF9vZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG5cblx0XHRcdGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuXHRcdFx0XHRfb2ZmKGRvY3VtZW50LCAnZHJvcCcsIHRoaXMpO1xuXHRcdFx0XHRfb2ZmKGVsLCAnZHJhZ3N0YXJ0JywgdGhpcy5fb25EcmFnU3RhcnQpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9vZmZVcEV2ZW50cygpO1xuXG5cdFx0XHRpZiAoZXZ0KSB7XG5cdFx0XHRcdGlmIChtb3ZlZCkge1xuXHRcdFx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdCFvcHRpb25zLmRyb3BCdWJibGUgJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z2hvc3RFbCAmJiBnaG9zdEVsLnBhcmVudE5vZGUgJiYgZ2hvc3RFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGdob3N0RWwpO1xuXG5cdFx0XHRcdGlmIChyb290RWwgPT09IHBhcmVudEVsIHx8IFNvcnRhYmxlLmFjdGl2ZS5sYXN0UHVsbE1vZGUgIT09ICdjbG9uZScpIHtcblx0XHRcdFx0XHQvLyBSZW1vdmUgY2xvbmVcblx0XHRcdFx0XHRjbG9uZUVsICYmIGNsb25lRWwucGFyZW50Tm9kZSAmJiBjbG9uZUVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmVFbCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZHJhZ0VsKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG5cdFx0XHRcdFx0XHRfb2ZmKGRyYWdFbCwgJ2RyYWdlbmQnLCB0aGlzKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfZGlzYWJsZURyYWdnYWJsZShkcmFnRWwpO1xuXHRcdFx0XHRcdGRyYWdFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnO1xuXG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIGNsYXNzJ3Ncblx0XHRcdFx0XHRfdG9nZ2xlQ2xhc3MoZHJhZ0VsLCB0aGlzLm9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuXHRcdFx0XHRcdF90b2dnbGVDbGFzcyhkcmFnRWwsIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpO1xuXG5cdFx0XHRcdFx0Ly8gRHJhZyBzdG9wIGV2ZW50XG5cdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQodGhpcywgcm9vdEVsLCAndW5jaG9vc2UnLCBkcmFnRWwsIHJvb3RFbCwgb2xkSW5kZXgpO1xuXG5cdFx0XHRcdFx0aWYgKHJvb3RFbCAhPT0gcGFyZW50RWwpIHtcblx0XHRcdFx0XHRcdG5ld0luZGV4ID0gX2luZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG5cdFx0XHRcdFx0XHRpZiAobmV3SW5kZXggPj0gMCkge1xuXHRcdFx0XHRcdFx0XHQvLyBBZGQgZXZlbnRcblx0XHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQobnVsbCwgcGFyZW50RWwsICdhZGQnLCBkcmFnRWwsIHJvb3RFbCwgb2xkSW5kZXgsIG5ld0luZGV4KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZW1vdmUgZXZlbnRcblx0XHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQodGhpcywgcm9vdEVsLCAncmVtb3ZlJywgZHJhZ0VsLCByb290RWwsIG9sZEluZGV4LCBuZXdJbmRleCk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gZHJhZyBmcm9tIG9uZSBsaXN0IGFuZCBkcm9wIGludG8gYW5vdGhlclxuXHRcdFx0XHRcdFx0XHRfZGlzcGF0Y2hFdmVudChudWxsLCBwYXJlbnRFbCwgJ3NvcnQnLCBkcmFnRWwsIHJvb3RFbCwgb2xkSW5kZXgsIG5ld0luZGV4KTtcblx0XHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQodGhpcywgcm9vdEVsLCAnc29ydCcsIGRyYWdFbCwgcm9vdEVsLCBvbGRJbmRleCwgbmV3SW5kZXgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChkcmFnRWwubmV4dFNpYmxpbmcgIT09IG5leHRFbCkge1xuXHRcdFx0XHRcdFx0XHQvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnRcblx0XHRcdFx0XHRcdFx0bmV3SW5kZXggPSBfaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG5cblx0XHRcdFx0XHRcdFx0aWYgKG5ld0luZGV4ID49IDApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBkcmFnICYgZHJvcCB3aXRoaW4gdGhlIHNhbWUgbGlzdFxuXHRcdFx0XHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KHRoaXMsIHJvb3RFbCwgJ3VwZGF0ZScsIGRyYWdFbCwgcm9vdEVsLCBvbGRJbmRleCwgbmV3SW5kZXgpO1xuXHRcdFx0XHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KHRoaXMsIHJvb3RFbCwgJ3NvcnQnLCBkcmFnRWwsIHJvb3RFbCwgb2xkSW5kZXgsIG5ld0luZGV4KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChTb3J0YWJsZS5hY3RpdmUpIHtcblx0XHRcdFx0XHRcdC8qIGpzaGludCBlcW51bGw6dHJ1ZSAqL1xuXHRcdFx0XHRcdFx0aWYgKG5ld0luZGV4ID09IG51bGwgfHwgbmV3SW5kZXggPT09IC0xKSB7XG5cdFx0XHRcdFx0XHRcdG5ld0luZGV4ID0gb2xkSW5kZXg7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KHRoaXMsIHJvb3RFbCwgJ2VuZCcsIGRyYWdFbCwgcm9vdEVsLCBvbGRJbmRleCwgbmV3SW5kZXgpO1xuXG5cdFx0XHRcdFx0XHQvLyBTYXZlIHNvcnRpbmdcblx0XHRcdFx0XHRcdHRoaXMuc2F2ZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX251bGxpbmcoKTtcblx0XHR9LFxuXG5cdFx0X251bGxpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cm9vdEVsID1cblx0XHRcdGRyYWdFbCA9XG5cdFx0XHRwYXJlbnRFbCA9XG5cdFx0XHRnaG9zdEVsID1cblx0XHRcdG5leHRFbCA9XG5cdFx0XHRjbG9uZUVsID1cblx0XHRcdGxhc3REb3duRWwgPVxuXG5cdFx0XHRzY3JvbGxFbCA9XG5cdFx0XHRzY3JvbGxQYXJlbnRFbCA9XG5cblx0XHRcdHRhcEV2dCA9XG5cdFx0XHR0b3VjaEV2dCA9XG5cblx0XHRcdG1vdmVkID1cblx0XHRcdG5ld0luZGV4ID1cblxuXHRcdFx0bGFzdEVsID1cblx0XHRcdGxhc3RDU1MgPVxuXG5cdFx0XHRwdXRTb3J0YWJsZSA9XG5cdFx0XHRhY3RpdmVHcm91cCA9XG5cdFx0XHRTb3J0YWJsZS5hY3RpdmUgPSBudWxsO1xuXG5cdFx0XHRzYXZlZElucHV0Q2hlY2tlZC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0XHRlbC5jaGVja2VkID0gdHJ1ZTtcblx0XHRcdH0pO1xuXHRcdFx0c2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gMDtcblx0XHR9LFxuXG5cdFx0aGFuZGxlRXZlbnQ6IGZ1bmN0aW9uICgvKipFdmVudCovZXZ0KSB7XG5cdFx0XHRzd2l0Y2ggKGV2dC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ2Ryb3AnOlxuXHRcdFx0XHRjYXNlICdkcmFnZW5kJzpcblx0XHRcdFx0XHR0aGlzLl9vbkRyb3AoZXZ0KTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdkcmFnb3Zlcic6XG5cdFx0XHRcdGNhc2UgJ2RyYWdlbnRlcic6XG5cdFx0XHRcdFx0aWYgKGRyYWdFbCkge1xuXHRcdFx0XHRcdFx0dGhpcy5fb25EcmFnT3ZlcihldnQpO1xuXHRcdFx0XHRcdFx0X2dsb2JhbERyYWdPdmVyKGV2dCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ3NlbGVjdHN0YXJ0Jzpcblx0XHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9LFxuXG5cblx0XHQvKipcblx0XHQgKiBTZXJpYWxpemVzIHRoZSBpdGVtIGludG8gYW4gYXJyYXkgb2Ygc3RyaW5nLlxuXHRcdCAqIEByZXR1cm5zIHtTdHJpbmdbXX1cblx0XHQgKi9cblx0XHR0b0FycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgb3JkZXIgPSBbXSxcblx0XHRcdFx0ZWwsXG5cdFx0XHRcdGNoaWxkcmVuID0gdGhpcy5lbC5jaGlsZHJlbixcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdG4gPSBjaGlsZHJlbi5sZW5ndGgsXG5cdFx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cblx0XHRcdGZvciAoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdGVsID0gY2hpbGRyZW5baV07XG5cdFx0XHRcdGlmIChfY2xvc2VzdChlbCwgb3B0aW9ucy5kcmFnZ2FibGUsIHRoaXMuZWwpKSB7XG5cdFx0XHRcdFx0b3JkZXIucHVzaChlbC5nZXRBdHRyaWJ1dGUob3B0aW9ucy5kYXRhSWRBdHRyKSB8fCBfZ2VuZXJhdGVJZChlbCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvcmRlcjtcblx0XHR9LFxuXG5cblx0XHQvKipcblx0XHQgKiBTb3J0cyB0aGUgZWxlbWVudHMgYWNjb3JkaW5nIHRvIHRoZSBhcnJheS5cblx0XHQgKiBAcGFyYW0gIHtTdHJpbmdbXX0gIG9yZGVyICBvcmRlciBvZiB0aGUgaXRlbXNcblx0XHQgKi9cblx0XHRzb3J0OiBmdW5jdGlvbiAob3JkZXIpIHtcblx0XHRcdHZhciBpdGVtcyA9IHt9LCByb290RWwgPSB0aGlzLmVsO1xuXG5cdFx0XHR0aGlzLnRvQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCwgaSkge1xuXHRcdFx0XHR2YXIgZWwgPSByb290RWwuY2hpbGRyZW5baV07XG5cblx0XHRcdFx0aWYgKF9jbG9zZXN0KGVsLCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCByb290RWwpKSB7XG5cdFx0XHRcdFx0aXRlbXNbaWRdID0gZWw7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpO1xuXG5cdFx0XHRvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuXHRcdFx0XHRpZiAoaXRlbXNbaWRdKSB7XG5cdFx0XHRcdFx0cm9vdEVsLnJlbW92ZUNoaWxkKGl0ZW1zW2lkXSk7XG5cdFx0XHRcdFx0cm9vdEVsLmFwcGVuZENoaWxkKGl0ZW1zW2lkXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cblxuXHRcdC8qKlxuXHRcdCAqIFNhdmUgdGhlIGN1cnJlbnQgc29ydGluZ1xuXHRcdCAqL1xuXHRcdHNhdmU6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBzdG9yZSA9IHRoaXMub3B0aW9ucy5zdG9yZTtcblx0XHRcdHN0b3JlICYmIHN0b3JlLnNldCh0aGlzKTtcblx0XHR9LFxuXG5cblx0XHQvKipcblx0XHQgKiBGb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQsIGdldCB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIGJ5IHRlc3RpbmcgdGhlIGVsZW1lbnQgaXRzZWxmIGFuZCB0cmF2ZXJzaW5nIHVwIHRocm91Z2ggaXRzIGFuY2VzdG9ycyBpbiB0aGUgRE9NIHRyZWUuXG5cdFx0ICogQHBhcmFtICAge0hUTUxFbGVtZW50fSAgZWxcblx0XHQgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgICBbc2VsZWN0b3JdICBkZWZhdWx0OiBgb3B0aW9ucy5kcmFnZ2FibGVgXG5cdFx0ICogQHJldHVybnMge0hUTUxFbGVtZW50fG51bGx9XG5cdFx0ICovXG5cdFx0Y2xvc2VzdDogZnVuY3Rpb24gKGVsLCBzZWxlY3Rvcikge1xuXHRcdFx0cmV0dXJuIF9jbG9zZXN0KGVsLCBzZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLmVsKTtcblx0XHR9LFxuXG5cblx0XHQvKipcblx0XHQgKiBTZXQvZ2V0IG9wdGlvblxuXHRcdCAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcblx0XHQgKiBAcGFyYW0gICB7Kn0gICAgICBbdmFsdWVdXG5cdFx0ICogQHJldHVybnMgeyp9XG5cdFx0ICovXG5cdFx0b3B0aW9uOiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcblx0XHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0XHRpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuXHRcdFx0XHRyZXR1cm4gb3B0aW9uc1tuYW1lXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdGlvbnNbbmFtZV0gPSB2YWx1ZTtcblxuXHRcdFx0XHRpZiAobmFtZSA9PT0gJ2dyb3VwJykge1xuXHRcdFx0XHRcdF9wcmVwYXJlR3JvdXAob3B0aW9ucyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cblx0XHQvKipcblx0XHQgKiBEZXN0cm95XG5cdFx0ICovXG5cdFx0ZGVzdHJveTogZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGVsID0gdGhpcy5lbDtcblxuXHRcdFx0ZWxbZXhwYW5kb10gPSBudWxsO1xuXG5cdFx0XHRfb2ZmKGVsLCAnbW91c2Vkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG5cdFx0XHRfb2ZmKGVsLCAndG91Y2hzdGFydCcsIHRoaXMuX29uVGFwU3RhcnQpO1xuXHRcdFx0X29mZihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG5cblx0XHRcdGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuXHRcdFx0XHRfb2ZmKGVsLCAnZHJhZ292ZXInLCB0aGlzKTtcblx0XHRcdFx0X29mZihlbCwgJ2RyYWdlbnRlcicsIHRoaXMpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZHJhZ2dhYmxlIGF0dHJpYnV0ZXNcblx0XHRcdEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnW2RyYWdnYWJsZV0nKSwgZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRcdGVsLnJlbW92ZUF0dHJpYnV0ZSgnZHJhZ2dhYmxlJyk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dG91Y2hEcmFnT3Zlckxpc3RlbmVycy5zcGxpY2UodG91Y2hEcmFnT3Zlckxpc3RlbmVycy5pbmRleE9mKHRoaXMuX29uRHJhZ092ZXIpLCAxKTtcblxuXHRcdFx0dGhpcy5fb25Ecm9wKCk7XG5cblx0XHRcdHRoaXMuZWwgPSBlbCA9IG51bGw7XG5cdFx0fVxuXHR9O1xuXG5cblx0ZnVuY3Rpb24gX2Nsb25lSGlkZShzb3J0YWJsZSwgc3RhdGUpIHtcblx0XHRpZiAoc29ydGFibGUubGFzdFB1bGxNb2RlICE9PSAnY2xvbmUnKSB7XG5cdFx0XHRzdGF0ZSA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKGNsb25lRWwgJiYgKGNsb25lRWwuc3RhdGUgIT09IHN0YXRlKSkge1xuXHRcdFx0X2NzcyhjbG9uZUVsLCAnZGlzcGxheScsIHN0YXRlID8gJ25vbmUnIDogJycpO1xuXG5cdFx0XHRpZiAoIXN0YXRlKSB7XG5cdFx0XHRcdGlmIChjbG9uZUVsLnN0YXRlKSB7XG5cdFx0XHRcdFx0aWYgKHNvcnRhYmxlLm9wdGlvbnMuZ3JvdXAucmV2ZXJ0Q2xvbmUpIHtcblx0XHRcdFx0XHRcdHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgbmV4dEVsKTtcblx0XHRcdFx0XHRcdHNvcnRhYmxlLl9hbmltYXRlKGRyYWdFbCwgY2xvbmVFbCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Y2xvbmVFbC5zdGF0ZSA9IHN0YXRlO1xuXHRcdH1cblx0fVxuXG5cblx0ZnVuY3Rpb24gX2Nsb3Nlc3QoLyoqSFRNTEVsZW1lbnQqL2VsLCAvKipTdHJpbmcqL3NlbGVjdG9yLCAvKipIVE1MRWxlbWVudCovY3R4KSB7XG5cdFx0aWYgKGVsKSB7XG5cdFx0XHRjdHggPSBjdHggfHwgZG9jdW1lbnQ7XG5cblx0XHRcdGRvIHtcblx0XHRcdFx0aWYgKChzZWxlY3RvciA9PT0gJz4qJyAmJiBlbC5wYXJlbnROb2RlID09PSBjdHgpIHx8IF9tYXRjaGVzKGVsLCBzZWxlY3RvcikpIHtcblx0XHRcdFx0XHRyZXR1cm4gZWw7XG5cdFx0XHRcdH1cblx0XHRcdFx0LyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuXHRcdFx0fSB3aGlsZSAoZWwgPSBfZ2V0UGFyZW50T3JIb3N0KGVsKSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXG5cdGZ1bmN0aW9uIF9nZXRQYXJlbnRPckhvc3QoZWwpIHtcblx0XHR2YXIgcGFyZW50ID0gZWwuaG9zdDtcblxuXHRcdHJldHVybiAocGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSkgPyBwYXJlbnQgOiBlbC5wYXJlbnROb2RlO1xuXHR9XG5cblxuXHRmdW5jdGlvbiBfZ2xvYmFsRHJhZ092ZXIoLyoqRXZlbnQqL2V2dCkge1xuXHRcdGlmIChldnQuZGF0YVRyYW5zZmVyKSB7XG5cdFx0XHRldnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG5cdFx0fVxuXHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9XG5cblxuXHRmdW5jdGlvbiBfb24oZWwsIGV2ZW50LCBmbikge1xuXHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCBjYXB0dXJlTW9kZSk7XG5cdH1cblxuXG5cdGZ1bmN0aW9uIF9vZmYoZWwsIGV2ZW50LCBmbikge1xuXHRcdGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCBjYXB0dXJlTW9kZSk7XG5cdH1cblxuXG5cdGZ1bmN0aW9uIF90b2dnbGVDbGFzcyhlbCwgbmFtZSwgc3RhdGUpIHtcblx0XHRpZiAoZWwpIHtcblx0XHRcdGlmIChlbC5jbGFzc0xpc3QpIHtcblx0XHRcdFx0ZWwuY2xhc3NMaXN0W3N0YXRlID8gJ2FkZCcgOiAncmVtb3ZlJ10obmFtZSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0dmFyIGNsYXNzTmFtZSA9ICgnICcgKyBlbC5jbGFzc05hbWUgKyAnICcpLnJlcGxhY2UoUl9TUEFDRSwgJyAnKS5yZXBsYWNlKCcgJyArIG5hbWUgKyAnICcsICcgJyk7XG5cdFx0XHRcdGVsLmNsYXNzTmFtZSA9IChjbGFzc05hbWUgKyAoc3RhdGUgPyAnICcgKyBuYW1lIDogJycpKS5yZXBsYWNlKFJfU1BBQ0UsICcgJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblxuXHRmdW5jdGlvbiBfY3NzKGVsLCBwcm9wLCB2YWwpIHtcblx0XHR2YXIgc3R5bGUgPSBlbCAmJiBlbC5zdHlsZTtcblxuXHRcdGlmIChzdHlsZSkge1xuXHRcdFx0aWYgKHZhbCA9PT0gdm9pZCAwKSB7XG5cdFx0XHRcdGlmIChkb2N1bWVudC5kZWZhdWx0VmlldyAmJiBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKSB7XG5cdFx0XHRcdFx0dmFsID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgJycpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKGVsLmN1cnJlbnRTdHlsZSkge1xuXHRcdFx0XHRcdHZhbCA9IGVsLmN1cnJlbnRTdHlsZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBwcm9wID09PSB2b2lkIDAgPyB2YWwgOiB2YWxbcHJvcF07XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0aWYgKCEocHJvcCBpbiBzdHlsZSkpIHtcblx0XHRcdFx0XHRwcm9wID0gJy13ZWJraXQtJyArIHByb3A7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdHlsZVtwcm9wXSA9IHZhbCArICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/ICcnIDogJ3B4Jyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblxuXHRmdW5jdGlvbiBfZmluZChjdHgsIHRhZ05hbWUsIGl0ZXJhdG9yKSB7XG5cdFx0aWYgKGN0eCkge1xuXHRcdFx0dmFyIGxpc3QgPSBjdHguZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSksIGkgPSAwLCBuID0gbGlzdC5sZW5ndGg7XG5cblx0XHRcdGlmIChpdGVyYXRvcikge1xuXHRcdFx0XHRmb3IgKDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRcdGl0ZXJhdG9yKGxpc3RbaV0sIGkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBsaXN0O1xuXHRcdH1cblxuXHRcdHJldHVybiBbXTtcblx0fVxuXG5cblxuXHRmdW5jdGlvbiBfZGlzcGF0Y2hFdmVudChzb3J0YWJsZSwgcm9vdEVsLCBuYW1lLCB0YXJnZXRFbCwgZnJvbUVsLCBzdGFydEluZGV4LCBuZXdJbmRleCkge1xuXHRcdHNvcnRhYmxlID0gKHNvcnRhYmxlIHx8IHJvb3RFbFtleHBhbmRvXSk7XG5cblx0XHR2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JyksXG5cdFx0XHRvcHRpb25zID0gc29ydGFibGUub3B0aW9ucyxcblx0XHRcdG9uTmFtZSA9ICdvbicgKyBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSk7XG5cblx0XHRldnQuaW5pdEV2ZW50KG5hbWUsIHRydWUsIHRydWUpO1xuXG5cdFx0ZXZ0LnRvID0gcm9vdEVsO1xuXHRcdGV2dC5mcm9tID0gZnJvbUVsIHx8IHJvb3RFbDtcblx0XHRldnQuaXRlbSA9IHRhcmdldEVsIHx8IHJvb3RFbDtcblx0XHRldnQuY2xvbmUgPSBjbG9uZUVsO1xuXG5cdFx0ZXZ0Lm9sZEluZGV4ID0gc3RhcnRJbmRleDtcblx0XHRldnQubmV3SW5kZXggPSBuZXdJbmRleDtcblxuXHRcdHJvb3RFbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cblx0XHRpZiAob3B0aW9uc1tvbk5hbWVdKSB7XG5cdFx0XHRvcHRpb25zW29uTmFtZV0uY2FsbChzb3J0YWJsZSwgZXZ0KTtcblx0XHR9XG5cdH1cblxuXG5cdGZ1bmN0aW9uIF9vbk1vdmUoZnJvbUVsLCB0b0VsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXRFbCwgdGFyZ2V0UmVjdCwgb3JpZ2luYWxFdnQsIHdpbGxJbnNlcnRBZnRlcikge1xuXHRcdHZhciBldnQsXG5cdFx0XHRzb3J0YWJsZSA9IGZyb21FbFtleHBhbmRvXSxcblx0XHRcdG9uTW92ZUZuID0gc29ydGFibGUub3B0aW9ucy5vbk1vdmUsXG5cdFx0XHRyZXRWYWw7XG5cblx0XHRldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcblx0XHRldnQuaW5pdEV2ZW50KCdtb3ZlJywgdHJ1ZSwgdHJ1ZSk7XG5cblx0XHRldnQudG8gPSB0b0VsO1xuXHRcdGV2dC5mcm9tID0gZnJvbUVsO1xuXHRcdGV2dC5kcmFnZ2VkID0gZHJhZ0VsO1xuXHRcdGV2dC5kcmFnZ2VkUmVjdCA9IGRyYWdSZWN0O1xuXHRcdGV2dC5yZWxhdGVkID0gdGFyZ2V0RWwgfHwgdG9FbDtcblx0XHRldnQucmVsYXRlZFJlY3QgPSB0YXJnZXRSZWN0IHx8IHRvRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0ZXZ0LndpbGxJbnNlcnRBZnRlciA9IHdpbGxJbnNlcnRBZnRlcjtcblxuXHRcdGZyb21FbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cblx0XHRpZiAob25Nb3ZlRm4pIHtcblx0XHRcdHJldFZhbCA9IG9uTW92ZUZuLmNhbGwoc29ydGFibGUsIGV2dCwgb3JpZ2luYWxFdnQpO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXRWYWw7XG5cdH1cblxuXG5cdGZ1bmN0aW9uIF9kaXNhYmxlRHJhZ2dhYmxlKGVsKSB7XG5cdFx0ZWwuZHJhZ2dhYmxlID0gZmFsc2U7XG5cdH1cblxuXG5cdGZ1bmN0aW9uIF91bnNpbGVudCgpIHtcblx0XHRfc2lsZW50ID0gZmFsc2U7XG5cdH1cblxuXG5cdC8qKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8ZmFsc2V9ICovXG5cdGZ1bmN0aW9uIF9naG9zdElzTGFzdChlbCwgZXZ0KSB7XG5cdFx0dmFyIGxhc3RFbCA9IGVsLmxhc3RFbGVtZW50Q2hpbGQsXG5cdFx0XHRyZWN0ID0gbGFzdEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0Ly8gNSDigJQgbWluIGRlbHRhXG5cdFx0Ly8gYWJzIOKAlCDQvdC10LvRjNC30Y8g0LTQvtCx0LDQstC70Y/RgtGMLCDQsCDRgtC+INCz0LvRjtC60Lgg0L/RgNC4INC90LDQstC10LTQtdC90LjQuCDRgdCy0LXRgNGF0YNcblx0XHRyZXR1cm4gKGV2dC5jbGllbnRZIC0gKHJlY3QudG9wICsgcmVjdC5oZWlnaHQpID4gNSkgfHxcblx0XHRcdChldnQuY2xpZW50WCAtIChyZWN0LmxlZnQgKyByZWN0LndpZHRoKSA+IDUpO1xuXHR9XG5cblxuXHQvKipcblx0ICogR2VuZXJhdGUgaWRcblx0ICogQHBhcmFtICAge0hUTUxFbGVtZW50fSBlbFxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gX2dlbmVyYXRlSWQoZWwpIHtcblx0XHR2YXIgc3RyID0gZWwudGFnTmFtZSArIGVsLmNsYXNzTmFtZSArIGVsLnNyYyArIGVsLmhyZWYgKyBlbC50ZXh0Q29udGVudCxcblx0XHRcdGkgPSBzdHIubGVuZ3RoLFxuXHRcdFx0c3VtID0gMDtcblxuXHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdHN1bSArPSBzdHIuY2hhckNvZGVBdChpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc3VtLnRvU3RyaW5nKDM2KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbmRleCBvZiBhbiBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50IGZvciBhIHNlbGVjdGVkIHNldCBvZlxuXHQgKiBlbGVtZW50c1xuXHQgKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWxcblx0ICogQHBhcmFtICB7c2VsZWN0b3J9IHNlbGVjdG9yXG5cdCAqIEByZXR1cm4ge251bWJlcn1cblx0ICovXG5cdGZ1bmN0aW9uIF9pbmRleChlbCwgc2VsZWN0b3IpIHtcblx0XHR2YXIgaW5kZXggPSAwO1xuXG5cdFx0aWYgKCFlbCB8fCAhZWwucGFyZW50Tm9kZSkge1xuXHRcdFx0cmV0dXJuIC0xO1xuXHRcdH1cblxuXHRcdHdoaWxlIChlbCAmJiAoZWwgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSkge1xuXHRcdFx0aWYgKChlbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnVEVNUExBVEUnKSAmJiAoc2VsZWN0b3IgPT09ICc+KicgfHwgX21hdGNoZXMoZWwsIHNlbGVjdG9yKSkpIHtcblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gaW5kZXg7XG5cdH1cblxuXHRmdW5jdGlvbiBfbWF0Y2hlcygvKipIVE1MRWxlbWVudCovZWwsIC8qKlN0cmluZyovc2VsZWN0b3IpIHtcblx0XHRpZiAoZWwpIHtcblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc3BsaXQoJy4nKTtcblxuXHRcdFx0dmFyIHRhZyA9IHNlbGVjdG9yLnNoaWZ0KCkudG9VcHBlckNhc2UoKSxcblx0XHRcdFx0cmUgPSBuZXcgUmVnRXhwKCdcXFxccygnICsgc2VsZWN0b3Iuam9pbignfCcpICsgJykoPz1cXFxccyknLCAnZycpO1xuXG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQodGFnID09PSAnJyB8fCBlbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09IHRhZykgJiZcblx0XHRcdFx0KCFzZWxlY3Rvci5sZW5ndGggfHwgKCgnICcgKyBlbC5jbGFzc05hbWUgKyAnICcpLm1hdGNoKHJlKSB8fCBbXSkubGVuZ3RoID09IHNlbGVjdG9yLmxlbmd0aClcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gX3Rocm90dGxlKGNhbGxiYWNrLCBtcykge1xuXHRcdHZhciBhcmdzLCBfdGhpcztcblxuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAoYXJncyA9PT0gdm9pZCAwKSB7XG5cdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHM7XG5cdFx0XHRcdF90aGlzID0gdGhpcztcblxuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwoX3RoaXMsIGFyZ3NbMF0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjYWxsYmFjay5hcHBseShfdGhpcywgYXJncyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YXJncyA9IHZvaWQgMDtcblx0XHRcdFx0fSwgbXMpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBfZXh0ZW5kKGRzdCwgc3JjKSB7XG5cdFx0aWYgKGRzdCAmJiBzcmMpIHtcblx0XHRcdGZvciAodmFyIGtleSBpbiBzcmMpIHtcblx0XHRcdFx0aWYgKHNyYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRcdFx0ZHN0W2tleV0gPSBzcmNba2V5XTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBkc3Q7XG5cdH1cblxuXHRmdW5jdGlvbiBfY2xvbmUoZWwpIHtcblx0XHRyZXR1cm4gJFxuXHRcdFx0PyAkKGVsKS5jbG9uZSh0cnVlKVswXVxuXHRcdFx0OiAoUG9seW1lciAmJiBQb2x5bWVyLmRvbVxuXHRcdFx0XHQ/IFBvbHltZXIuZG9tKGVsKS5jbG9uZU5vZGUodHJ1ZSlcblx0XHRcdFx0OiBlbC5jbG9uZU5vZGUodHJ1ZSlcblx0XHRcdCk7XG5cdH1cblxuXHRmdW5jdGlvbiBfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlKHJvb3QpIHtcblx0XHR2YXIgaW5wdXRzID0gcm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKTtcblx0XHR2YXIgaWR4ID0gaW5wdXRzLmxlbmd0aDtcblxuXHRcdHdoaWxlIChpZHgtLSkge1xuXHRcdFx0dmFyIGVsID0gaW5wdXRzW2lkeF07XG5cdFx0XHRlbC5jaGVja2VkICYmIHNhdmVkSW5wdXRDaGVja2VkLnB1c2goZWwpO1xuXHRcdH1cblx0fVxuXG5cdC8vIEZpeGVkICM5NzM6IFxuXHRfb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZXZ0KSB7XG5cdFx0aWYgKFNvcnRhYmxlLmFjdGl2ZSkge1xuXHRcdFx0ZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9KTtcblxuXHR0cnkge1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRjYXB0dXJlTW9kZSA9IHtcblx0XHRcdFx0XHRjYXB0dXJlOiBmYWxzZSxcblx0XHRcdFx0XHRwYXNzaXZlOiBmYWxzZVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH0pKTtcblx0fSBjYXRjaCAoZXJyKSB7fVxuXG5cdC8vIEV4cG9ydCB1dGlsc1xuXHRTb3J0YWJsZS51dGlscyA9IHtcblx0XHRvbjogX29uLFxuXHRcdG9mZjogX29mZixcblx0XHRjc3M6IF9jc3MsXG5cdFx0ZmluZDogX2ZpbmQsXG5cdFx0aXM6IGZ1bmN0aW9uIChlbCwgc2VsZWN0b3IpIHtcblx0XHRcdHJldHVybiAhIV9jbG9zZXN0KGVsLCBzZWxlY3RvciwgZWwpO1xuXHRcdH0sXG5cdFx0ZXh0ZW5kOiBfZXh0ZW5kLFxuXHRcdHRocm90dGxlOiBfdGhyb3R0bGUsXG5cdFx0Y2xvc2VzdDogX2Nsb3Nlc3QsXG5cdFx0dG9nZ2xlQ2xhc3M6IF90b2dnbGVDbGFzcyxcblx0XHRjbG9uZTogX2Nsb25lLFxuXHRcdGluZGV4OiBfaW5kZXhcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBDcmVhdGUgc29ydGFibGUgaW5zdGFuY2Vcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudH0gIGVsXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSAgICAgIFtvcHRpb25zXVxuXHQgKi9cblx0U29ydGFibGUuY3JlYXRlID0gZnVuY3Rpb24gKGVsLCBvcHRpb25zKSB7XG5cdFx0cmV0dXJuIG5ldyBTb3J0YWJsZShlbCwgb3B0aW9ucyk7XG5cdH07XG5cblxuXHQvLyBFeHBvcnRcblx0U29ydGFibGUudmVyc2lvbiA9ICcxLjYuMCc7XG5cdHJldHVybiBTb3J0YWJsZTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NvcnRhYmxlanMvU29ydGFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(51),\n  /* template */\n  __webpack_require__(67),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/components/MinigameSettings.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] MinigameSettings.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-05eb101c\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-05eb101c\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9NaW5pZ2FtZVNldHRpbmdzLnZ1ZT84Nzk5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBNkg7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSxzREFBc0QsSUFBSTtBQUN6SSxtQ0FBbUM7O0FBRW5DO0FBQ0EsWUFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vTWluaWdhbWVTZXR0aW5ncy52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTA1ZWIxMDFjXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL01pbmlnYW1lU2V0dGluZ3MudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgbnVsbCxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwLWNvbnRlbnQvcGx1Z2lucy9tYWVzdHJvLWdhbWUtYnVpbGRlci9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9NaW5pZ2FtZVNldHRpbmdzLnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gTWluaWdhbWVTZXR0aW5ncy52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRlbXBsYXRlcywgdGhleSBzaG91bGQgdXNlIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtMDVlYjEwMWNcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi0wNWViMTAxY1wiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL3BhZ2VzL2NvbXBvbmVudHMvTWluaWdhbWVTZXR0aW5ncy52dWVcbi8vIG1vZHVsZSBpZCA9IDYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(53),\n  /* template */\n  __webpack_require__(75),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/components/minigame-settings/BridgeRunner.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] BridgeRunner.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-57256167\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-57256167\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9CcmlkZ2VSdW5uZXIudnVlPzJhY2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUFnSTtBQUNoSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLHNEQUFzRCxJQUFJO0FBQ3pJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiI2My5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9CcmlkZ2VSdW5uZXIudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi01NzI1NjE2N1xcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2V9IS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9CcmlkZ2VSdW5uZXIudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgbnVsbCxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwLWNvbnRlbnQvcGx1Z2lucy9tYWVzdHJvLWdhbWUtYnVpbGRlci9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9CcmlkZ2VSdW5uZXIudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkuc3Vic3RyKDAsIDIpICE9PSBcIl9fXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBCcmlkZ2VSdW5uZXIudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTU3MjU2MTY3XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNTcyNTYxNjdcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy9wYWdlcy9jb21wb25lbnRzL21pbmlnYW1lLXNldHRpbmdzL0JyaWRnZVJ1bm5lci52dWVcbi8vIG1vZHVsZSBpZCA9IDYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(54),\n  /* template */\n  __webpack_require__(73),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/components/minigame-settings/GatewayCode.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] GatewayCode.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-3f8aeb1a\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-3f8aeb1a\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9HYXRld2F5Q29kZS52dWU/OThjYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQWdJO0FBQ2hJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usc0RBQXNELElBQUk7QUFDekksbUNBQW1DOztBQUVuQztBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEIiwiZmlsZSI6IjY0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRpc3Bvc2VkID0gZmFsc2VcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0dhdGV3YXlDb2RlLnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtM2Y4YWViMWFcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlfSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vR2F0ZXdheUNvZGUudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgbnVsbCxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwLWNvbnRlbnQvcGx1Z2lucy9tYWVzdHJvLWdhbWUtYnVpbGRlci9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9HYXRld2F5Q29kZS52dWVcIlxuaWYgKENvbXBvbmVudC5lc01vZHVsZSAmJiBPYmplY3Qua2V5cyhDb21wb25lbnQuZXNNb2R1bGUpLnNvbWUoZnVuY3Rpb24gKGtleSkge3JldHVybiBrZXkgIT09IFwiZGVmYXVsdFwiICYmIGtleS5zdWJzdHIoMCwgMikgIT09IFwiX19cIn0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuaWYgKENvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIEdhdGV3YXlDb2RlLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi0zZjhhZWIxYVwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTNmOGFlYjFhXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9HYXRld2F5Q29kZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(55),\n  /* template */\n  __webpack_require__(79),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/components/minigame-settings/SimonSays.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] SimonSays.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-b4b607c0\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-b4b607c0\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9TaW1vblNheXMudnVlPzk2N2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUFnSTtBQUNoSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLHNEQUFzRCxJQUFJO0FBQ3pJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiI2NS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9TaW1vblNheXMudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1iNGI2MDdjMFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2V9IS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9TaW1vblNheXMudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgbnVsbCxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwLWNvbnRlbnQvcGx1Z2lucy9tYWVzdHJvLWdhbWUtYnVpbGRlci9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9TaW1vblNheXMudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkuc3Vic3RyKDAsIDIpICE9PSBcIl9fXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBTaW1vblNheXMudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LWI0YjYwN2MwXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtYjRiNjA3YzBcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy9wYWdlcy9jb21wb25lbnRzL21pbmlnYW1lLXNldHRpbmdzL1NpbW9uU2F5cy52dWVcbi8vIG1vZHVsZSBpZCA9IDY1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(0)(\n  /* script */\n  __webpack_require__(56),\n  /* template */\n  __webpack_require__(77),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Applications/MAMP/htdocs/wp-content/plugins/maestro-game-builder/src/js/pages/components/minigame-settings/TopRunner.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] TopRunner.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-64ceed87\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-64ceed87\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9Ub3BSdW5uZXIudnVlPzc3ZTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUFnSTtBQUNoSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLHNEQUFzRCxJQUFJO0FBQ3pJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiI2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Ub3BSdW5uZXIudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi02NGNlZWQ4N1xcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2V9IS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Ub3BSdW5uZXIudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgbnVsbCxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwLWNvbnRlbnQvcGx1Z2lucy9tYWVzdHJvLWdhbWUtYnVpbGRlci9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9Ub3BSdW5uZXIudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkuc3Vic3RyKDAsIDIpICE9PSBcIl9fXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBUb3BSdW5uZXIudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTY0Y2VlZDg3XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNjRjZWVkODdcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy9wYWdlcy9jb21wb25lbnRzL21pbmlnYW1lLXNldHRpbmdzL1RvcFJ1bm5lci52dWVcbi8vIG1vZHVsZSBpZCA9IDY2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('table', {\n    staticClass: \"form-table\"\n  }, [(_vm.gameType == 'bridgerunner') ? _c('bridge-runner', {\n    attrs: {\n      \"minigame-data\": _vm.minigameData,\n      \"form-submitted\": _vm.formSubmitted,\n      \"is-dirty\": _vm.isDirty,\n      \"title\": _vm.title\n    },\n    on: {\n      \"save\": function($event) {\n        _vm.$emit('save')\n      },\n      \"dirty\": function($event) {\n        _vm.$emit('dirty')\n      }\n    }\n  }) : _vm._e(), _vm._v(\" \"), (_vm.gameType == 'simon') ? _c('simon-says', {\n    attrs: {\n      \"minigame-data\": _vm.minigameData\n    }\n  }) : _vm._e(), _vm._v(\" \"), (_vm.gameType == 'toprunner') ? _c('top-runner', {\n    attrs: {\n      \"minigame-data\": _vm.minigameData\n    }\n  }) : _vm._e(), _vm._v(\" \"), (_vm.gameType == 'gateway') ? _c('gateway-code', {\n    attrs: {\n      \"minigame-data\": _vm.minigameData\n    }\n  }) : _vm._e()], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-05eb101c\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9NaW5pZ2FtZVNldHRpbmdzLnZ1ZT8wZTdhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ3RhYmxlJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tdGFibGVcIlxuICB9LCBbKF92bS5nYW1lVHlwZSA9PSAnYnJpZGdlcnVubmVyJykgPyBfYygnYnJpZGdlLXJ1bm5lcicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJtaW5pZ2FtZS1kYXRhXCI6IF92bS5taW5pZ2FtZURhdGEsXG4gICAgICBcImZvcm0tc3VibWl0dGVkXCI6IF92bS5mb3JtU3VibWl0dGVkLFxuICAgICAgXCJpcy1kaXJ0eVwiOiBfdm0uaXNEaXJ0eSxcbiAgICAgIFwidGl0bGVcIjogX3ZtLnRpdGxlXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJzYXZlXCI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICBfdm0uJGVtaXQoJ3NhdmUnKVxuICAgICAgfSxcbiAgICAgIFwiZGlydHlcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIF92bS4kZW1pdCgnZGlydHknKVxuICAgICAgfVxuICAgIH1cbiAgfSkgOiBfdm0uX2UoKSwgX3ZtLl92KFwiIFwiKSwgKF92bS5nYW1lVHlwZSA9PSAnc2ltb24nKSA/IF9jKCdzaW1vbi1zYXlzJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm1pbmlnYW1lLWRhdGFcIjogX3ZtLm1pbmlnYW1lRGF0YVxuICAgIH1cbiAgfSkgOiBfdm0uX2UoKSwgX3ZtLl92KFwiIFwiKSwgKF92bS5nYW1lVHlwZSA9PSAndG9wcnVubmVyJykgPyBfYygndG9wLXJ1bm5lcicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJtaW5pZ2FtZS1kYXRhXCI6IF92bS5taW5pZ2FtZURhdGFcbiAgICB9XG4gIH0pIDogX3ZtLl9lKCksIF92bS5fdihcIiBcIiksIChfdm0uZ2FtZVR5cGUgPT0gJ2dhdGV3YXknKSA/IF9jKCdnYXRld2F5LWNvZGUnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwibWluaWdhbWUtZGF0YVwiOiBfdm0ubWluaWdhbWVEYXRhXG4gICAgfVxuICB9KSA6IF92bS5fZSgpXSwgMSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtMDVlYjEwMWNcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi0wNWViMTAxY1wiLFwiaGFzU2NvcGVkXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9NaW5pZ2FtZVNldHRpbmdzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"sp-dialog-popup-outer\"\n    }\n  }, [_c('div', {\n    staticClass: \"container\"\n  }, [_c('div', {\n    staticClass: \"row\"\n  }, [_c('div', {\n    staticClass: \"col-sm-6 col-sm-offset-3\",\n    attrs: {\n      \"id\": \"sp-dialog-popup-inner\"\n    }\n  }, [(_vm.boxType == 'createGame') ? [_c('form', {\n    attrs: {\n      \"id\": \"create-game\"\n    },\n    on: {\n      \"submit\": function($event) {\n        $event.preventDefault();\n        _vm.createGame($event)\n      }\n    }\n  }, [_c('p', {\n    staticClass: \"center\"\n  }, [_vm._v(\"\\n              What's the name of your new game?\\n            \")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"control has-icon has-icon-right\"\n  }, [_c('label', {\n    staticClass: \"label\"\n  }, [_vm._v(\"Game Title: \")]), _vm._v(\" \"), _c('span', {\n    staticClass: \"new-game-title\",\n    class: {\n      'has-content': _vm.newGameTitle\n    }\n  }, [_c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.newGameTitle),\n      expression: \"newGameTitle\"\n    }, {\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: ('required'),\n      expression: \"'required'\"\n    }],\n    attrs: {\n      \"name\": \"title\",\n      \"data-vv-name\": \"title\",\n      \"id\": \"title\",\n      \"type\": \"text\"\n    },\n    domProps: {\n      \"value\": (_vm.newGameTitle)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.newGameTitle = $event.target.value\n      }\n    }\n  })])]), _vm._v(\" \"), _c('p', {\n    staticClass: \"control\"\n  }, [(_vm.formSubmitted) ? _c('loading-spinner') : _c('button', {\n    staticClass: \"button button-confirm\",\n    class: {\n      active: _vm.newGameTitle\n    },\n    attrs: {\n      \"disabled\": !_vm.newGameTitle,\n      \"type\": \"submit\"\n    }\n  }, [(_vm.newGameTitle) ? [_vm._v(\"\\n                  Make it happen!\\n                \")] : [_vm._v(\"\\n                  Be clever...\\n                \")]], 2), _vm._v(\" \"), (!_vm.formSubmitted) ? _c('button', {\n    staticClass: \"button button-cancel\",\n    attrs: {\n      \"type\": \"button\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.$emit('close');\n      }\n    }\n  }, [_vm._v(\"Cancel\")]) : _vm._e()], 1)])] : _vm._e(), _vm._v(\" \"), (_vm.boxType == 'createMinigame') ? [_c('form', {\n    attrs: {\n      \"id\": \"create-minigame\"\n    },\n    on: {\n      \"submit\": function($event) {\n        $event.preventDefault();\n        _vm.createMinigame($event)\n      }\n    }\n  }, [_c('p', {\n    staticClass: \"center\"\n  }, [_vm._v(\"\\n              Choose the type of minigame you want to make, and give it a unique name.\\n            \")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"control has-icon has-icon-right\"\n  }, [_c('select', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.minigameType),\n      expression: \"minigameType\"\n    }, {\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: ('required'),\n      expression: \"'required'\"\n    }],\n    attrs: {\n      \"name\": \"gametype\",\n      \"id\": \"gametype\"\n    },\n    on: {\n      \"change\": function($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function(o) {\n          return o.selected\n        }).map(function(o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val\n        });\n        _vm.minigameType = $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n      }\n    }\n  }, [_c('option', {\n    attrs: {\n      \"value\": \"\"\n    }\n  }, [_vm._v(\"Choose a Minigame Type...\")]), _vm._v(\" \"), _vm._l((_vm.minigameOptions), function(label, option) {\n    return [_c('option', {\n      domProps: {\n        \"value\": option\n      }\n    }, [_vm._v(_vm._s(label))])]\n  })], 2)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"control has-icon has-icon-right\"\n  }, [_c('label', {\n    staticClass: \"label\"\n  }, [_vm._v(\"Game Title: \")]), _vm._v(\" \"), _c('span', {\n    staticClass: \"new-game-title has-content\"\n  }, [_c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.newMinigameTitle),\n      expression: \"newMinigameTitle\"\n    }, {\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: ('required'),\n      expression: \"'required'\"\n    }],\n    attrs: {\n      \"name\": \"title\",\n      \"data-vv-name\": \"title\",\n      \"id\": \"title\",\n      \"type\": \"text\"\n    },\n    domProps: {\n      \"value\": (_vm.newMinigameTitle)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.newMinigameTitle = $event.target.value\n      }\n    }\n  })])]), _vm._v(\" \"), _c('p', {\n    staticClass: \"control\"\n  }, [(_vm.formSubmitted) ? _c('loading-spinner') : _c('button', {\n    staticClass: \"button button-confirm\",\n    class: {\n      active: _vm.newMinigameTitle\n    },\n    attrs: {\n      \"disabled\": !_vm.newMinigameTitle || !_vm.minigameType,\n      \"type\": \"submit\"\n    }\n  }, [(_vm.newMinigameTitle && _vm.minigameType) ? [_vm._v(\"\\n                  Make it happen!\\n                \")] : (_vm.minigameType) ? [_vm._v(\"\\n                  Give me a name...\\n                \")] : [_vm._v(\"\\n                  Give me a type...\\n                \")]], 2), _vm._v(\" \"), (!_vm.formSubmitted) ? _c('button', {\n    staticClass: \"button button-cancel\",\n    attrs: {\n      \"type\": \"button\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.$emit('close');\n      }\n    }\n  }, [_vm._v(\"Cancel\")]) : _vm._e()], 1)])] : _vm._e()], 2)])])])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-09bf0172\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"sp-dialog-popup-outer\"\n    }\n  }, [_c('div', {\n    staticClass: \"container\"\n  }, [_c('div', {\n    staticClass: \"row\"\n  }, [_c('div', {\n    staticClass: \"col-sm-12\",\n    attrs: {\n      \"id\": \"sp-dialog-popup-inner\"\n    }\n  }, [_c('h4', {\n    staticClass: \"sp-modal-title\"\n  }, [_vm._v(\"Select the image part you want for this game asset.\")]), _vm._v(\" \"), _c('p', {\n    staticClass: \"sp-modal-title-description\"\n  }, [_vm._v(\"Crop zone is locked to artwork height/width proportion.\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"container-fluid crop-image-popup-inner\"\n  }, [_c('div', {\n    staticClass: \"row-fluid\"\n  }, [_c('div', {\n    staticClass: \"col-sm-5\"\n  }, [_c('img', {\n    attrs: {\n      \"id\": \"crop-image\",\n      \"src\": _vm.rawImage\n    }\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"rotation-slider\"\n  }, [_c('h5', [_vm._v(\"Rotation:\")]), _vm._v(\" \"), _c('vue-slider', {\n    attrs: {\n      \"max\": 360\n    },\n    on: {\n      \"drag-end\": _vm.rotationDragEnd\n    }\n  })], 1)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"col-sm-6 col-sm-offset-1\"\n  }, [_c('div', {\n    staticClass: \"canvas-shell\"\n  }, [_c('canvas', {\n    directives: [{\n      name: \"insert-image\",\n      rawName: \"v-insert-image\",\n      value: (_vm.cropData),\n      expression: \"cropData\"\n    }],\n    class: {\n      'color-select': _vm.selectColor == true\n    },\n    staticStyle: {\n      \"border\": \"1px solid #BBB\"\n    },\n    attrs: {\n      \"width\": _vm.canvasWidth,\n      \"height\": _vm.canvasHeight,\n      \"id\": \"crop-canvas\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.getPixelColor($event)\n      }\n    }\n  }), _vm._v(\" \"), (_vm.imageData[_vm.imageKey].alpha) ? [_c('div', {\n    staticClass: \"mgb-alpha-checkbox-wrap\"\n  }, [_c('input', {\n    attrs: {\n      \"type\": \"checkbox\",\n      \"id\": \"alpha-checkbox\"\n    },\n    domProps: {\n      \"value\": _vm.selectColor\n    },\n    on: {\n      \"change\": function($event) {\n        _vm.selectColor = !_vm.selectColor\n      }\n    }\n  }), _vm._v(\" Check this box then click the color above that you want to filter out.\\n                  \")])] : _vm._e()], 2), _vm._v(\" \"), (!_vm.formSubmitted && _vm.saveActive == true) ? _c('button', {\n    staticClass: \"button button-confirm\",\n    attrs: {\n      \"type\": \"button\"\n    },\n    on: {\n      \"click\": _vm.saveImage\n    }\n  }, [_vm._v(\"Save\")]) : _vm._e(), _vm._v(\" \"), (!_vm.formSubmitted) ? _c('button', {\n    staticClass: \"button button-cancel\",\n    attrs: {\n      \"type\": \"button\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.$emit('close');\n      }\n    }\n  }, [_vm._v(\"Cancel\")]) : _vm._e()])])])])])])])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-2599b1b6\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9Dcm9wQm94LnZ1ZT8wNTczIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjY5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJzcC1kaWFsb2ctcG9wdXAtb3V0ZXJcIlxuICAgIH1cbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiY29udGFpbmVyXCJcbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwicm93XCJcbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiY29sLXNtLTEyXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJzcC1kaWFsb2ctcG9wdXAtaW5uZXJcIlxuICAgIH1cbiAgfSwgW19jKCdoNCcsIHtcbiAgICBzdGF0aWNDbGFzczogXCJzcC1tb2RhbC10aXRsZVwiXG4gIH0sIFtfdm0uX3YoXCJTZWxlY3QgdGhlIGltYWdlIHBhcnQgeW91IHdhbnQgZm9yIHRoaXMgZ2FtZSBhc3NldC5cIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3AnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwic3AtbW9kYWwtdGl0bGUtZGVzY3JpcHRpb25cIlxuICB9LCBbX3ZtLl92KFwiQ3JvcCB6b25lIGlzIGxvY2tlZCB0byBhcnR3b3JrIGhlaWdodC93aWR0aCBwcm9wb3J0aW9uLlwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImNvbnRhaW5lci1mbHVpZCBjcm9wLWltYWdlLXBvcHVwLWlubmVyXCJcbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwicm93LWZsdWlkXCJcbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiY29sLXNtLTVcIlxuICB9LCBbX2MoJ2ltZycsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcImNyb3AtaW1hZ2VcIixcbiAgICAgIFwic3JjXCI6IF92bS5yYXdJbWFnZVxuICAgIH1cbiAgfSksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwicm90YXRpb24tc2xpZGVyXCJcbiAgfSwgW19jKCdoNScsIFtfdm0uX3YoXCJSb3RhdGlvbjpcIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3Z1ZS1zbGlkZXInLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwibWF4XCI6IDM2MFxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwiZHJhZy1lbmRcIjogX3ZtLnJvdGF0aW9uRHJhZ0VuZFxuICAgIH1cbiAgfSldLCAxKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImNvbC1zbS02IGNvbC1zbS1vZmZzZXQtMVwiXG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImNhbnZhcy1zaGVsbFwiXG4gIH0sIFtfYygnY2FudmFzJywge1xuICAgIGRpcmVjdGl2ZXM6IFt7XG4gICAgICBuYW1lOiBcImluc2VydC1pbWFnZVwiLFxuICAgICAgcmF3TmFtZTogXCJ2LWluc2VydC1pbWFnZVwiLFxuICAgICAgdmFsdWU6IChfdm0uY3JvcERhdGEpLFxuICAgICAgZXhwcmVzc2lvbjogXCJjcm9wRGF0YVwiXG4gICAgfV0sXG4gICAgY2xhc3M6IHtcbiAgICAgICdjb2xvci1zZWxlY3QnOiBfdm0uc2VsZWN0Q29sb3IgPT0gdHJ1ZVxuICAgIH0sXG4gICAgc3RhdGljU3R5bGU6IHtcbiAgICAgIFwiYm9yZGVyXCI6IFwiMXB4IHNvbGlkICNCQkJcIlxuICAgIH0sXG4gICAgYXR0cnM6IHtcbiAgICAgIFwid2lkdGhcIjogX3ZtLmNhbnZhc1dpZHRoLFxuICAgICAgXCJoZWlnaHRcIjogX3ZtLmNhbnZhc0hlaWdodCxcbiAgICAgIFwiaWRcIjogXCJjcm9wLWNhbnZhc1wiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgX3ZtLmdldFBpeGVsQ29sb3IoJGV2ZW50KVxuICAgICAgfVxuICAgIH1cbiAgfSksIF92bS5fdihcIiBcIiksIChfdm0uaW1hZ2VEYXRhW192bS5pbWFnZUtleV0uYWxwaGEpID8gW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwibWdiLWFscGhhLWNoZWNrYm94LXdyYXBcIlxuICB9LCBbX2MoJ2lucHV0Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInR5cGVcIjogXCJjaGVja2JveFwiLFxuICAgICAgXCJpZFwiOiBcImFscGhhLWNoZWNrYm94XCJcbiAgICB9LFxuICAgIGRvbVByb3BzOiB7XG4gICAgICBcInZhbHVlXCI6IF92bS5zZWxlY3RDb2xvclxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwiY2hhbmdlXCI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICBfdm0uc2VsZWN0Q29sb3IgPSAhX3ZtLnNlbGVjdENvbG9yXG4gICAgICB9XG4gICAgfVxuICB9KSwgX3ZtLl92KFwiIENoZWNrIHRoaXMgYm94IHRoZW4gY2xpY2sgdGhlIGNvbG9yIGFib3ZlIHRoYXQgeW91IHdhbnQgdG8gZmlsdGVyIG91dC5cXG4gICAgICAgICAgICAgICAgICBcIildKV0gOiBfdm0uX2UoKV0sIDIpLCBfdm0uX3YoXCIgXCIpLCAoIV92bS5mb3JtU3VibWl0dGVkICYmIF92bS5zYXZlQWN0aXZlID09IHRydWUpID8gX2MoJ2J1dHRvbicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJidXR0b24gYnV0dG9uLWNvbmZpcm1cIixcbiAgICBhdHRyczoge1xuICAgICAgXCJ0eXBlXCI6IFwiYnV0dG9uXCJcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcImNsaWNrXCI6IF92bS5zYXZlSW1hZ2VcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJTYXZlXCIpXSkgOiBfdm0uX2UoKSwgX3ZtLl92KFwiIFwiKSwgKCFfdm0uZm9ybVN1Ym1pdHRlZCkgPyBfYygnYnV0dG9uJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImJ1dHRvbiBidXR0b24tY2FuY2VsXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcImJ1dHRvblwiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgX3ZtLiRlbWl0KCdjbG9zZScpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW192bS5fdihcIkNhbmNlbFwiKV0pIDogX3ZtLl9lKCldKV0pXSldKV0pXSldKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxubW9kdWxlLmV4cG9ydHMucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKS5yZXJlbmRlcihcImRhdGEtdi0yNTk5YjFiNlwiLCBtb2R1bGUuZXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTI1OTliMWI2XCIsXCJoYXNTY29wZWRcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9qcy9wYWdlcy9jb21wb25lbnRzL0Nyb3BCb3gudnVlXG4vLyBtb2R1bGUgaWQgPSA2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"home\"\n  }, [_c('h2', {\n    attrs: {\n      \"id\": \"app-title\"\n    }\n  }, [_vm._v(\"Maestro Game Builder\")]), _vm._v(\" \"), (!_vm.loading) ? [(_vm.hasGames) ? [_vm._l((_vm.games), function(game) {\n    return _c('div', {\n      staticClass: \"col-md-4 col-sm-6 existing-game-block\"\n    }, [_c('router-link', {\n      attrs: {\n        \"to\": {\n          name: 'single-game',\n          params: {\n            id: game.id\n          }\n        }\n      }\n    }, [_c('h3', [_vm._v(_vm._s(game.title)), (game.status == 'draft') ? _c('em', [_c('br'), _vm._v(\"(draft)\")]) : _vm._e()])]), _vm._v(\" \"), _c('span', {\n      staticClass: \"game-meta\"\n    }, [(game.custom.type) ? _c('h5', [_vm._v(_vm._s(game.custom.typeLabel))]) : _c('h5', [_vm._v(\"Needs configured.\")]), _vm._v(\" \"), _c('ul', [(game.link) ? _c('li', [_c('a', {\n      attrs: {\n        \"href\": game.link,\n        \"target\": \"_blank\"\n      }\n    }, [_c('i', {\n      staticClass: \"fa fa-gamepad\"\n    }), _vm._v(\"Play\")])]) : _vm._e(), _vm._v(\" \"), _c('li', [_c('router-link', {\n      attrs: {\n        \"to\": {\n          name: 'single-game',\n          params: {\n            id: game.id\n          }\n        }\n      }\n    }, [_c('i', {\n      staticClass: \"fa fa-pencil\"\n    }), _vm._v(\"Edit\")])], 1), _vm._v(\" \"), _c('li', [_c('a', {\n      attrs: {\n        \"href\": \"#\"\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.copyGame(game.id)\n        }\n      }\n    }, [_c('i', {\n      staticClass: \"fa fa-copy\"\n    }), _vm._v(\"Copy\")])]), _vm._v(\" \"), _c('li', [_c('a', {\n      attrs: {\n        \"href\": \"#\"\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.deleteID = game.id;\n          _vm.deleteTitle = game.title\n        }\n      }\n    }, [_c('i', {\n      staticClass: \"fa fa-close\"\n    }), _vm._v(\"Delete\")])])])])], 1)\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"col-md-4 col-sm-6 existing-game-block create-game\"\n  }, [_c('a', {\n    attrs: {\n      \"href\": \"#\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.create = true;\n      }\n    }\n  }, [_vm._m(0)])])] : [_c('div', {\n    staticClass: \"col-md-8 col-md-offset-2 maestro-inner\"\n  }, [_c('h3', {\n    staticClass: \"center\"\n  }, [_vm._v(\"Welcome to the \"), _c('em', [_vm._v(\"Maestro\")]), _vm._v(\" game builder,\"), _c('br'), _vm._v(\"built with love by the creators of \"), _c('em', [_vm._v(\"The Search for Harmony\")]), _vm._v(\".\"), _c('br'), _vm._v(\"You can use this tool to create fun minigame-based experiences.\")]), _vm._v(\" \"), _c('p', {\n    staticClass: \"center\"\n  }, [_vm._v(\"\\n          To get started, go ahead and name your very first game (you can change it later if you want).\\n        \")]), _vm._v(\" \"), _c('form', {\n    attrs: {\n      \"id\": \"create-game\"\n    },\n    on: {\n      \"submit\": function($event) {\n        $event.preventDefault();\n        _vm.validateBeforeSubmit($event)\n      }\n    }\n  }, [_c('div', {\n    staticClass: \"control has-icon has-icon-right\"\n  }, [_c('label', {\n    staticClass: \"label\"\n  }, [_vm._v(\"Game Title: \")]), _vm._v(\" \"), _c('span', {\n    staticClass: \"new-game-title\",\n    class: {\n      'has-content': _vm.newGameTitle\n    }\n  }, [_c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.newGameTitle),\n      expression: \"newGameTitle\"\n    }, {\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: ('required'),\n      expression: \"'required'\"\n    }],\n    attrs: {\n      \"name\": \"title\",\n      \"data-vv-name\": \"title\",\n      \"id\": \"title\",\n      \"type\": \"text\"\n    },\n    domProps: {\n      \"value\": (_vm.newGameTitle)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.newGameTitle = $event.target.value\n      }\n    }\n  })])]), _vm._v(\" \"), _c('p', {\n    staticClass: \"control\"\n  }, [(_vm.formSubmitted) ? _c('loading-spinner') : _c('button', {\n    staticClass: \"button button-submit\",\n    class: {\n      active: _vm.newGameTitle\n    },\n    attrs: {\n      \"disabled\": !_vm.newGameTitle,\n      \"type\": \"submit\"\n    }\n  }, [(_vm.newGameTitle) ? [_vm._v(\"\\n                Make it happen!\\n              \")] : [_vm._v(\"\\n                Be clever...\\n              \")]], 2)], 1)])])]] : [_c('loading-spinner')], _vm._v(\" \"), (_vm.deleteTitle) ? _c('dialog-box', {\n    attrs: {\n      \"message\": _vm.dialogMessage\n    },\n    on: {\n      \"no\": function($event) {\n        _vm.deleteID = null;\n        _vm.deleteTitle = null;\n      },\n      \"yes\": _vm.deleteGame\n    }\n  }) : _vm._e(), _vm._v(\" \"), (_vm.create) ? _c('info-box', {\n    attrs: {\n      \"box-type\": 'createGame'\n    },\n    on: {\n      \"close\": function($event) {\n        _vm.create = false;\n      }\n    }\n  }) : _vm._e()], 2)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('span', [_c('i', {\n    staticClass: \"fa fa-plus\"\n  }), _vm._v(\"\\n            Create New Game\\n          \")])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-32a465e2\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"sp-dialog-popup-outer\"\n    }\n  }, [_c('div', {\n    staticClass: \"container\"\n  }, [_c('div', {\n    staticClass: \"row\"\n  }, [_c('div', {\n    staticClass: \"col-sm-6 col-sm-offset-3\",\n    attrs: {\n      \"id\": \"sp-dialog-popup-inner\"\n    }\n  }, [_c('p', [_vm._v(_vm._s(_vm.message))]), _vm._v(\" \"), _c('button', {\n    staticClass: \"button button-confirm\",\n    on: {\n      \"click\": _vm.yes\n    }\n  }, [_vm._v(\"Yes\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"button button-cancel\",\n    on: {\n      \"click\": _vm.no\n    }\n  }, [_vm._v(\"No\")]), _vm._v(\" \"), (_vm.cancelButton) ? _c('button', {\n    staticClass: \"button button-cancel\",\n    on: {\n      \"click\": _vm.cancel\n    }\n  }, [_vm._v(\"Cancel\")]) : _vm._e()])])])])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-37f770ed\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9EaWFsb2dCb3gudnVlPzJmNmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcInNwLWRpYWxvZy1wb3B1cC1vdXRlclwiXG4gICAgfVxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJjb250YWluZXJcIlxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJyb3dcIlxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJjb2wtc20tNiBjb2wtc20tb2Zmc2V0LTNcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcInNwLWRpYWxvZy1wb3B1cC1pbm5lclwiXG4gICAgfVxuICB9LCBbX2MoJ3AnLCBbX3ZtLl92KF92bS5fcyhfdm0ubWVzc2FnZSkpXSksIF92bS5fdihcIiBcIiksIF9jKCdidXR0b24nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiYnV0dG9uIGJ1dHRvbi1jb25maXJtXCIsXG4gICAgb246IHtcbiAgICAgIFwiY2xpY2tcIjogX3ZtLnllc1xuICAgIH1cbiAgfSwgW192bS5fdihcIlllc1wiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnYnV0dG9uJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImJ1dHRvbiBidXR0b24tY2FuY2VsXCIsXG4gICAgb246IHtcbiAgICAgIFwiY2xpY2tcIjogX3ZtLm5vXG4gICAgfVxuICB9LCBbX3ZtLl92KFwiTm9cIildKSwgX3ZtLl92KFwiIFwiKSwgKF92bS5jYW5jZWxCdXR0b24pID8gX2MoJ2J1dHRvbicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJidXR0b24gYnV0dG9uLWNhbmNlbFwiLFxuICAgIG9uOiB7XG4gICAgICBcImNsaWNrXCI6IF92bS5jYW5jZWxcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJDYW5jZWxcIildKSA6IF92bS5fZSgpXSldKV0pXSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtMzdmNzcwZWRcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi0zN2Y3NzBlZFwiLFwiaGFzU2NvcGVkXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9EaWFsb2dCb3gudnVlXG4vLyBtb2R1bGUgaWQgPSA3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"sp-dialog-popup-outer\"\n    }\n  }, [_c('div', {\n    staticClass: \"container\"\n  }, [_c('div', {\n    staticClass: \"row\"\n  }, [_c('div', {\n    staticClass: \"col-sm-12\",\n    attrs: {\n      \"id\": \"sp-dialog-popup-inner\"\n    }\n  }, [_c('h4', {\n    staticClass: \"sp-modal-title\"\n  }, [_vm._v(_vm._s(_vm.codeComponents.lineKey))]), _vm._v(\" \"), _c('p', {\n    staticClass: \"sp-modal-title-description sp-code-description\"\n  }, [_vm._v(_vm._s(_vm.codeComponents.description))]), _vm._v(\" \"), _c('div', {\n    staticClass: \"sp-code-box-controls\"\n  }, [_c('button', {\n    staticClass: \"maestro-view-source maestro-source-toggle\",\n    class: {\n      'active': _vm.filterActive\n    },\n    on: {\n      \"click\": _vm.showOnlyHighlights\n    }\n  }, [_vm._v(\"Show Where \\\"\" + _vm._s(_vm.codeComponents.lineKey) + \"\\\" Is Used\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"maestro-view-source maestro-source-toggle\",\n    class: {\n      'active': !_vm.filterActive\n    },\n    on: {\n      \"click\": _vm.showAll\n    }\n  }, [_vm._v(\"Show All\")])]), _vm._v(\" \"), _c('pre', {\n    staticClass: \"language-javascript sp-code-box\",\n    class: {\n      'sp-filter-active': _vm.filterActive\n    }\n  }, [_c('code', {\n    staticClass: \"language-javascript\",\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.fileData)\n    }\n  })]), _vm._v(\" \"), _c('button', {\n    staticClass: \"maestro-box-close\",\n    on: {\n      \"click\": function($event) {\n        _vm.$emit('close')\n      }\n    }\n  }, [_c('i', {\n    staticClass: \"fa fa-close\"\n  })])])])])])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-3ab92128\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9Db2RlQm94LnZ1ZT81MDdjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcInNwLWRpYWxvZy1wb3B1cC1vdXRlclwiXG4gICAgfVxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJjb250YWluZXJcIlxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJyb3dcIlxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJjb2wtc20tMTJcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcInNwLWRpYWxvZy1wb3B1cC1pbm5lclwiXG4gICAgfVxuICB9LCBbX2MoJ2g0Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcInNwLW1vZGFsLXRpdGxlXCJcbiAgfSwgW192bS5fdihfdm0uX3MoX3ZtLmNvZGVDb21wb25lbnRzLmxpbmVLZXkpKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygncCcsIHtcbiAgICBzdGF0aWNDbGFzczogXCJzcC1tb2RhbC10aXRsZS1kZXNjcmlwdGlvbiBzcC1jb2RlLWRlc2NyaXB0aW9uXCJcbiAgfSwgW192bS5fdihfdm0uX3MoX3ZtLmNvZGVDb21wb25lbnRzLmRlc2NyaXB0aW9uKSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJzcC1jb2RlLWJveC1jb250cm9sc1wiXG4gIH0sIFtfYygnYnV0dG9uJywge1xuICAgIHN0YXRpY0NsYXNzOiBcIm1hZXN0cm8tdmlldy1zb3VyY2UgbWFlc3Ryby1zb3VyY2UtdG9nZ2xlXCIsXG4gICAgY2xhc3M6IHtcbiAgICAgICdhY3RpdmUnOiBfdm0uZmlsdGVyQWN0aXZlXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0uc2hvd09ubHlIaWdobGlnaHRzXG4gICAgfVxuICB9LCBbX3ZtLl92KFwiU2hvdyBXaGVyZSBcXFwiXCIgKyBfdm0uX3MoX3ZtLmNvZGVDb21wb25lbnRzLmxpbmVLZXkpICsgXCJcXFwiIElzIFVzZWRcIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2J1dHRvbicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJtYWVzdHJvLXZpZXctc291cmNlIG1hZXN0cm8tc291cmNlLXRvZ2dsZVwiLFxuICAgIGNsYXNzOiB7XG4gICAgICAnYWN0aXZlJzogIV92bS5maWx0ZXJBY3RpdmVcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcImNsaWNrXCI6IF92bS5zaG93QWxsXG4gICAgfVxuICB9LCBbX3ZtLl92KFwiU2hvdyBBbGxcIildKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygncHJlJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImxhbmd1YWdlLWphdmFzY3JpcHQgc3AtY29kZS1ib3hcIixcbiAgICBjbGFzczoge1xuICAgICAgJ3NwLWZpbHRlci1hY3RpdmUnOiBfdm0uZmlsdGVyQWN0aXZlXG4gICAgfVxuICB9LCBbX2MoJ2NvZGUnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwibGFuZ3VhZ2UtamF2YXNjcmlwdFwiLFxuICAgIGRvbVByb3BzOiB7XG4gICAgICBcImlubmVySFRNTFwiOiBfdm0uX3MoX3ZtLmZpbGVEYXRhKVxuICAgIH1cbiAgfSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2J1dHRvbicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJtYWVzdHJvLWJveC1jbG9zZVwiLFxuICAgIG9uOiB7XG4gICAgICBcImNsaWNrXCI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICBfdm0uJGVtaXQoJ2Nsb3NlJylcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtfYygnaScsIHtcbiAgICBzdGF0aWNDbGFzczogXCJmYSBmYS1jbG9zZVwiXG4gIH0pXSldKV0pXSldKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxubW9kdWxlLmV4cG9ydHMucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKS5yZXJlbmRlcihcImRhdGEtdi0zYWI5MjEyOFwiLCBtb2R1bGUuZXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTNhYjkyMTI4XCIsXCJoYXNTY29wZWRcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9qcy9wYWdlcy9jb21wb25lbnRzL0NvZGVCb3gudnVlXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tbody', [_vm._m(0), _vm._v(\" \"), _c('tr', [_c('th'), _vm._v(\" \"), _c('td', {\n    staticClass: \"save\"\n  }, [(_vm.formSubmitted) ? _c('loading-spinner') : _c('button', {\n    staticClass: \"button button-submit\",\n    attrs: {\n      \"type\": \"submit\",\n      \"disabled\": _vm.saveText != 'Save Game'\n    }\n  }, [_vm._v(_vm._s(_vm.saveText))])], 1)])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"minigame_settings\"\n    }\n  }, [_vm._v(\"Settings\")])]), _vm._v(\" \"), _c('td', [_vm._v(\"\\n    Gateway Code specific settings will go here.\\n    \")])])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-3f8aeb1a\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9HYXRld2F5Q29kZS52dWU/ODY1MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDLCtCQUErQixhQUFhLDBCQUEwQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjczLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCd0Ym9keScsIFtfdm0uX20oMCksIF92bS5fdihcIiBcIiksIF9jKCd0cicsIFtfYygndGgnKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3RkJywge1xuICAgIHN0YXRpY0NsYXNzOiBcInNhdmVcIlxuICB9LCBbKF92bS5mb3JtU3VibWl0dGVkKSA/IF9jKCdsb2FkaW5nLXNwaW5uZXInKSA6IF9jKCdidXR0b24nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiYnV0dG9uIGJ1dHRvbi1zdWJtaXRcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJ0eXBlXCI6IFwic3VibWl0XCIsXG4gICAgICBcImRpc2FibGVkXCI6IF92bS5zYXZlVGV4dCAhPSAnU2F2ZSBHYW1lJ1xuICAgIH1cbiAgfSwgW192bS5fdihfdm0uX3MoX3ZtLnNhdmVUZXh0KSldKV0sIDEpXSldKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCd0cicsIFtfYygndGgnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwic2NvcGVcIjogXCJyb3dcIlxuICAgIH1cbiAgfSwgW19jKCdsYWJlbCcsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJmb3JcIjogXCJtaW5pZ2FtZV9zZXR0aW5nc1wiXG4gICAgfVxuICB9LCBbX3ZtLl92KFwiU2V0dGluZ3NcIildKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygndGQnLCBbX3ZtLl92KFwiXFxuICAgIEdhdGV3YXkgQ29kZSBzcGVjaWZpYyBzZXR0aW5ncyB3aWxsIGdvIGhlcmUuXFxuICAgIFwiKV0pXSlcbn1dfVxubW9kdWxlLmV4cG9ydHMucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKS5yZXJlbmRlcihcImRhdGEtdi0zZjhhZWIxYVwiLCBtb2R1bGUuZXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTNmOGFlYjFhXCIsXCJoYXNTY29wZWRcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9qcy9wYWdlcy9jb21wb25lbnRzL21pbmlnYW1lLXNldHRpbmdzL0dhdGV3YXlDb2RlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"game-single minigame-single\"\n  }, [(!_vm.loading) ? [_c('router-link', {\n    staticClass: \"button button-return\",\n    attrs: {\n      \"to\": {\n        name: 'single-game',\n        params: {\n          id: _vm.$route.params.id\n        }\n      }\n    }\n  }, [_c('i', {\n    staticClass: \"fa fa-chevron-left\"\n  }), _vm._v(\" Game Options\")]), _vm._v(\" \"), _c('h2', {\n    attrs: {\n      \"id\": \"app-title\"\n    }\n  }, [_vm._v(_vm._s(_vm.filteredTitle))]), _vm._v(\" \"), _c('div', {\n    staticClass: \"col-md-12 maestro-inner\"\n  }, [_c('form', {\n    attrs: {\n      \"id\": \"save-game\"\n    },\n    on: {\n      \"submit\": function($event) {\n        $event.preventDefault();\n        _vm.validateBeforeSubmit($event)\n      }\n    }\n  }, [_c('table', {\n    staticClass: \"form-table\"\n  }, [_c('tbody', [_c('tr', [_vm._m(0), _vm._v(\" \"), _c('td', [_c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.title),\n      expression: \"title\"\n    }, {\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: ('required'),\n      expression: \"'required'\"\n    }],\n    staticClass: \"regular-text\",\n    attrs: {\n      \"name\": \"gametitle\",\n      \"type\": \"text\",\n      \"id\": \"gametitle\"\n    },\n    domProps: {\n      \"value\": (_vm.title)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.title = $event.target.value\n      }\n    }\n  })])]), _vm._v(\" \"), _c('tr', [_vm._m(1), _vm._v(\" \"), _c('td', [_c('select', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.gameType),\n      expression: \"gameType\"\n    }, {\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: ('required'),\n      expression: \"'required'\"\n    }],\n    staticClass: \"disabled\",\n    attrs: {\n      \"name\": \"gametype\",\n      \"id\": \"gametype\",\n      \"disabled\": \"disabled\"\n    },\n    on: {\n      \"change\": function($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function(o) {\n          return o.selected\n        }).map(function(o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val\n        });\n        _vm.gameType = $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n      }\n    }\n  }, [_c('option', {\n    attrs: {\n      \"value\": \"\"\n    }\n  }, [_vm._v(\"Choose a Game Type...\")]), _vm._v(\" \"), _vm._l((_vm.minigameOptions), function(label, option) {\n    return [_c('option', {\n      domProps: {\n        \"value\": option\n      }\n    }, [_vm._v(_vm._s(label))])]\n  })], 2)])])])]), _vm._v(\" \"), (_vm.gameType != '') ? [_c('minigame-settings', {\n    attrs: {\n      \"game-type\": _vm.gameType,\n      \"minigame-data\": _vm.minigameData,\n      \"form-submitted\": _vm.formSubmitted,\n      \"is-dirty\": _vm.isDirty,\n      \"title\": _vm.title\n    },\n    on: {\n      \"save\": _vm.saveMinigame,\n      \"dirty\": function($event) {\n        _vm.isDirty = true\n      }\n    }\n  })] : _vm._e()], 2)])] : [_c('loading-spinner')]], 2)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"gametitle\"\n    }\n  }, [_vm._v(\"Minigame Title\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"gametype\"\n    }\n  }, [_vm._v(\"Minigame Type\")])])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-473890b4\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvTWluaWdhbWVTaW5nbGUudnVlPzdlODYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHNDQUFzQyxRQUFRO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMsK0JBQStCLGFBQWEsMEJBQTBCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDLGFBQWEsYUFBYSwwQkFBMEI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI3NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImdhbWUtc2luZ2xlIG1pbmlnYW1lLXNpbmdsZVwiXG4gIH0sIFsoIV92bS5sb2FkaW5nKSA/IFtfYygncm91dGVyLWxpbmsnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiYnV0dG9uIGJ1dHRvbi1yZXR1cm5cIixcbiAgICBhdHRyczoge1xuICAgICAgXCJ0b1wiOiB7XG4gICAgICAgIG5hbWU6ICdzaW5nbGUtZ2FtZScsXG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGlkOiBfdm0uJHJvdXRlLnBhcmFtcy5pZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCBbX2MoJ2knLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiZmEgZmEtY2hldnJvbi1sZWZ0XCJcbiAgfSksIF92bS5fdihcIiBHYW1lIE9wdGlvbnNcIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2gyJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwiYXBwLXRpdGxlXCJcbiAgICB9XG4gIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS5maWx0ZXJlZFRpdGxlKSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJjb2wtbWQtMTIgbWFlc3Ryby1pbm5lclwiXG4gIH0sIFtfYygnZm9ybScsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcInNhdmUtZ2FtZVwiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJzdWJtaXRcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdm0udmFsaWRhdGVCZWZvcmVTdWJtaXQoJGV2ZW50KVxuICAgICAgfVxuICAgIH1cbiAgfSwgW19jKCd0YWJsZScsIHtcbiAgICBzdGF0aWNDbGFzczogXCJmb3JtLXRhYmxlXCJcbiAgfSwgW19jKCd0Ym9keScsIFtfYygndHInLCBbX3ZtLl9tKDApLCBfdm0uX3YoXCIgXCIpLCBfYygndGQnLCBbX2MoJ2lucHV0Jywge1xuICAgIGRpcmVjdGl2ZXM6IFt7XG4gICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgIHZhbHVlOiAoX3ZtLnRpdGxlKSxcbiAgICAgIGV4cHJlc3Npb246IFwidGl0bGVcIlxuICAgIH0sIHtcbiAgICAgIG5hbWU6IFwidmFsaWRhdGVcIixcbiAgICAgIHJhd05hbWU6IFwidi12YWxpZGF0ZVwiLFxuICAgICAgdmFsdWU6ICgncmVxdWlyZWQnKSxcbiAgICAgIGV4cHJlc3Npb246IFwiJ3JlcXVpcmVkJ1wiXG4gICAgfV0sXG4gICAgc3RhdGljQ2xhc3M6IFwicmVndWxhci10ZXh0XCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwibmFtZVwiOiBcImdhbWV0aXRsZVwiLFxuICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgXCJpZFwiOiBcImdhbWV0aXRsZVwiXG4gICAgfSxcbiAgICBkb21Qcm9wczoge1xuICAgICAgXCJ2YWx1ZVwiOiAoX3ZtLnRpdGxlKVxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwiaW5wdXRcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm47IH1cbiAgICAgICAgX3ZtLnRpdGxlID0gJGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgfVxuICAgIH1cbiAgfSldKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygndHInLCBbX3ZtLl9tKDEpLCBfdm0uX3YoXCIgXCIpLCBfYygndGQnLCBbX2MoJ3NlbGVjdCcsIHtcbiAgICBkaXJlY3RpdmVzOiBbe1xuICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICB2YWx1ZTogKF92bS5nYW1lVHlwZSksXG4gICAgICBleHByZXNzaW9uOiBcImdhbWVUeXBlXCJcbiAgICB9LCB7XG4gICAgICBuYW1lOiBcInZhbGlkYXRlXCIsXG4gICAgICByYXdOYW1lOiBcInYtdmFsaWRhdGVcIixcbiAgICAgIHZhbHVlOiAoJ3JlcXVpcmVkJyksXG4gICAgICBleHByZXNzaW9uOiBcIidyZXF1aXJlZCdcIlxuICAgIH1dLFxuICAgIHN0YXRpY0NsYXNzOiBcImRpc2FibGVkXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwibmFtZVwiOiBcImdhbWV0eXBlXCIsXG4gICAgICBcImlkXCI6IFwiZ2FtZXR5cGVcIixcbiAgICAgIFwiZGlzYWJsZWRcIjogXCJkaXNhYmxlZFwiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjaGFuZ2VcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykge1xuICAgICAgICAgIHJldHVybiBvLnNlbGVjdGVkXG4gICAgICAgIH0pLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICAgICAgdmFyIHZhbCA9IFwiX3ZhbHVlXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdmFsXG4gICAgICAgIH0pO1xuICAgICAgICBfdm0uZ2FtZVR5cGUgPSAkZXZlbnQudGFyZ2V0Lm11bHRpcGxlID8gJCRzZWxlY3RlZFZhbCA6ICQkc2VsZWN0ZWRWYWxbMF1cbiAgICAgIH1cbiAgICB9XG4gIH0sIFtfYygnb3B0aW9uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInZhbHVlXCI6IFwiXCJcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJDaG9vc2UgYSBHYW1lIFR5cGUuLi5cIildKSwgX3ZtLl92KFwiIFwiKSwgX3ZtLl9sKChfdm0ubWluaWdhbWVPcHRpb25zKSwgZnVuY3Rpb24obGFiZWwsIG9wdGlvbikge1xuICAgIHJldHVybiBbX2MoJ29wdGlvbicsIHtcbiAgICAgIGRvbVByb3BzOiB7XG4gICAgICAgIFwidmFsdWVcIjogb3B0aW9uXG4gICAgICB9XG4gICAgfSwgW192bS5fdihfdm0uX3MobGFiZWwpKV0pXVxuICB9KV0sIDIpXSldKV0pXSksIF92bS5fdihcIiBcIiksIChfdm0uZ2FtZVR5cGUgIT0gJycpID8gW19jKCdtaW5pZ2FtZS1zZXR0aW5ncycsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJnYW1lLXR5cGVcIjogX3ZtLmdhbWVUeXBlLFxuICAgICAgXCJtaW5pZ2FtZS1kYXRhXCI6IF92bS5taW5pZ2FtZURhdGEsXG4gICAgICBcImZvcm0tc3VibWl0dGVkXCI6IF92bS5mb3JtU3VibWl0dGVkLFxuICAgICAgXCJpcy1kaXJ0eVwiOiBfdm0uaXNEaXJ0eSxcbiAgICAgIFwidGl0bGVcIjogX3ZtLnRpdGxlXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJzYXZlXCI6IF92bS5zYXZlTWluaWdhbWUsXG4gICAgICBcImRpcnR5XCI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICBfdm0uaXNEaXJ0eSA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH0pXSA6IF92bS5fZSgpXSwgMildKV0gOiBbX2MoJ2xvYWRpbmctc3Bpbm5lcicpXV0sIDIpXG59LHN0YXRpY1JlbmRlckZuczogW2Z1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ3RoJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInNjb3BlXCI6IFwicm93XCJcbiAgICB9XG4gIH0sIFtfYygnbGFiZWwnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiZm9yXCI6IFwiZ2FtZXRpdGxlXCJcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJNaW5pZ2FtZSBUaXRsZVwiKV0pXSlcbn0sZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygndGgnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwic2NvcGVcIjogXCJyb3dcIlxuICAgIH1cbiAgfSwgW19jKCdsYWJlbCcsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJmb3JcIjogXCJnYW1ldHlwZVwiXG4gICAgfVxuICB9LCBbX3ZtLl92KFwiTWluaWdhbWUgVHlwZVwiKV0pXSlcbn1dfVxubW9kdWxlLmV4cG9ydHMucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKS5yZXJlbmRlcihcImRhdGEtdi00NzM4OTBiNFwiLCBtb2R1bGUuZXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTQ3Mzg5MGI0XCIsXCJoYXNTY29wZWRcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9qcy9wYWdlcy9NaW5pZ2FtZVNpbmdsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tbody', [_c('tr', [_c('th'), _vm._v(\" \"), _c('td', {\n    staticClass: \"save\"\n  }, [(_vm.formSubmitted) ? _c('loading-spinner') : _c('button', {\n    staticClass: \"button button-submit\",\n    attrs: {\n      \"disabled\": _vm.saveText != 'Save Minigame'\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.saveMinigame();\n        $event.preventDefault();\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.saveText))])], 1)]), _vm._v(\" \"), _c('tr', [_c('td', {\n    staticClass: \"minigame-setting-tabs\",\n    attrs: {\n      \"colspan\": \"2\"\n    }\n  }, [_c('ul', {\n    staticClass: \"tabs\"\n  }, [_c('li', {\n    class: {\n      'active': _vm.activeTab == 'content'\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.activeTab = 'content'\n      }\n    }\n  }, [_vm._v(\"Content\")]), _vm._v(\" \"), _c('li', {\n    class: {\n      'active': _vm.activeTab == 'artwork'\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.activeTab = 'artwork'\n      }\n    }\n  }, [_vm._v(\"Artwork\")]), _vm._v(\" \"), _c('li', {\n    class: {\n      'active': _vm.activeTab == 'preview'\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.activeTab = 'preview'\n      }\n    }\n  }, [_vm._v(\"Play!\")])]), _vm._v(\" \"), _c('section', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.activeTab == 'content'),\n      expression: \"activeTab == 'content'\"\n    }],\n    staticClass: \"tab\"\n  }, [_c('table', [_c('tbody', [_vm._m(0), _vm._v(\" \"), _c('tr', [_c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"minigame_settings\"\n    }\n  }, [_vm._v(\"Help/Intro Text\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"maestro-view-source\",\n    on: {\n      \"click\": function($event) {\n        _vm.codeBoxOpen = _vm.codeData.help\n      }\n    }\n  }, [_c('i', {\n    staticClass: \"fa fa-code\"\n  }), _c('span', [_vm._v(\" View Code\")])])]), _vm._v(\" \"), _c('td', [_c('wysiwyg', {\n    attrs: {\n      \"id\": _vm.$route.params.mid,\n      \"content\": _vm.textData.help.text,\n      \"field\": \"intro-text\"\n    }\n  })], 1)]), _vm._v(\" \"), _c('tr', [_vm._m(1), _vm._v(\" \"), _c('td', [_c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.textData.success.title),\n      expression: \"textData.success.title\"\n    }],\n    attrs: {\n      \"type\": \"text\",\n      \"name\": \"victoryTitle\"\n    },\n    domProps: {\n      \"value\": (_vm.textData.success.title)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.textData.success.title = $event.target.value\n      }\n    }\n  })])]), _vm._v(\" \"), _c('tr', [_c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"minigame_settings\"\n    }\n  }, [_vm._v(\"Victory Text\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"maestro-view-source\",\n    on: {\n      \"click\": function($event) {\n        _vm.codeBoxOpen = _vm.codeData.success\n      }\n    }\n  }, [_c('i', {\n    staticClass: \"fa fa-code\"\n  }), _c('span', [_vm._v(\" View Code\")])])]), _vm._v(\" \"), _c('td', [_c('wysiwyg', {\n    attrs: {\n      \"id\": _vm.$route.params.mid,\n      \"content\": _vm.textData.success.text,\n      \"field\": \"victory-text\"\n    }\n  })], 1)])])])]), _vm._v(\" \"), _c('section', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.activeTab == 'artwork'),\n      expression: \"activeTab == 'artwork'\"\n    }],\n    staticClass: \"tab\"\n  }, [_c('table', [_c('tbody', [_c('tr', [_c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', [_vm._v(\"Base Layer\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"maestro-view-source\",\n    on: {\n      \"click\": function($event) {\n        _vm.codeBoxOpen = _vm.codeData.base\n      }\n    }\n  }, [_c('i', {\n    staticClass: \"fa fa-code\"\n  }), _c('span', [_vm._v(\" View Code\")])])]), _vm._v(\" \"), _c('td', [(!_vm.getImage('baseLayer')) ? _c('button', {\n    staticClass: \"upload\",\n    on: {\n      \"click\": function($event) {\n        _vm.mediaUploader('baseLayer')\n      }\n    }\n  }, [_vm._v(\"Upload an Image\")]) : _vm._e(), _vm._v(\" \"), _vm._m(2), _vm._v(\" \"), (_vm.getImage('baseLayer')) ? [_c('div', {\n    staticClass: \"mgb-image\"\n  }, [_c('img', {\n    attrs: {\n      \"src\": _vm.getImage('baseLayer')\n    }\n  }), _vm._v(\" \"), _c('i', {\n    staticClass: \"fa fa-close\",\n    on: {\n      \"click\": function($event) {\n        _vm.removeImage('baseLayer')\n      }\n    }\n  })])] : _vm._e()], 2)]), _vm._v(\" \"), _c('tr', [_c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', [_vm._v(\"Sprite (player)\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"maestro-view-source\",\n    on: {\n      \"click\": function($event) {\n        _vm.codeBoxOpen = _vm.codeData.sprite\n      }\n    }\n  }, [_c('i', {\n    staticClass: \"fa fa-code\"\n  }), _c('span', [_vm._v(\" View Code\")])])]), _vm._v(\" \"), _c('td', [(!_vm.getImage('avatar')) ? _c('button', {\n    staticClass: \"upload\",\n    on: {\n      \"click\": function($event) {\n        _vm.mediaUploader('avatar')\n      }\n    }\n  }, [_vm._v(\"Upload an Image\")]) : _vm._e(), _vm._v(\" \"), _vm._m(3), _vm._v(\" \"), (_vm.getImage('avatar')) ? [_c('div', {\n    staticClass: \"mgb-image\"\n  }, [_c('img', {\n    attrs: {\n      \"src\": _vm.getImage('avatar')\n    }\n  }), _vm._v(\" \"), _c('i', {\n    staticClass: \"fa fa-close\",\n    on: {\n      \"click\": function($event) {\n        _vm.removeImage('avatar')\n      }\n    }\n  })])] : _vm._e()], 2)]), _vm._v(\" \"), _c('tr', [_c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', [_vm._v(\"Obstacle\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"maestro-view-source\",\n    on: {\n      \"click\": function($event) {\n        _vm.codeBoxOpen = _vm.codeData.obstacle1\n      }\n    }\n  }, [_c('i', {\n    staticClass: \"fa fa-code\"\n  }), _c('span', [_vm._v(\" View Code\")])])]), _vm._v(\" \"), _c('td', [(!_vm.getImage('obstacle1')) ? _c('button', {\n    staticClass: \"upload\",\n    on: {\n      \"click\": function($event) {\n        _vm.mediaUploader('obstacle1')\n      }\n    }\n  }, [_vm._v(\"Upload an Image\")]) : _vm._e(), _vm._v(\" \"), _vm._m(4), _vm._v(\" \"), (_vm.getImage('obstacle1')) ? [_c('div', {\n    staticClass: \"mgb-image\"\n  }, [_c('img', {\n    attrs: {\n      \"src\": _vm.getImage('obstacle1')\n    }\n  }), _vm._v(\" \"), _c('i', {\n    staticClass: \"fa fa-close\",\n    on: {\n      \"click\": function($event) {\n        _vm.removeImage('obstacle1')\n      }\n    }\n  })])] : _vm._e()], 2)]), _vm._v(\" \"), _c('tr', [_c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', [_vm._v(\"Collectibles\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"maestro-view-source\",\n    on: {\n      \"click\": function($event) {\n        _vm.codeBoxOpen = _vm.codeData.collectibles\n      }\n    }\n  }, [_c('i', {\n    staticClass: \"fa fa-code\"\n  }), _c('span', [_vm._v(\" View Code\")])])]), _vm._v(\" \"), _c('td', [_vm._m(5), _vm._v(\" \"), _c('draggable', {\n    staticClass: \"maestro-multi-list\",\n    class: {\n      'empty-list': _vm.imageData.collectibles.group.length < 1\n    },\n    attrs: {\n      \"list\": _vm.imageData.collectibles.group,\n      \"options\": {\n        group: 'collectibles',\n        handle: '.move-handle'\n      }\n    },\n    on: {\n      \"start\": function($event) {\n        _vm.drag = true\n      },\n      \"end\": function($event) {\n        _vm.drag = false\n      },\n      \"add\": function($event) {\n        _vm.$emit('dirty');\n      },\n      \"remove\": function($event) {\n        _vm.$emit('dirty');\n      },\n      \"change\": function($event) {\n        _vm.$emit('dirty');\n      }\n    },\n    model: {\n      value: (_vm.imageData.collectibles.group),\n      callback: function($$v) {\n        _vm.imageData.collectibles.group = $$v\n      },\n      expression: \"imageData.collectibles.group\"\n    }\n  }, _vm._l((_vm.imageData.collectibles.group), function(collectible, index) {\n    return _c('div', {\n      staticClass: \"maestro-multi-float maestro-collectibles\"\n    }, [(_vm.getImage('collectibles', index)) ? [_c('div', {\n      staticClass: \"mgb-image\"\n    }, [_c('img', {\n      attrs: {\n        \"src\": _vm.getImage('collectibles', index),\n        \"draggable\": \"false\"\n      }\n    }), _vm._v(\" \"), _c('i', {\n      staticClass: \"fa fa-close\",\n      on: {\n        \"click\": function($event) {\n          _vm.removeImage('collectibles', index)\n        }\n      }\n    })])] : _vm._e(), _vm._v(\" \"), _c('div', {\n      staticClass: \"move-handle\"\n    }, [_c('div', {\n      staticClass: \"move-handle-inner\"\n    }, [_c('i', {\n      staticClass: \"fa fa-arrows\"\n    })])])], 2)\n  })), _vm._v(\" \"), (_vm.imageData.collectibles.group.length < 4) ? _c('button', {\n    staticClass: \"upload multi-upload\",\n    on: {\n      \"click\": function($event) {\n        _vm.mediaUploader('collectibles', _vm.imageData.collectibles.group.length)\n      }\n    }\n  }, [_vm._v(\"Add a Collectible\")]) : _vm._e()], 1)]), _vm._v(\" \"), _c('tr', [_c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', [_vm._v(\"Platforms\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"maestro-view-source\",\n    on: {\n      \"click\": function($event) {\n        _vm.codeBoxOpen = _vm.codeData.platforms\n      }\n    }\n  }, [_c('i', {\n    staticClass: \"fa fa-code\"\n  }), _c('span', [_vm._v(\" View Code\")])])]), _vm._v(\" \"), _c('td', [_vm._m(6), _vm._v(\" \"), _c('draggable', {\n    staticClass: \"maestro-multi-list\",\n    class: {\n      'empty-list': _vm.imageData.collectibles.group.length < 1\n    },\n    attrs: {\n      \"list\": _vm.imageData.platforms.group,\n      \"options\": {\n        group: 'platforms'\n      }\n    },\n    on: {\n      \"start\": function($event) {\n        _vm.drag = true\n      },\n      \"end\": function($event) {\n        _vm.drag = false\n      },\n      \"add\": function($event) {\n        _vm.$emit('dirty');\n      },\n      \"remove\": function($event) {\n        _vm.$emit('dirty');\n      },\n      \"change\": function($event) {\n        _vm.$emit('dirty');\n      }\n    },\n    model: {\n      value: (_vm.imageData.platforms.group),\n      callback: function($$v) {\n        _vm.imageData.platforms.group = $$v\n      },\n      expression: \"imageData.platforms.group\"\n    }\n  }, _vm._l((_vm.imageData.platforms.group), function(platform, index) {\n    return _c('div', {\n      staticClass: \"maestro-multi-float maestro-platforms\"\n    }, [(_vm.getImage('platforms', index)) ? [_c('div', {\n      staticClass: \"mgb-image\"\n    }, [_c('img', {\n      attrs: {\n        \"src\": _vm.getImage('platforms', index),\n        \"draggable\": \"false\"\n      }\n    }), _vm._v(\" \"), _c('i', {\n      staticClass: \"fa fa-close\",\n      on: {\n        \"click\": function($event) {\n          _vm.removeImage('platforms', index)\n        }\n      }\n    })])] : _vm._e(), _vm._v(\" \"), _c('div', {\n      staticClass: \"move-handle\"\n    }, [_c('div', {\n      staticClass: \"move-handle-inner\"\n    }, [_c('i', {\n      staticClass: \"fa fa-arrows\"\n    })])])], 2)\n  })), _vm._v(\" \"), (_vm.imageData.platforms.group.length < 6) ? _c('button', {\n    staticClass: \"upload multi-upload\",\n    on: {\n      \"click\": function($event) {\n        _vm.mediaUploader('platforms', _vm.imageData.platforms.group.length)\n      }\n    }\n  }, [_vm._v(\"Add a Platform Design\")]) : _vm._e()], 1)])])])]), _vm._v(\" \"), _c('section', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.activeTab == 'controls'),\n      expression: \"activeTab == 'controls'\"\n    }],\n    staticClass: \"tab\"\n  }, [_vm._v(\"\\n        controls\\n      \")]), _vm._v(\" \"), _c('section', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.activeTab == 'preview'),\n      expression: \"activeTab == 'preview'\"\n    }],\n    staticClass: \"tab\"\n  }, [_c('div', {\n    staticClass: \"MGB-preview-wrap\"\n  }, [(_vm.activeTab == 'preview' && !_vm.isDirty) ? _c('iframe', {\n    attrs: {\n      \"src\": '/wp-admin/admin.php?page=maestro-game-builder&preview=BridgeRunner&game=' + _vm.$route.params.id + '&minigame=' + _vm.$route.params.mid\n    }\n  }) : [_c('p', [_vm._v(\"You must save changes before playing this minigame.\")]), _vm._v(\" \"), (_vm.formSubmitted) ? _c('loading-spinner') : _c('button', {\n    staticClass: \"button button-submit\",\n    attrs: {\n      \"disabled\": _vm.saveText != 'Save Minigame'\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.saveMinigame();\n        $event.preventDefault();\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.saveText))])]], 2)])])]), _vm._v(\" \"), (_vm.cropImageKey) ? _c('crop-box', {\n    attrs: {\n      \"game\": _vm.$route.params.id,\n      \"image-key\": _vm.cropImageKey,\n      \"image-data\": _vm.imageData,\n      \"multi-key\": _vm.multiKey\n    },\n    on: {\n      \"close\": function($event) {\n        _vm.cropImageKey = null;\n        _vm.multiKey = -1\n      },\n      \"save\": function($event) {\n        _vm.$emit('dirty');\n        _vm.cropImageKey = null;\n        _vm.multiKey = -1\n      }\n    }\n  }) : _vm._e(), _vm._v(\" \"), (_vm.codeBoxOpen) ? _c('codebox', {\n    attrs: {\n      \"code-components\": _vm.codeBoxOpen,\n      \"file\": _vm.codeFile\n    },\n    on: {\n      \"close\": function($event) {\n        _vm.codeBoxOpen = false;\n      }\n    }\n  }) : _vm._e()], 1)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"minigame_settings\"\n    }\n  }, [_vm._v(\"Minigame Overview\")])]), _vm._v(\" \"), _c('td', [_c('p', [_vm._v(\"Collect objects using the spacebar or touching the screen (if a touchscreen) to jump. When you have collected all necessary objects the game is won.\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"Hint: \")]), _c('em', [_vm._v(\"Feel free to copy/paste this text into the \\\"Instructions\\\" field below so your player will know what to do.\")])])])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"minigame_settings\"\n    }\n  }, [_vm._v(\"Victory Title\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', {\n    staticClass: \"description\"\n  }, [_c('em', [_vm._v(\"Background image for the level.\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', {\n    staticClass: \"description\"\n  }, [_c('em', [_vm._v(\"Four poses that animate running/jumping.\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', {\n    staticClass: \"description\"\n  }, [_c('em', [_vm._v(\"Blocks that can be jumped on or over.\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', {\n    staticClass: \"description\"\n  }, [_c('em', [_vm._v(\"One or more items the player collects on contact (up to 4).\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', {\n    staticClass: \"description\"\n  }, [_c('em', [_vm._v(\"Blocks that make up the ground. (up to 6, will display randomly).\")])])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-57256167\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"game-single\"\n  }, [(!_vm.loading) ? [_c('h2', {\n    attrs: {\n      \"id\": \"app-title\"\n    }\n  }, [_vm._v(_vm._s(_vm.filteredTitle))]), _vm._v(\" \"), _c('div', {\n    staticClass: \"col-md-12 maestro-inner\"\n  }, [_c('form', {\n    attrs: {\n      \"id\": \"save-game\"\n    },\n    on: {\n      \"submit\": function($event) {\n        $event.preventDefault();\n        _vm.validateBeforeSubmit($event)\n      }\n    }\n  }, [_c('table', {\n    staticClass: \"form-table\"\n  }, [_c('tbody', [_c('tr', [_vm._m(0), _vm._v(\" \"), _c('td', [_c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.title),\n      expression: \"title\"\n    }, {\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: ('required'),\n      expression: \"'required'\"\n    }],\n    staticClass: \"regular-text\",\n    attrs: {\n      \"name\": \"gametitle\",\n      \"type\": \"text\",\n      \"id\": \"gametitle\"\n    },\n    domProps: {\n      \"value\": (_vm.title)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.title = $event.target.value\n      }\n    }\n  }), _vm._v(\" \"), (_vm.webLink) ? _c('a', {\n    staticClass: \"mgb-permalink\",\n    attrs: {\n      \"href\": _vm.webLink,\n      \"target\": \"_blank\"\n    }\n  }, [_vm._v(_vm._s(_vm.webLink))]) : _vm._e()])]), _vm._v(\" \"), _c('tr', [_vm._m(1), _vm._v(\" \"), _c('td', {\n    class: {\n      chosen: _vm.gameType != ''\n    }\n  }, [_c('select', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.gameType),\n      expression: \"gameType\"\n    }, {\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: ('required'),\n      expression: \"'required'\"\n    }],\n    attrs: {\n      \"name\": \"gametype\",\n      \"id\": \"gametype\",\n      \"disabled\": \"\"\n    },\n    on: {\n      \"change\": [function($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function(o) {\n          return o.selected\n        }).map(function(o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val\n        });\n        _vm.gameType = $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n      }, function($event) {\n        _vm.isDirty = true;\n      }]\n    }\n  }, [_c('option', {\n    attrs: {\n      \"value\": \"\"\n    }\n  }, [_vm._v(\"Choose a Game Type...\")]), _vm._v(\" \"), _c('option', {\n    attrs: {\n      \"value\": \"minigame\"\n    }\n  }, [_vm._v(\"Just Minigames\")]), _vm._v(\" \"), _c('option', {\n    attrs: {\n      \"value\": \"minigame_menu\"\n    }\n  }, [_vm._v(\"Minigames + Menu\")])]), _vm._v(\" \"), _c('p', {\n    staticClass: \"description\"\n  }, [_vm._v(\"The type of game you want to build.\")]), _vm._v(\" \"), _c('ul', [(_vm.gameType != 'minigame_menu') ? [_vm._m(2), _vm._v(\" \"), _c('li', [_vm._v(\"The option to include a menu is coming soon!\")])] : _vm._e(), _vm._v(\" \"), (_vm.gameType != 'minigame') ? [_vm._m(3)] : _vm._e()], 2)])]), _vm._v(\" \"), (_vm.gameType != '') ? [_c('tr', [_vm._m(4), _vm._v(\" \"), _c('td', [_c('select', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.gameStatus),\n      expression: \"gameStatus\"\n    }, {\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: ('required'),\n      expression: \"'required'\"\n    }],\n    attrs: {\n      \"name\": \"gamestatus\",\n      \"id\": \"gamestatus\"\n    },\n    on: {\n      \"change\": [function($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function(o) {\n          return o.selected\n        }).map(function(o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val\n        });\n        _vm.gameStatus = $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n      }, function($event) {\n        _vm.isDirty = true;\n      }]\n    }\n  }, [_c('option', {\n    attrs: {\n      \"value\": \"draft\"\n    }\n  }, [_vm._v(\"Draft\")]), _vm._v(\" \"), _c('option', {\n    attrs: {\n      \"value\": \"publish\"\n    }\n  }, [_vm._v(\"Publish\")])]), _vm._v(\" \"), _c('p', {\n    staticClass: \"description\"\n  }, [_vm._v(\"The type of game you want to build.\")]), _vm._v(\" \"), _c('ul', [(_vm.gameType != 'minigame_menu') ? [_vm._m(5)] : _vm._e(), _vm._v(\" \"), (_vm.gameType != 'minigame') ? [_vm._m(6)] : _vm._e()], 2)])]), _vm._v(\" \"), _c('tr', [_c('th'), _vm._v(\" \"), _c('td', {\n    staticClass: \"save\"\n  }, [(_vm.formSubmitted) ? _c('loading-spinner') : _c('button', {\n    staticClass: \"button button-submit\",\n    attrs: {\n      \"type\": \"submit\",\n      \"disabled\": _vm.saveText != 'Save Game'\n    }\n  }, [_vm._v(_vm._s(_vm.saveText))])], 1)]), _vm._v(\" \"), (_vm.gameType == 'minigame_menu') ? [_vm._v(\"\\n                Coming soon.\\n              \")] : [_c('tr', [_c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"minigame_list\"\n    }\n  }, [_vm._v(\"Active Minigames\")])]), _vm._v(\" \"), _c('td', [_c('p', {\n    staticClass: \"description\"\n  }, [_vm._v(\"Your game will begin with the block at the top of this list, and end at the bottom. Click and drag to reorder.\")]), _vm._v(\" \"), _c('draggable', {\n    staticClass: \"minigame-list\",\n    class: {\n      'empty-list': _vm.minigameList.length < 1\n    },\n    attrs: {\n      \"list\": _vm.minigameList,\n      \"options\": {\n        group: 'minigames',\n        handle: '.move-handle'\n      }\n    },\n    on: {\n      \"start\": function($event) {\n        _vm.drag = true\n      },\n      \"end\": function($event) {\n        _vm.drag = false\n      },\n      \"add\": function($event) {\n        _vm.isDirty = true\n      },\n      \"remove\": function($event) {\n        _vm.isDirty = true\n      },\n      \"change\": function($event) {\n        _vm.isDirty = true;\n      }\n    },\n    model: {\n      value: (_vm.minigameList),\n      callback: function($$v) {\n        _vm.minigameList = $$v\n      },\n      expression: \"minigameList\"\n    }\n  }, _vm._l((_vm.minigameList), function(minigame, index) {\n    return _c('div', [_c('h5', [_vm._v(_vm._s(minigame.title))]), _vm._v(\" \"), _c('p', [_c('em', [_vm._v(\"Type: \" + _vm._s(_vm.minigameOptions[minigame.type]))])]), _vm._v(\" \"), _c('div', {\n      staticClass: \"move-handle\"\n    }, [_c('div', {\n      staticClass: \"move-handle-inner\"\n    }, [_c('i', {\n      staticClass: \"fa fa-arrows\"\n    })])]), _vm._v(\" \"), _c('a', {\n      on: {\n        \"click\": function($event) {\n          _vm.selectedMinigame = minigame.id;\n          _vm.editMinigame()\n        }\n      }\n    }, [_vm._v(\"Edit\")]), _vm._v(\" \"), _c('a', {\n      staticClass: \"delete\",\n      on: {\n        \"click\": function($event) {\n          _vm.deleteID = minigame.id;\n          _vm.deleteTitle = minigame.title;\n          _vm.deleteArrayKey = index;\n          _vm.deleteArray = 'used';\n        }\n      }\n    }, [_vm._v(\"Delete\")])])\n  }))], 1)]), _vm._v(\" \"), _c('tr', [_c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"minigame_list\"\n    }\n  }, [_vm._v(\"Unused Minigames\")])]), _vm._v(\" \"), _c('td', [_c('p', {\n    staticClass: \"description\"\n  }, [_vm._v(\"Minigames you can create/edit/modify but that are not currently part of the final game.\")]), _vm._v(\" \"), _c('draggable', {\n    staticClass: \"minigame-list\",\n    class: {\n      'empty-unused-list': _vm.unusedMinigameList.length < 1\n    },\n    attrs: {\n      \"list\": _vm.unusedMinigameList,\n      \"options\": {\n        group: 'minigames',\n        handle: '.move-handle'\n      }\n    },\n    on: {\n      \"start\": function($event) {\n        _vm.drag = true\n      },\n      \"end\": function($event) {\n        _vm.drag = false\n      }\n    },\n    model: {\n      value: (_vm.unusedMinigameList),\n      callback: function($$v) {\n        _vm.unusedMinigameList = $$v\n      },\n      expression: \"unusedMinigameList\"\n    }\n  }, _vm._l((_vm.unusedMinigameList), function(minigame, index) {\n    return _c('div', [_c('h5', [_vm._v(_vm._s(minigame.title))]), _vm._v(\" \"), _c('p', [_c('em', [_vm._v(\"Type: \" + _vm._s(_vm.minigameOptions[minigame.type]))])]), _vm._v(\" \"), _c('div', {\n      staticClass: \"move-handle\"\n    }, [_c('div', {\n      staticClass: \"move-handle-inner\"\n    }, [_c('i', {\n      staticClass: \"fa fa-arrows\"\n    })])]), _vm._v(\" \"), _c('a', {\n      on: {\n        \"click\": function($event) {\n          _vm.selectedMinigame = minigame.id;\n          _vm.editMinigame()\n        }\n      }\n    }, [_vm._v(\"Edit\")]), _vm._v(\" \"), _c('a', {\n      staticClass: \"delete\",\n      on: {\n        \"click\": function($event) {\n          _vm.deleteID = minigame.id;\n          _vm.deleteTitle = minigame.title;\n          _vm.deleteArrayKey = index;\n          _vm.deleteArray = 'unused';\n        }\n      }\n    }, [_vm._v(\"Delete\")])])\n  })), _vm._v(\" \"), _c('button', {\n    staticClass: \"button button-submit\",\n    attrs: {\n      \"type\": \"button\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.createMinigame = true;\n      }\n    }\n  }, [_vm._v(\"Add New Minigame\")])], 1)])], _vm._v(\" \"), _c('tr', [_vm._m(7), _vm._v(\" \"), _c('td', [_vm._m(8), _vm._v(\" \"), (!_vm.getImage('menuButton')) ? _c('button', {\n    staticClass: \"upload\",\n    on: {\n      \"click\": function($event) {\n        _vm.mediaUploader('menuButton')\n      }\n    }\n  }, [_vm._v(\"Upload an Image\")]) : _vm._e(), _vm._v(\" \"), (_vm.getImage('menuButton')) ? [_c('div', {\n    staticClass: \"mgb-image\"\n  }, [_c('img', {\n    attrs: {\n      \"src\": _vm.getImage('menuButton')\n    }\n  }), _vm._v(\" \"), _c('i', {\n    staticClass: \"fa fa-close\",\n    on: {\n      \"click\": function($event) {\n        _vm.removeImage('menuButton')\n      }\n    }\n  })])] : _vm._e()], 2)])] : _vm._e()], 2)])])])] : [_c('loading-spinner')], _vm._v(\" \"), (_vm.createMinigame) ? _c('info-box', {\n    attrs: {\n      \"box-type\": 'createMinigame',\n      \"game\": _vm.$route.params.id,\n      \"minigame-options\": _vm.minigameOptions\n    },\n    on: {\n      \"minigame\": _vm.addMinigame,\n      \"close\": function($event) {\n        _vm.createMinigame = false;\n      }\n    }\n  }) : _vm._e(), _vm._v(\" \"), (_vm.deleteTitle) ? _c('dialog-box', {\n    attrs: {\n      \"message\": _vm.dialogMessage\n    },\n    on: {\n      \"no\": function($event) {\n        _vm.deleteID = null;\n        _vm.deleteTitle = null;\n        _vm.deleteArrayKey = null;\n        _vm.deleteArray = null;\n      },\n      \"yes\": _vm.deleteMinigame\n    }\n  }) : _vm._e(), _vm._v(\" \"), (_vm.saveBeforeEditingPrompt) ? _c('dialog-box', {\n    attrs: {\n      \"message\": _vm.saveDialogMessage,\n      \"cancel-button\": true\n    },\n    on: {\n      \"no\": function($event) {\n        _vm.isDirty = false;\n        _vm.editMinigame()\n      },\n      \"yes\": _vm.validateBeforeSubmit,\n      \"close\": function($event) {\n        _vm.selectedMinigame = null;\n        _vm.saveBeforeEditingPrompt = false;\n      }\n    }\n  }) : _vm._e(), _vm._v(\" \"), (_vm.cropImageKey) ? _c('crop-box', {\n    attrs: {\n      \"game\": _vm.$route.params.id,\n      \"image-key\": _vm.cropImageKey,\n      \"image-data\": _vm.imageData,\n      \"multi-key\": _vm.multiKey\n    },\n    on: {\n      \"close\": function($event) {\n        _vm.cropImageKey = null;\n        _vm.multiKey = -1\n      },\n      \"save\": function($event) {\n        _vm.isDirty = true;\n        _vm.cropImageKey = null;\n        _vm.multiKey = -1\n      }\n    }\n  }) : _vm._e()], 2)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"gametitle\"\n    }\n  }, [_vm._v(\"Game Title\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"gametype\"\n    }\n  }, [_vm._v(\"Game Type\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('li', [_c('strong', [_vm._v(\"Just Minigames:\")]), _c('br'), _vm._v(\"The game begins and ends with one or more minigames. Good for short demos or testing out content.\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('li', [_c('strong', [_vm._v(\"Minigames + Menu:\")]), _c('br'), _vm._v(\"Pick up to 5 minigames to include in this game, which will also have a main menu (where players can choose minigames to play). You can choose whether to start with a minigame or the main menu, and how many minigames must be completed before the game is won and the player victorious.\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"gamestatus\"\n    }\n  }, [_vm._v(\"Game Status\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('li', [_c('strong', [_vm._v(\"Just Minigames:\")]), _c('br'), _vm._v(\"The game begins and ends with one or more minigames. Good for short demos or testing out content.\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('li', [_c('strong', [_vm._v(\"Minigames + Menu:\")]), _c('br'), _vm._v(\"Pick up to 5 minigames to include in this game, which will also have a main menu (where players can choose minigames to play). You can choose whether to start with a minigame or the main menu, and how many minigames must be completed before the game is won and the player victorious.\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', [_vm._v(\"Menu Button\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', {\n    staticClass: \"description\"\n  }, [_c('em', [_vm._v(\"This button stays top left during all minigames, and allows players to read help text or quit the game.\")])])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-5af61e1d\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tbody', [_vm._m(0), _vm._v(\" \"), _c('tr', [_c('th'), _vm._v(\" \"), _c('td', {\n    staticClass: \"save\"\n  }, [(_vm.formSubmitted) ? _c('loading-spinner') : _c('button', {\n    staticClass: \"button button-submit\",\n    attrs: {\n      \"type\": \"submit\",\n      \"disabled\": _vm.saveText != 'Save Game'\n    }\n  }, [_vm._v(_vm._s(_vm.saveText))])], 1)])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"minigame_settings\"\n    }\n  }, [_vm._v(\"Settings\")])]), _vm._v(\" \"), _c('td', [_vm._v(\"\\n    Top-down runner specific settings will go here.\\n    \")])])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-64ceed87\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9Ub3BSdW5uZXIudnVlPzA1NTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQywrQkFBK0IsYUFBYSwwQkFBMEI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI3Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygndGJvZHknLCBbX3ZtLl9tKDApLCBfdm0uX3YoXCIgXCIpLCBfYygndHInLCBbX2MoJ3RoJyksIF92bS5fdihcIiBcIiksIF9jKCd0ZCcsIHtcbiAgICBzdGF0aWNDbGFzczogXCJzYXZlXCJcbiAgfSwgWyhfdm0uZm9ybVN1Ym1pdHRlZCkgPyBfYygnbG9hZGluZy1zcGlubmVyJykgOiBfYygnYnV0dG9uJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImJ1dHRvbiBidXR0b24tc3VibWl0XCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcInN1Ym1pdFwiLFxuICAgICAgXCJkaXNhYmxlZFwiOiBfdm0uc2F2ZVRleHQgIT0gJ1NhdmUgR2FtZSdcbiAgICB9XG4gIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS5zYXZlVGV4dCkpXSldLCAxKV0pXSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygndHInLCBbX2MoJ3RoJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInNjb3BlXCI6IFwicm93XCJcbiAgICB9XG4gIH0sIFtfYygnbGFiZWwnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiZm9yXCI6IFwibWluaWdhbWVfc2V0dGluZ3NcIlxuICAgIH1cbiAgfSwgW192bS5fdihcIlNldHRpbmdzXCIpXSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3RkJywgW192bS5fdihcIlxcbiAgICBUb3AtZG93biBydW5uZXIgc3BlY2lmaWMgc2V0dGluZ3Mgd2lsbCBnbyBoZXJlLlxcbiAgICBcIildKV0pXG59XX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtNjRjZWVkODdcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi02NGNlZWQ4N1wiLFwiaGFzU2NvcGVkXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9Ub3BSdW5uZXIudnVlXG4vLyBtb2R1bGUgaWQgPSA3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"maestro-app\"\n    }\n  }, [(!_vm.loading) ? [_c('div', {\n    staticClass: \"container-fluid\"\n  }, [_c('div', {\n    staticClass: \"row\"\n  }, [_c('div', {\n    staticClass: \"col-sm-12\"\n  }, [_c('div', {\n    staticClass: \"container-fluid\"\n  }, [_c('div', {\n    staticClass: \"row-fluid main\"\n  }, [_c('router-view')], 1)])])])])] : [_c('loading-spinner')]], 2)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-65e6d440\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvTWFpbkFwcC52dWU/MjlmZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI3OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwibWFlc3Ryby1hcHBcIlxuICAgIH1cbiAgfSwgWyghX3ZtLmxvYWRpbmcpID8gW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiY29udGFpbmVyLWZsdWlkXCJcbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwicm93XCJcbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiY29sLXNtLTEyXCJcbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiY29udGFpbmVyLWZsdWlkXCJcbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwicm93LWZsdWlkIG1haW5cIlxuICB9LCBbX2MoJ3JvdXRlci12aWV3JyldLCAxKV0pXSldKV0pXSA6IFtfYygnbG9hZGluZy1zcGlubmVyJyldXSwgMilcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtNjVlNmQ0NDBcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi02NWU2ZDQ0MFwiLFwiaGFzU2NvcGVkXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvanMvTWFpbkFwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tbody', [_c('tr', [_vm._m(0), _vm._v(\" \"), _c('td', [_vm._v(\"\\n    Simon specific settings will go here.\\n    \"), _c('button', {\n    on: {\n      \"click\": _vm.mediaUploader\n    }\n  }, [_vm._v(\"Upload an Image\")]), _vm._v(\" \"), (_vm.backgroundImg) ? _c('img', {\n    attrs: {\n      \"src\": _vm.backgroundImg\n    }\n  }) : _vm._e()])]), _vm._v(\" \"), _c('tr', [_c('th'), _vm._v(\" \"), _c('td', {\n    staticClass: \"save\"\n  }, [(_vm.formSubmitted) ? _c('loading-spinner') : _c('button', {\n    staticClass: \"button button-submit\",\n    attrs: {\n      \"type\": \"submit\",\n      \"disabled\": _vm.saveText != 'Save Minigame'\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.$emit('save');\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.saveText))])], 1)]), _vm._v(\" \"), _vm._m(1), _vm._v(\" \"), (_vm.backgroundImg) ? _c('crop-box', {\n    attrs: {\n      \"box-type\": 'cropImage',\n      \"game\": _vm.$route.params.id,\n      \"image\": _vm.backgroundImg\n    },\n    on: {\n      \"close\": function($event) {\n        _vm.backgroundImg = null;\n      }\n    }\n  }) : _vm._e()], 1)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('th', {\n    attrs: {\n      \"scope\": \"row\"\n    }\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"minigame_settings\"\n    }\n  }, [_vm._v(\"Settings\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_c('div', {\n    attrs: {\n      \"id\": \"gameDiv\"\n    }\n  })])])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-b4b607c0\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9TaW1vblNheXMudnVlP2ZmOTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMsK0JBQStCLGFBQWEsMEJBQTBCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDLGFBQWEsYUFBYSwwQkFBMEI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ijc5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCd0Ym9keScsIFtfYygndHInLCBbX3ZtLl9tKDApLCBfdm0uX3YoXCIgXCIpLCBfYygndGQnLCBbX3ZtLl92KFwiXFxuICAgIFNpbW9uIHNwZWNpZmljIHNldHRpbmdzIHdpbGwgZ28gaGVyZS5cXG4gICAgXCIpLCBfYygnYnV0dG9uJywge1xuICAgIG9uOiB7XG4gICAgICBcImNsaWNrXCI6IF92bS5tZWRpYVVwbG9hZGVyXG4gICAgfVxuICB9LCBbX3ZtLl92KFwiVXBsb2FkIGFuIEltYWdlXCIpXSksIF92bS5fdihcIiBcIiksIChfdm0uYmFja2dyb3VuZEltZykgPyBfYygnaW1nJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInNyY1wiOiBfdm0uYmFja2dyb3VuZEltZ1xuICAgIH1cbiAgfSkgOiBfdm0uX2UoKV0pXSksIF92bS5fdihcIiBcIiksIF9jKCd0cicsIFtfYygndGgnKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3RkJywge1xuICAgIHN0YXRpY0NsYXNzOiBcInNhdmVcIlxuICB9LCBbKF92bS5mb3JtU3VibWl0dGVkKSA/IF9jKCdsb2FkaW5nLXNwaW5uZXInKSA6IF9jKCdidXR0b24nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiYnV0dG9uIGJ1dHRvbi1zdWJtaXRcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJ0eXBlXCI6IFwic3VibWl0XCIsXG4gICAgICBcImRpc2FibGVkXCI6IF92bS5zYXZlVGV4dCAhPSAnU2F2ZSBNaW5pZ2FtZSdcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcImNsaWNrXCI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICBfdm0uJGVtaXQoJ3NhdmUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS5zYXZlVGV4dCkpXSldLCAxKV0pLCBfdm0uX3YoXCIgXCIpLCBfdm0uX20oMSksIF92bS5fdihcIiBcIiksIChfdm0uYmFja2dyb3VuZEltZykgPyBfYygnY3JvcC1ib3gnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiYm94LXR5cGVcIjogJ2Nyb3BJbWFnZScsXG4gICAgICBcImdhbWVcIjogX3ZtLiRyb3V0ZS5wYXJhbXMuaWQsXG4gICAgICBcImltYWdlXCI6IF92bS5iYWNrZ3JvdW5kSW1nXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjbG9zZVwiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgX3ZtLmJhY2tncm91bmRJbWcgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSkgOiBfdm0uX2UoKV0sIDEpXG59LHN0YXRpY1JlbmRlckZuczogW2Z1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ3RoJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInNjb3BlXCI6IFwicm93XCJcbiAgICB9XG4gIH0sIFtfYygnbGFiZWwnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiZm9yXCI6IFwibWluaWdhbWVfc2V0dGluZ3NcIlxuICAgIH1cbiAgfSwgW192bS5fdihcIlNldHRpbmdzXCIpXSldKVxufSxmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCd0cicsIFtfYygndGQnLCBbX2MoJ2RpdicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcImdhbWVEaXZcIlxuICAgIH1cbiAgfSldKV0pXG59XX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtYjRiNjA3YzBcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi1iNGI2MDdjMFwiLFwiaGFzU2NvcGVkXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9taW5pZ2FtZS1zZXR0aW5ncy9TaW1vblNheXMudnVlXG4vLyBtb2R1bGUgaWQgPSA3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"wp-core-ui wp-editor-wrap tmce-active has-dfw\"\n  }, [_c('div', {\n    staticClass: \"wp-editor-tools hide-if-no-js\",\n    attrs: {\n      \"id\": 'wp-content-editor-tools' + _vm.field\n    }\n  }, [_c('div', {\n    staticClass: \"wp-media-buttons\",\n    attrs: {\n      \"id\": 'wp-content-media-buttons-' + _vm.field\n    }\n  }, [_c('button', {\n    staticClass: \"button insert-media add_media\",\n    attrs: {\n      \"type\": \"button\",\n      \"id\": \"insert-media-button\",\n      \"data-editor\": _vm.field\n    }\n  }, [_c('span', {\n    staticClass: \"wp-media-buttons-icon\"\n  }), _vm._v(\" Add Media\\n      \")])])]), _vm._v(\" \"), _c('div', {\n    staticClass: \"wp-editor-container\",\n    attrs: {\n      \"id\": \"wp-content-editor-container\"\n    }\n  }, [_c('div', {\n    staticClass: \"quicktags-toolbar\",\n    attrs: {\n      \"id\": \"ed_toolbar\"\n    }\n  }), _vm._v(\" \"), _c('textarea', {\n    staticClass: \"wp-editor-area\",\n    staticStyle: {\n      \"height\": \"200px\"\n    },\n    attrs: {\n      \"autocomplete\": \"off\",\n      \"cols\": \"40\",\n      \"name\": _vm.field,\n      \"id\": _vm.field\n    }\n  }, [_vm._v(_vm._s(_vm.content))])])])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-d9e73a82\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9XUC1XWVNJV1lHLnZ1ZT9hYzFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiODAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJ3cC1jb3JlLXVpIHdwLWVkaXRvci13cmFwIHRtY2UtYWN0aXZlIGhhcy1kZndcIlxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJ3cC1lZGl0b3ItdG9vbHMgaGlkZS1pZi1uby1qc1wiLFxuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6ICd3cC1jb250ZW50LWVkaXRvci10b29scycgKyBfdm0uZmllbGRcbiAgICB9XG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcIndwLW1lZGlhLWJ1dHRvbnNcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiAnd3AtY29udGVudC1tZWRpYS1idXR0b25zLScgKyBfdm0uZmllbGRcbiAgICB9XG4gIH0sIFtfYygnYnV0dG9uJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImJ1dHRvbiBpbnNlcnQtbWVkaWEgYWRkX21lZGlhXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcImJ1dHRvblwiLFxuICAgICAgXCJpZFwiOiBcImluc2VydC1tZWRpYS1idXR0b25cIixcbiAgICAgIFwiZGF0YS1lZGl0b3JcIjogX3ZtLmZpZWxkXG4gICAgfVxuICB9LCBbX2MoJ3NwYW4nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwid3AtbWVkaWEtYnV0dG9ucy1pY29uXCJcbiAgfSksIF92bS5fdihcIiBBZGQgTWVkaWFcXG4gICAgICBcIildKV0pXSksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwid3AtZWRpdG9yLWNvbnRhaW5lclwiLFxuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwid3AtY29udGVudC1lZGl0b3ItY29udGFpbmVyXCJcbiAgICB9XG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcInF1aWNrdGFncy10b29sYmFyXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJlZF90b29sYmFyXCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCIgXCIpLCBfYygndGV4dGFyZWEnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwid3AtZWRpdG9yLWFyZWFcIixcbiAgICBzdGF0aWNTdHlsZToge1xuICAgICAgXCJoZWlnaHRcIjogXCIyMDBweFwiXG4gICAgfSxcbiAgICBhdHRyczoge1xuICAgICAgXCJhdXRvY29tcGxldGVcIjogXCJvZmZcIixcbiAgICAgIFwiY29sc1wiOiBcIjQwXCIsXG4gICAgICBcIm5hbWVcIjogX3ZtLmZpZWxkLFxuICAgICAgXCJpZFwiOiBfdm0uZmllbGRcbiAgICB9XG4gIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS5jb250ZW50KSldKV0pXSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtZDllNzNhODJcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi1kOWU3M2E4MlwiLFwiaGFzU2NvcGVkXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvanMvcGFnZXMvY29tcG9uZW50cy9XUC1XWVNJV1lHLnZ1ZVxuLy8gbW9kdWxlIGlkID0gODBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(t,e){ true?module.exports=e():\"function\"==typeof define&&define.amd?define(\"vue-slider-component\",[],e):\"object\"==typeof exports?exports[\"vue-slider-component\"]=e():t[\"vue-slider-component\"]=e()}(this,function(){return function(t){function e(s){if(i[s])return i[s].exports;var r=i[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var i={};return e.m=t,e.c=i,e.i=function(t){return t},e.d=function(t,i,s){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:s})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,\"a\",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p=\"\",e(e.s=2)}([function(t,e,i){i(7);var s=i(5)(i(1),i(6),\"data-v-4f2807ae\",null);t.exports=s.exports},function(t,e,i){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.default={data:function(){return{flag:!1,size:0,currentValue:0,currentSlider:0}},props:{width:{type:[Number,String],default:\"auto\"},height:{type:[Number,String],default:6},data:{type:Array,default:null},dotSize:{type:Number,default:16},min:{type:Number,default:0},max:{type:Number,default:100},interval:{type:Number,default:1},show:{type:Boolean,default:!0},disabled:{type:Boolean,default:!1},piecewise:{type:Boolean,default:!1},tooltip:{type:[String,Boolean],default:\"always\"},eventType:{type:String,default:\"auto\"},direction:{type:String,default:\"horizontal\"},reverse:{type:Boolean,default:!1},lazy:{type:Boolean,default:!1},clickable:{type:Boolean,default:!0},speed:{type:Number,default:.5},realTime:{type:Boolean,default:!1},value:{type:[String,Number,Array],default:0},piecewiseLabel:{type:Boolean,default:!1},sliderStyle:[Array,Object],tooltipDir:[Array,String],formatter:[String,Function],piecewiseStyle:Object,piecewiseActiveStyle:Object,processStyle:Object,bgStyle:Object,tooltipStyle:[Array,Object],labelStyle:Object,labelActiveStyle:Object},computed:{flowDirection:function(){return\"vue-slider-\"+this.direction+(this.reverse?\"-reverse\":\"\")},tooltipDirection:function(){var t=this.tooltipDir||(\"vertical\"===this.direction?\"left\":\"top\");return Array.isArray(t)?this.isRange?t:t[1]:this.isRange?[t,t]:t},tooltipStatus:function(){return\"hover\"===this.tooltip&&this.flag?\"vue-slider-always\":this.tooltip?\"vue-slider-\"+this.tooltip:\"\"},tooltipClass:function(){return[\"vue-slider-tooltip-\"+this.tooltipDirection,\"vue-slider-tooltip\"]},isMobile:function(){return\"touch\"===this.eventType||\"mouse\"!==this.eventType&&/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od|ad)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(navigator.userAgent||navigator.vendor||window.opera)},isDisabled:function(){return\"none\"===this.eventType||this.disabled},disabledClass:function(){return this.disabled?\"vue-slider-disabled\":\"\"},isRange:function(){return Array.isArray(this.value)},slider:function(){return this.isRange?[this.$refs.dot0,this.$refs.dot1]:this.$refs.dot},minimum:function(){return this.data?0:this.min},val:{get:function(){return this.data?this.isRange?[this.data[this.currentValue[0]],this.data[this.currentValue[1]]]:this.data[this.currentValue]:this.currentValue},set:function(t){if(this.data)if(this.isRange){var e=this.data.indexOf(t[0]),i=this.data.indexOf(t[1]);e>-1&&i>-1&&(this.currentValue=[e,i])}else{var s=this.data.indexOf(t);s>-1&&(this.currentValue=s)}else this.currentValue=t}},currentIndex:function(){return this.isRange?this.data?this.currentValue:[(this.currentValue[0]-this.minimum)/this.spacing,(this.currentValue[1]-this.minimum)/this.spacing]:(this.currentValue-this.minimum)/this.spacing},indexRange:function(){return this.isRange?this.currentIndex:[0,this.currentIndex]},maximum:function(){return this.data?this.data.length-1:this.max},multiple:function(){var t=(\"\"+this.interval).split(\".\")[1];return t?Math.pow(10,t.length):1},spacing:function(){return this.data?1:this.interval},total:function(){return this.data?this.data.length-1:(~~((this.maximum-this.minimum)*this.multiple)%(this.interval*this.multiple)!=0&&console.error(\"[Vue-slider warn]: Prop[interval] is illegal, Please make sure that the interval can be divisible\"),(this.maximum-this.minimum)/this.interval)},gap:function(){return this.size/this.total},position:function(){return this.isRange?[(this.currentValue[0]-this.minimum)/this.spacing*this.gap,(this.currentValue[1]-this.minimum)/this.spacing*this.gap]:(this.currentValue-this.minimum)/this.spacing*this.gap},limit:function(){return this.isRange?[[0,this.position[1]],[this.position[0],this.size]]:[0,this.size]},valueLimit:function(){return this.isRange?[[this.minimum,this.currentValue[1]],[this.currentValue[0],this.maximum]]:[this.minimum,this.maximum]},wrapStyles:function(){return\"vertical\"===this.direction?{height:\"number\"==typeof this.height?this.height+\"px\":this.height,padding:this.dotSize/2+\"px\"}:{width:\"number\"==typeof this.width?this.width+\"px\":this.width,padding:this.dotSize/2+\"px\"}},sliderStyles:function(){return Array.isArray(this.sliderStyle)?this.isRange?this.sliderStyle:this.sliderStyle[1]:this.isRange?[this.sliderStyle,this.sliderStyle]:this.sliderStyle},tooltipStyles:function(){return Array.isArray(this.tooltipStyle)?this.isRange?this.tooltipStyle:this.tooltipStyle[1]:this.isRange?[this.tooltipStyle,this.tooltipStyle]:this.tooltipStyle},elemStyles:function(){return\"vertical\"===this.direction?{width:this.width+\"px\",height:\"100%\"}:{height:this.height+\"px\"}},dotStyles:function(){return\"vertical\"===this.direction?{width:this.dotSize+\"px\",height:this.dotSize+\"px\",left:-(this.dotSize-this.width)/2+\"px\"}:{width:this.dotSize+\"px\",height:this.dotSize+\"px\",top:-(this.dotSize-this.height)/2+\"px\"}},piecewiseDotStyle:function(){return\"vertical\"===this.direction?{width:this.width+\"px\",height:this.width+\"px\"}:{width:this.height+\"px\",height:this.height+\"px\"}},piecewiseDotWrap:function(){if(!this.piecewise)return!1;for(var t=[],e=(this.size,\"vertical\"===this.direction?this.width:this.height,this.total,0);e<=this.total;e++){var i=\"vertical\"===this.direction?{bottom:this.gap*e-this.width/2+\"px\",left:\"200px\"}:{left:this.gap*e-this.height/2+\"px\",top:\"0\"},s=this.reverse?this.total-e:e,r=this.data?this.data[s]:this.spacing*s+this.min;t.push({style:i,label:this.formatter?this.formatting(r):r,inRange:s>=this.indexRange[0]&&s<=this.indexRange[1]})}return t}},watch:{value:function(t){this.flag||this.setValue(t,!0)},max:function(t){var e=this.limitValue(this.val);!1!==e&&this.setValue(e),this.refresh()},min:function(t){var e=this.limitValue(this.val);!1!==e&&this.setValue(e),this.refresh()},show:function(t){var e=this;t&&!this.size&&this.$nextTick(function(){e.refresh()})}},methods:{bindEvents:function(){this.isMobile?(this.$refs.wrap.addEventListener(\"touchmove\",this.moving),this.$refs.wrap.addEventListener(\"touchend\",this.moveEnd)):(document.addEventListener(\"mousemove\",this.moving),document.addEventListener(\"mouseup\",this.moveEnd),document.addEventListener(\"mouseleave\",this.moveEnd))},unbindEvents:function(){window.removeEventListener(\"resize\",this.refresh),this.isMobile?(this.$refs.wrap.removeEventListener(\"touchmove\",this.moving),this.$refs.wrap.removeEventListener(\"touchend\",this.moveEnd)):(document.removeEventListener(\"mousemove\",this.moving),document.removeEventListener(\"mouseup\",this.moveEnd),document.removeEventListener(\"mouseleave\",this.moveEnd))},formatting:function(t){return\"string\"==typeof this.formatter?this.formatter.replace(/\\{value\\}/,t):this.formatter(t)},getPos:function(t){return this.realTime&&this.getStaticData(),\"vertical\"===this.direction?this.reverse?t.pageY-this.offset:this.size-(t.pageY-this.offset):this.reverse?this.size-(t.clientX-this.offset):t.clientX-this.offset},wrapClick:function(t){if(this.isDisabled||!this.clickable)return!1;var e=this.getPos(t);this.isRange&&(this.currentSlider=e>(this.position[1]-this.position[0])/2+this.position[0]?1:0),this.setValueOnPos(e)},moveStart:function(t){if(this.isDisabled)return!1;this.isRange&&(this.currentSlider=t),this.flag=!0,this.$emit(\"drag-start\",this)},moving:function(t){if(!this.flag)return!1;t.preventDefault(),this.isMobile&&(t=t.targetTouches[0]),this.setValueOnPos(this.getPos(t),!0)},moveEnd:function(t){if(!this.flag)return!1;this.$emit(\"drag-end\",this),this.lazy&&this.isDiff(this.val,this.value)&&this.syncValue(),this.flag=!1,this.setPosition()},setValueOnPos:function(t,e){var i=this.isRange?this.limit[this.currentSlider]:this.limit,s=this.isRange?this.valueLimit[this.currentSlider]:this.valueLimit;if(t>=i[0]&&t<=i[1]){this.setTransform(t);var r=(Math.round(t/this.gap)*(this.spacing*this.multiple)+this.minimum*this.multiple)/this.multiple;this.setCurrentValue(r,e)}else t<i[0]?(this.setTransform(i[0]),this.setCurrentValue(s[0]),1===this.currentSlider&&(this.currentSlider=0)):(this.setTransform(i[1]),this.setCurrentValue(s[1]),0===this.currentSlider&&(this.currentSlider=1))},isDiff:function(t,e){return Object.prototype.toString.call(t)!==Object.prototype.toString.call(e)||(Array.isArray(t)&&t.length===e.length?t.some(function(t,i){return t!==e[i]}):t!==e)},setCurrentValue:function(t,e){if(t<this.minimum||t>this.maximum)return!1;this.isRange?this.isDiff(this.currentValue[this.currentSlider],t)&&(this.currentValue.splice(this.currentSlider,1,t),this.lazy&&this.flag||this.syncValue()):this.isDiff(this.currentValue,t)&&(this.currentValue=t,this.lazy&&this.flag||this.syncValue()),e||this.setPosition()},setIndex:function(t){if(Array.isArray(t)&&this.isRange){var e=void 0;e=this.data?[this.data[t[0]],this.data[t[1]]]:[this.spacing*t[0]+this.minimum,this.spacing*t[1]+this.minimum],this.setValue(e)}else t=this.spacing*t+this.minimum,this.isRange&&(this.currentSlider=t>(this.currentValue[1]-this.currentValue[0])/2+this.currentValue[0]?1:0),this.setCurrentValue(t)},setValue:function(t,e,i){var s=this;if(this.isDiff(this.val,t)){var r=this.limitValue(t);this.val=!1!==r?this.isRange?r.concat():r:this.isRange?t.concat():t,this.syncValue(e)}this.$nextTick(function(){s.setPosition(i)})},setPosition:function(t){this.flag||this.setTransitionTime(void 0===t?this.speed:t),this.isRange?(this.currentSlider=0,this.setTransform(this.position[this.currentSlider]),this.currentSlider=1,this.setTransform(this.position[this.currentSlider])):this.setTransform(this.position),this.flag||this.setTransitionTime(0)},setTransform:function(t){var e=(\"vertical\"===this.direction?this.dotSize/2-t:t-this.dotSize/2)*(this.reverse?-1:1),i=\"vertical\"===this.direction?\"translateY(\"+e+\"px)\":\"translateX(\"+e+\"px)\",s=(0===this.currentSlider?this.position[1]-t:t-this.position[0])+\"px\",r=(0===this.currentSlider?t:this.position[0])+\"px\";this.isRange?(this.slider[this.currentSlider].style.transform=i,this.slider[this.currentSlider].style.WebkitTransform=i,this.slider[this.currentSlider].style.msTransform=i,\"vertical\"===this.direction?(this.$refs.process.style.height=s,this.$refs.process.style[this.reverse?\"top\":\"bottom\"]=r):(this.$refs.process.style.width=s,this.$refs.process.style[this.reverse?\"right\":\"left\"]=r)):(this.slider.style.transform=i,this.slider.style.WebkitTransform=i,this.slider.style.msTransform=i,\"vertical\"===this.direction?(this.$refs.process.style.height=t+\"px\",this.$refs.process.style[this.reverse?\"top\":\"bottom\"]=0):(this.$refs.process.style.width=t+\"px\",this.$refs.process.style[this.reverse?\"right\":\"left\"]=0))},setTransitionTime:function(t){if(t||this.$refs.process.offsetWidth,this.isRange){for(var e=0;e<this.slider.length;e++)this.slider[e].style.transitionDuration=t+\"s\",this.slider[e].style.WebkitTransitionDuration=t+\"s\";this.$refs.process.style.transitionDuration=t+\"s\",this.$refs.process.style.WebkitTransitionDuration=t+\"s\"}else this.slider.style.transitionDuration=t+\"s\",this.slider.style.WebkitTransitionDuration=t+\"s\",this.$refs.process.style.transitionDuration=t+\"s\",this.$refs.process.style.WebkitTransitionDuration=t+\"s\"},limitValue:function(t){var e=this;if(this.data)return t;var i=!1;return this.isRange?t=t.map(function(t){return t<e.min?(i=!0,e.min):t>e.max?(i=!0,e.max):t}):t>this.max?(i=!0,t=this.max):t<this.min&&(i=!0,t=this.min),i&&t},syncValue:function(t){t||this.$emit(\"callback\",this.val),this.$emit(\"input\",this.isRange?this.val.concat():this.val)},getValue:function(){return this.val},getIndex:function(){return this.currentIndex},getStaticData:function(){this.$refs.elem&&(this.size=\"vertical\"===this.direction?this.$refs.elem.offsetHeight:this.$refs.elem.offsetWidth,this.offset=\"vertical\"===this.direction?this.$refs.elem.getBoundingClientRect().top+window.pageYOffset||document.documentElement.scrollTop:this.$refs.elem.getBoundingClientRect().left)},refresh:function(){this.$refs.elem&&(this.getStaticData(),this.setPosition())}},created:function(){window.addEventListener(\"resize\",this.refresh)},mounted:function(){var t=this;this.$nextTick(function(){t.getStaticData(),t.setValue(t.value,!0,0),t.bindEvents()})},beforeDestroy:function(){this.unbindEvents()}}},function(t,e,i){\"use strict\";var s=i(0);t.exports=s},function(t,e,i){e=t.exports=i(4)(),e.push([t.i,'.vue-slider-wrap[data-v-4f2807ae]{position:relative;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.vue-slider-wrap.vue-slider-disabled[data-v-4f2807ae]{opacity:.5;cursor:not-allowed}.vue-slider-wrap.vue-slider-has-label[data-v-4f2807ae]{margin-bottom:15px}.vue-slider-wrap.vue-slider-disabled .vue-slider-dot[data-v-4f2807ae]{cursor:not-allowed}.vue-slider-wrap .vue-slider[data-v-4f2807ae]{position:relative;display:block;border-radius:15px;background-color:#ccc}.vue-slider-wrap .vue-slider[data-v-4f2807ae]:after{content:\"\";position:absolute;left:0;top:0;width:100%;height:100%;z-index:2}.vue-slider-process[data-v-4f2807ae]{position:absolute;border-radius:15px;background-color:#3498db;transition:all 0s;z-index:1}.vue-slider-horizontal .vue-slider-process[data-v-4f2807ae]{width:0;height:100%;top:0;left:0;will-change:width}.vue-slider-vertical .vue-slider-process[data-v-4f2807ae]{width:100%;height:0;bottom:0;left:0;will-change:height}.vue-slider-horizontal-reverse .vue-slider-process[data-v-4f2807ae]{width:0;height:100%;top:0;right:0}.vue-slider-vertical-reverse .vue-slider-process[data-v-4f2807ae]{width:100%;height:0;top:0;left:0}.vue-slider-dot[data-v-4f2807ae]{position:absolute;border-radius:50%;background-color:#fff;box-shadow:.5px .5px 2px 1px rgba(0,0,0,.32);transition:all 0s;will-change:transform;cursor:pointer;z-index:3}.vue-slider-horizontal .vue-slider-dot[data-v-4f2807ae]{left:0}.vue-slider-vertical .vue-slider-dot[data-v-4f2807ae]{bottom:0}.vue-slider-horizontal-reverse .vue-slider-dot[data-v-4f2807ae]{right:0}.vue-slider-vertical-reverse .vue-slider-dot[data-v-4f2807ae]{top:0}.vue-slider-tooltip-wrap[data-v-4f2807ae]{display:none;position:absolute;z-index:9}.vue-slider-tooltip[data-v-4f2807ae]{display:block;font-size:14px;white-space:nowrap;padding:2px 5px;min-width:20px;text-align:center;color:#fff;border-radius:5px;border:1px solid #3498db;background-color:#3498db}.vue-slider-tooltip-wrap.vue-slider-tooltip-top[data-v-4f2807ae]{top:-9px;left:50%;transform:translate(-50%,-100%)}.vue-slider-tooltip-wrap.vue-slider-tooltip-bottom[data-v-4f2807ae]{bottom:-9px;left:50%;transform:translate(-50%,100%)}.vue-slider-tooltip-wrap.vue-slider-tooltip-left[data-v-4f2807ae]{top:50%;left:-9px;transform:translate(-100%,-50%)}.vue-slider-tooltip-wrap.vue-slider-tooltip-right[data-v-4f2807ae]{top:50%;right:-9px;transform:translate(100%,-50%)}.vue-slider-tooltip-wrap.vue-slider-tooltip-top .vue-slider-tooltip[data-v-4f2807ae]:before{content:\"\";position:absolute;bottom:-10px;left:50%;width:0;height:0;border:5px solid transparent;border:6px solid transparent\\\\0;border-top-color:inherit;transform:translate(-50%)}.vue-slider-tooltip-wrap.vue-slider-tooltip-bottom .vue-slider-tooltip[data-v-4f2807ae]:before{content:\"\";position:absolute;top:-10px;left:50%;width:0;height:0;border:5px solid transparent;border:6px solid transparent\\\\0;border-bottom-color:inherit;transform:translate(-50%)}.vue-slider-tooltip-wrap.vue-slider-tooltip-left .vue-slider-tooltip[data-v-4f2807ae]:before{content:\"\";position:absolute;top:50%;right:-10px;width:0;height:0;border:5px solid transparent;border:6px solid transparent\\\\0;border-left-color:inherit;transform:translateY(-50%)}.vue-slider-tooltip-wrap.vue-slider-tooltip-right .vue-slider-tooltip[data-v-4f2807ae]:before{content:\"\";position:absolute;top:50%;left:-10px;width:0;height:0;border:5px solid transparent;border:6px solid transparent\\\\0;border-right-color:inherit;transform:translateY(-50%)}.vue-slider-dot.vue-slider-hover:hover .vue-slider-tooltip-wrap[data-v-4f2807ae]{display:block}.vue-slider-dot.vue-slider-always .vue-slider-tooltip-wrap[data-v-4f2807ae]{display:block!important}.vue-slider-piecewise[data-v-4f2807ae]{position:absolute;width:100%;padding:0;margin:0;left:0;top:0;height:100%;list-style:none}.vue-slider-piecewise li[data-v-4f2807ae]{position:absolute;width:8px;height:8px}.vue-slider-piecewise .vue-slider-piecewise-dot[data-v-4f2807ae]{position:absolute;left:50%;top:50%;width:100%;height:100%;display:inline-block;background-color:rgba(0,0,0,.16);border-radius:50%;transform:translate(-50%,-50%);z-index:2;transition:all .3s}.vue-slider-piecewise li:first-child .vue-slider-piecewise-dot[data-v-4f2807ae],.vue-slider-piecewise li:last-child .vue-slider-piecewise-dot[data-v-4f2807ae]{visibility:hidden}.vue-slider-piecewise .vue-slider-piecewise-label[data-v-4f2807ae]{position:absolute;display:inline-block;top:15px;left:50%;white-space:nowrap;font-size:12px;color:#333;transform:translateX(-50%);visibility:visible}',\"\"])},function(t,e){t.exports=function(){var t=[];return t.toString=function(){for(var t=[],e=0;e<this.length;e++){var i=this[e];i[2]?t.push(\"@media \"+i[2]+\"{\"+i[1]+\"}\"):t.push(i[1])}return t.join(\"\")},t.i=function(e,i){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var s={},r=0;r<this.length;r++){var o=this[r][0];\"number\"==typeof o&&(s[o]=!0)}for(r=0;r<e.length;r++){var n=e[r];\"number\"==typeof n[0]&&s[n[0]]||(i&&!n[2]?n[2]=i:i&&(n[2]=\"(\"+n[2]+\") and (\"+i+\")\"),t.push(n))}},t}},function(t,e){t.exports=function(t,e,i,s){var r,o=t=t||{},n=typeof t.default;\"object\"!==n&&\"function\"!==n||(r=t,o=t.default);var a=\"function\"==typeof o?o.options:o;if(e&&(a.render=e.render,a.staticRenderFns=e.staticRenderFns),i&&(a._scopeId=i),s){var l=Object.create(a.computed||null);Object.keys(s).forEach(function(t){var e=s[t];l[t]=function(){return e}}),a.computed=l}return{esModule:r,exports:o,options:a}}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,i=t._self._c||e;return i(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.show,expression:\"show\"}],ref:\"wrap\",class:[\"vue-slider-wrap\",t.flowDirection,t.disabledClass,{\"vue-slider-has-label\":t.piecewiseLabel}],style:t.wrapStyles,on:{click:t.wrapClick}},[i(\"div\",{ref:\"elem\",staticClass:\"vue-slider\",style:[t.elemStyles,t.bgStyle]},[t.isMobile?[t.isRange?[i(\"div\",{ref:\"dot0\",class:[t.tooltipStatus,\"vue-slider-dot\"],style:[t.sliderStyles[0],t.dotStyles],on:{touchstart:function(e){t.moveStart(0)}}},[i(\"span\",{class:[\"vue-slider-tooltip-\"+t.tooltipDirection[0],\"vue-slider-tooltip-wrap\"]},[t._t(\"tooltip\",[i(\"span\",{staticClass:\"vue-slider-tooltip\",style:t.tooltipStyles[0]},[t._v(t._s(t.formatter?t.formatting(t.val[0]):t.val[0]))])],{value:t.val[0],index:0})],2)]),t._v(\" \"),i(\"div\",{ref:\"dot1\",class:[t.tooltipStatus,\"vue-slider-dot\"],style:[t.sliderStyles[1],t.dotStyles],on:{touchstart:function(e){t.moveStart(1)}}},[i(\"span\",{class:[\"vue-slider-tooltip-\"+t.tooltipDirection[1],\"vue-slider-tooltip-wrap\"]},[t._t(\"tooltip\",[i(\"span\",{staticClass:\"vue-slider-tooltip\",style:t.tooltipStyles[1]},[t._v(t._s(t.formatter?t.formatting(t.val[1]):t.val[1]))])],{value:t.val[1],index:1})],2)])]:[i(\"div\",{ref:\"dot\",class:[t.tooltipStatus,\"vue-slider-dot\"],style:[t.sliderStyles,t.dotStyles],on:{touchstart:t.moveStart}},[i(\"span\",{class:[\"vue-slider-tooltip-\"+t.tooltipDirection,\"vue-slider-tooltip-wrap\"]},[t._t(\"tooltip\",[t._v(\"\\n\\t\\t\\t\\t\\t\\t\\t\"+t._s(t.formatter?t.formatting(t.val):t.val)+\"\\n\\t\\t\\t\\t\\t\\t\")],{value:t.val})],2)])]]:[t.isRange?[i(\"div\",{ref:\"dot0\",class:[t.tooltipStatus,\"vue-slider-dot\"],style:[t.sliderStyles[0],t.dotStyles],on:{mousedown:function(e){t.moveStart(0)}}},[i(\"span\",{class:[\"vue-slider-tooltip-\"+t.tooltipDirection[0],\"vue-slider-tooltip-wrap\"]},[t._t(\"tooltip\",[i(\"span\",{staticClass:\"vue-slider-tooltip\",style:t.tooltipStyles[0]},[t._v(t._s(t.formatter?t.formatting(t.val[0]):t.val[0]))])],{value:t.val[0],index:0})],2)]),t._v(\" \"),i(\"div\",{ref:\"dot1\",class:[t.tooltipStatus,\"vue-slider-dot\"],style:[t.sliderStyles[1],t.dotStyles],on:{mousedown:function(e){t.moveStart(1)}}},[i(\"span\",{class:[\"vue-slider-tooltip-\"+t.tooltipDirection[1],\"vue-slider-tooltip-wrap\"]},[t._t(\"tooltip\",[i(\"span\",{staticClass:\"vue-slider-tooltip\",style:t.tooltipStyles[1]},[t._v(t._s(t.formatter?t.formatting(t.val[1]):t.val[1]))])],{value:t.val[1],index:1})],2)])]:[i(\"div\",{ref:\"dot\",class:[t.tooltipStatus,\"vue-slider-dot\"],style:[t.sliderStyles,t.dotStyles],on:{mousedown:t.moveStart}},[i(\"span\",{class:[\"vue-slider-tooltip-\"+t.tooltipDirection,\"vue-slider-tooltip-wrap\"]},[t._t(\"tooltip\",[i(\"span\",{staticClass:\"vue-slider-tooltip\",style:t.tooltipStyles},[t._v(t._s(t.formatter?t.formatting(t.val):t.val))])],{value:t.val})],2)])]],t._v(\" \"),t.piecewise?[i(\"ul\",{staticClass:\"vue-slider-piecewise\"},t._l(t.piecewiseDotWrap,function(e,s){return i(\"li\",{style:[t.piecewiseDotStyle,e.style]},[i(\"span\",{staticClass:\"vue-slider-piecewise-dot\",style:[t.piecewiseStyle,e.inRange?t.piecewiseActiveStyle:null]}),t._v(\" \"),t.piecewiseLabel?i(\"span\",{staticClass:\"vue-slider-piecewise-label\",style:[t.labelStyle,e.inRange?t.labelActiveStyle:null]},[t._v(t._s(e.label))]):t._e()])}))]:t._e(),t._v(\" \"),i(\"div\",{ref:\"process\",staticClass:\"vue-slider-process\",style:t.processStyle})],2)])},staticRenderFns:[]}},function(t,e,i){var s=i(3);\"string\"==typeof s&&(s=[[t.i,s,\"\"]]),s.locals&&(t.exports=s.locals);i(8)(\"3e13c911\",s,!0)},function(t,e,i){function s(t){for(var e=0;e<t.length;e++){var i=t[e],s=h[i.id];if(s){s.refs++;for(var r=0;r<s.parts.length;r++)s.parts[r](i.parts[r]);for(;r<i.parts.length;r++)s.parts.push(o(i.parts[r]));s.parts.length>i.parts.length&&(s.parts.length=i.parts.length)}else{for(var n=[],r=0;r<i.parts.length;r++)n.push(o(i.parts[r]));h[i.id]={id:i.id,refs:1,parts:n}}}}function r(){var t=document.createElement(\"style\");return t.type=\"text/css\",d.appendChild(t),t}function o(t){var e,i,s=document.querySelector('style[data-vue-ssr-id~=\"'+t.id+'\"]');if(s){if(f)return v;s.parentNode.removeChild(s)}if(m){var o=c++;s=p||(p=r()),e=n.bind(null,s,o,!1),i=n.bind(null,s,o,!0)}else s=r(),e=a.bind(null,s),i=function(){s.parentNode.removeChild(s)};return e(t),function(s){if(s){if(s.css===t.css&&s.media===t.media&&s.sourceMap===t.sourceMap)return;e(t=s)}else i()}}function n(t,e,i,s){var r=i?\"\":s.css;if(t.styleSheet)t.styleSheet.cssText=g(e,r);else{var o=document.createTextNode(r),n=t.childNodes;n[e]&&t.removeChild(n[e]),n.length?t.insertBefore(o,n[e]):t.appendChild(o)}}function a(t,e){var i=e.css,s=e.media,r=e.sourceMap;if(s&&t.setAttribute(\"media\",s),r&&(i+=\"\\n/*# sourceURL=\"+r.sources[0]+\" */\",i+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+\" */\"),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var l=\"undefined\"!=typeof document;if(\"undefined\"!=typeof DEBUG&&DEBUG&&!l)throw new Error(\"vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\");var u=i(9),h={},d=l&&(document.head||document.getElementsByTagName(\"head\")[0]),p=null,c=0,f=!1,v=function(){},m=\"undefined\"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());t.exports=function(t,e,i){f=i;var r=u(t,e);return s(r),function(e){for(var i=[],o=0;o<r.length;o++){var n=r[o],a=h[n.id];a.refs--,i.push(a)}e?(r=u(t,e),s(r)):r=[];for(var o=0;o<i.length;o++){var a=i[o];if(0===a.refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete h[a.id]}}}};var g=function(){var t=[];return function(e,i){return t[e]=i,t.filter(Boolean).join(\"\\n\")}}()},function(t,e){t.exports=function(t,e){for(var i=[],s={},r=0;r<e.length;r++){var o=e[r],n=o[0],a=o[1],l=o[2],u=o[3],h={id:t+\":\"+r,css:a,media:l,sourceMap:u};s[n]?s[n].parts.push(h):i.push(s[n]={id:n,parts:[h]})}return i}}])});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })
/******/ ]);